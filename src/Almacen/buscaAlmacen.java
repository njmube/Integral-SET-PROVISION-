/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package Almacen;

import Integral.FormatoTabla;
import Integral.Herramientas;
import Integral.DefaultTableHeaderCellRenderer;
import Hibernate.Util.HibernateUtil;
import Hibernate.entidades.Almacen;
import Hibernate.entidades.Usuario;
import Integral.HorizontalBarUI;
import Integral.VerticalBarUI;
import javax.swing.InputMap;
import javax.swing.JOptionPane;
import java.awt.Color;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JScrollBar;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
/**
 *
 * @author ISC_SALVADOR
 */
public class buscaAlmacen extends javax.swing.JDialog {

    public static final Almacen RET_CANCEL =null;
    InputMap map = new InputMap();
    DefaultTableModel model;
    Usuario usr;
    String sessionPrograma="";
    Herramientas h;
    FormatoTabla formato;
    int inicio=0;
    boolean parar=false;
    final JScrollBar scrollBar;
    
    /** Creates new form acceso */
    public buscaAlmacen(java.awt.Frame parent, boolean modal, Usuario usuario) {
        super(parent, modal);
        initComponents();
        scrollBar = scroll.getVerticalScrollBar();
        scrollBar.addAdjustmentListener(new AdjustmentListener() {
            public void adjustmentValueChanged(AdjustmentEvent ae) {
                if(parar==false)
                {
                    int extent = scrollBar.getModel().getExtent();
                    extent+=scrollBar.getValue();
                    if(extent==scrollBar.getMaximum())
                        buscaDato();
                }
              //System.out.println("actual: " + extent+" maximo:"+scrollBar.getMaximum());
            }
          });
        getRootPane().setDefaultButton(jButton5);
        usr=usuario;
        t_datos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        titulos();
        scroll.getVerticalScrollBar().setUI(new VerticalBarUI());
        scroll.getHorizontalScrollBar().setUI(new HorizontalBarUI());
        buscaDato();
    }    

    private void doClose(Almacen o) {
        returnStatus = o;
        setVisible(false);
        dispose();
    }
    
    public Almacen getReturnStatus() {
        return returnStatus;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        t_busca = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        c_filtro = new javax.swing.JComboBox();
        jButton5 = new javax.swing.JButton();
        scroll = new javax.swing.JScrollPane();
        t_datos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Búsqueda movimientos en Almacen.");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Filtrar por:", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 2, 11))); // NOI18N

        t_busca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_buscaActionPerformed(evt);
            }
        });
        t_busca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                t_buscaKeyReleased(evt);
            }
        });

        jLabel1.setText("Contiene:");

        c_filtro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "N° Entrada", "Pedido", "O. Taller", "No Proveedor (pedido)", "Nombre de Proveedor (pedido)", "Entrego/recibió" }));
        c_filtro.setNextFocusableComponent(t_busca);
        c_filtro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_filtroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(c_filtro, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(t_busca)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(t_busca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(c_filtro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 15, Short.MAX_VALUE))
        );

        jButton5.setBackground(new java.awt.Color(2, 135, 242));
        jButton5.setForeground(new java.awt.Color(254, 254, 254));
        jButton5.setIcon(new ImageIcon("imagenes/seleccionar.png"));
        jButton5.setMnemonic('s');
        jButton5.setText("Seleccionar");
        jButton5.setToolTipText("Cargar registro seleccionado");
        jButton5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        t_datos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " Movimiento", "Usuario", "Fecha", "Pedido", "Notas", "Tipo", "Operación"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        t_datos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                t_datosMouseClicked(evt);
            }
        });
        t_datos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                t_datosKeyPressed(evt);
            }
        });
        scroll.setViewportView(t_datos);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton5))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 958, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void t_buscaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_buscaKeyReleased
        // TODO add your handling code here:
        inicio=0;
        parar=false;
        this.buscaDato();
    }//GEN-LAST:event_t_buscaKeyReleased

    private void c_filtroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c_filtroActionPerformed
        // TODO add your handling code here:
       inicio=0;
        parar=false;
        this.buscaDato();
    }//GEN-LAST:event_c_filtroActionPerformed

    private void t_buscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_buscaActionPerformed
        // TODO add your handling code here:
        t_datos.requestFocus();
        t_datos.getSelectionModel().setSelectionInterval(0,0);
    }//GEN-LAST:event_t_buscaActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        t_busca.requestFocus();
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            usr = (Usuario)session.get(Usuario.class, usr.getIdUsuario());
            if(usr.getConsultaMovimientoAlmacen()==true)
            {
                if(t_datos.getSelectedRow()>=0)
                {
                    Almacen cli = new Almacen();
                    cli.setIdAlmacen(Integer.parseInt(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString()));
                    doClose(cli);
                }
                else
                    JOptionPane.showMessageDialog(null, "¡No hay un movimiento seleccionado!");
            }
            else
                JOptionPane.showMessageDialog(null, "¡Acceso denegado!");
        }catch(Exception e)
        {
            System.out.println(e);
        }
        if(session!=null)
            if(session.isOpen())
                session.close();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void t_datosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_datosKeyPressed
        // TODO add your handling code here:
        int code = evt.getKeyCode(); 
        if(code == KeyEvent.VK_ENTER)
        {
            t_datos.getInputMap(t_datos.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0,false), "selectColumnCell");
            this.jButton5.requestFocus();
        }
    }//GEN-LAST:event_t_datosKeyPressed

    private void t_datosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_t_datosMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            t_busca.requestFocus();
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            usr = (Usuario)session.get(Usuario.class, usr.getIdUsuario());
            if(usr.getConsultaMovimientoAlmacen()==true)
            {
                if(t_datos.getSelectedRow()>=0)
                {
                    Almacen cli = new Almacen();
                    cli.setIdAlmacen(Integer.parseInt(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString()));
                    doClose(cli);
                }
                else
                    JOptionPane.showMessageDialog(null, "¡No hay un movimiento seleccionado!");
            }
            else
                JOptionPane.showMessageDialog(null, "¡Acceso denegado!");
        }catch(Exception e)
        {
            System.out.println(e);
        }
        if(session!=null)
            if(session.isOpen())
                session.close();
        }
    }//GEN-LAST:event_t_datosMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox c_filtro;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane scroll;
    public javax.swing.JTextField t_busca;
    private javax.swing.JTable t_datos;
    // End of variables declaration//GEN-END:variables

    private void buscaDato()
    {
        String consulta="select distinct almacen.id_almacen, empleado.nombre, almacen.fecha, almacen.id_pedido, almacen.notas, almacen.tipo_movimiento, almacen.operacion from almacen left join usuario on almacen.usuario=usuario.id_usuario left join empleado on empleado.id_empleado=usuario.id_empleado ";
        String aux="";
        if(c_filtro.getSelectedItem().toString().compareTo("N° Entrada")==0)
            if(t_busca.getText().compareTo("")!=0)
                consulta+=" where almacen.id_almacen=" + t_busca.getText();

        if(c_filtro.getSelectedItem().toString().compareTo("Pedido")==0)
        {
            if(t_busca.getText().compareTo("")!=0)
            consulta+="left join pedido on pedido.id_pedido=almacen.id_pedido where almacen.id_pedido="+t_busca.getText();
        }

        if(c_filtro.getSelectedItem().toString().compareTo("O. Taller")==0)
        {
            if(t_busca.getText().compareTo("")!=0)
            {
                aux="select distinct almacen.id_almacen, empleado.nombre, almacen.fecha, almacen.id_pedido, almacen.notas, almacen.tipo_movimiento, almacen.operacion from almacen left join usuario on almacen.usuario=usuario.id_usuario left join empleado on empleado.id_empleado=usuario.id_empleado \n" +
                    "left join pedido on almacen.id_pedido=pedido.id_pedido left join partida on pedido.id_pedido=partida.id_partida where partida.id_orden="+t_busca.getText()+";";
                consulta+="left join movimiento on almacen.id_almacen=movimiento.id_almacen join partida on movimiento.id_partida=partida.id_partida where partida.id_orden="+t_busca.getText()+" or almacen.id_orden="+t_busca.getText();
            }
        }

        if(c_filtro.getSelectedItem().toString().compareTo("No Proveedor (pedido)")==0)
            if(t_busca.getText().compareTo("")!=0)
                consulta+="left join pedido on almacen.id_pedido=pedido.id_pedido left join proveedor on pedido.id_proveedor=proveedor.id_proveedor where proveedor.id_proveedor like '%"+t_busca.getText()+"%'";

        if(c_filtro.getSelectedItem().toString().compareTo("Nombre de Proveedor (pedido)")==0)
            consulta+="left join pedido on almacen.id_pedido=pedido.id_pedido left join proveedor on pedido.id_proveedor=proveedor.id_proveedor where proveedor.nombre like'%"+t_busca.getText()+"%'";

        if(c_filtro.getSelectedItem().toString().compareTo("Entrego/recibió")==0)
            consulta+="where almacen.entrego like'%"+t_busca.getText()+"%'";

        consulta+=" order by almacen.id_almacen desc"; 
        
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            int siguente=inicio+20;
            consulta+=" limit "+inicio+", 20";
            session.beginTransaction();
            Query q = session.createSQLQuery(consulta);
            q.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
            ArrayList resultList = (ArrayList)q.list();

            if(aux.compareTo("")!=0)
            {
                Query q1 = session.createSQLQuery(aux);
                q1.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
                resultList.addAll((ArrayList)q1.list());
            }
            int l1=resultList.size();

            DefaultTableModel modelo= (DefaultTableModel)t_datos.getModel();
            if(inicio==0)
                    modelo.setNumRows(0);
            if(l1>0)
            {
                for (int x=0; x<l1; x++) 
                {
                    java.util.HashMap map = (java.util.HashMap) resultList.get(x);
                    Object[] objeto = new Object[7];
                    objeto[0]=map.get("id_almacen");
                    objeto[1]=map.get("nombre");
                    objeto[2]=map.get("fecha");
                    objeto[3]=map.get("id_pedido");
                    objeto[4]=map.get("notas");
                    
                    int operacion=(int)map.get("operacion");
                    int tipo_movimiento=(int)map.get("tipo_movimiento");
                    if(tipo_movimiento==1)
                    {
                        switch(operacion)
                        {
                            case 1:
                                objeto[5]="Entrada";
                                objeto[6]="P. Interno";
                                break;
                            
                            case 2:
                                objeto[5]="Entrada";
                                objeto[6]="P. Externo";
                                break;
                                
                            case 3:
                                objeto[5]="Entrada";
                                objeto[6]="P. Adicional";
                                break;
                                
                            case 4:
                                objeto[5]="Entregada";
                                objeto[6]="Compañía";
                                break;

                            case 5:
                                objeto[5]="Devolución";
                                objeto[6]="Operarios";
                                break;
                            case 6:
                                objeto[5]="Devolución";
                                objeto[6]="Venta";
                                break;
                            
                            case 7:
                                objeto[5]="Entrada";
                                objeto[6]="P.Consumibles";
                                break;
                            
                            case 8:
                                objeto[5]="Devolucion";
                                objeto[6]="Consumibles";
                                break;
                                
                            case 9:
                                objeto[5]="Entrada";
                                objeto[6]="Ajuste";
                                break;
                        }
                    }
                    else
                    {
                        switch(operacion)
                        {
                            case 1:
                                objeto[5]="Devolución";
                                objeto[6]="P. Interno";
                                break;

                            case 2:
                                objeto[5]="Devolución";
                                objeto[6]="P. Externo";
                                break;
                            
                            case 3:
                                objeto[5]="Devolución";
                                objeto[6]="P. Adicional";
                                break;
                            
                            case 4:
                                objeto[5]="Devolución";
                                objeto[6]="Compañía";
                                break;
                        
                            case 5:
                                objeto[5]="Salida";
                                objeto[6]="Operarios";
                                break;
                            
                            case 6:
                                objeto[5]="Salida";
                                objeto[6]="Venta";
                                break;
                            
                            case 7:
                                objeto[5]="Devolución";
                                objeto[6]="P.Consumibles";
                                break;
                        
                            case 8:
                                objeto[5]="Salida";
                                objeto[6]="Consumibles";
                                break;
                            
                            case 9:
                                objeto[5]="Salida";
                                objeto[6]="Ajuste";
                                break;
                        }
                    }
                    modelo.addRow(objeto);
                }
                inicio=siguente;
            }
            else
            {
                parar=true;
                if(inicio==0)
                {
                    modelo.setNumRows(0);
                }
            }
        }catch(Exception e)
        {
            System.out.println(e);
        }
        if(session!=null)
            if(session.isOpen())
                session.close();
        titulos();
    }
    private Almacen returnStatus = RET_CANCEL;
    
public void tabla_tamaños()
    {
        TableColumnModel col_model = t_datos.getColumnModel();
        for (int i=0; i<t_datos.getColumnCount(); i++)
        {
            TableColumn column = col_model.getColumn(i);
            switch(i)
            {
                case 0:
                    column.setPreferredWidth(20);
                    break;
                case 1:
                    column.setPreferredWidth(200);
                    break;
                case 2:
                    column.setPreferredWidth(70);
                    break;      
                case 3:
                    column.setPreferredWidth(20);
                    break; 
                case 4:
                    column.setPreferredWidth(200);
                    break; 
                case 5:
                    column.setPreferredWidth(40);
                    break; 
                case 6:
                    column.setPreferredWidth(40);
                    break; 
            }
        }
    }
    
    public void titulos()
    {
        TableCellRenderer textNormal = new DefaultTableHeaderCellRenderer();        
        for (int c=0; c<t_datos.getColumnCount(); c++)
        {
            t_datos.getColumnModel().getColumn(c).setHeaderRenderer(textNormal);
        }
        JTableHeader header = t_datos.getTableHeader();
        header.setBackground(new java.awt.Color(2, 135, 242));//102,102,102
        header.setForeground(Color.white);
        t_datos.setShowVerticalLines(true);
        t_datos.setShowHorizontalLines(true);
        
        t_datos.setDefaultRenderer(Double.class, formato); 
        t_datos.setDefaultRenderer(Integer.class, formato);
        t_datos.setDefaultRenderer(String.class, formato);
        t_datos.setDefaultRenderer(Boolean.class, formato);
        this.tabla_tamaños();
    }
}
