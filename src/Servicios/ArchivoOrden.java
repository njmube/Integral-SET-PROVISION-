/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Servicios;

import Hibernate.Util.HibernateUtil;
import Hibernate.entidades.Archivo;
import Hibernate.entidades.Orden;
import Hibernate.entidades.Usuario;
import Integral.Ftp;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;
import Integral.Herramientas;
import java.io.BufferedReader;
import java.io.FileReader;
import org.apache.commons.net.ftp.FTPFile;


/**
 *
 * @author I.S.C Salvador
 */
public class ArchivoOrden extends javax.swing.JPanel {

    /**
     * Creates new form Galeria
     */
    private Usuario usr;
    private String orden="";
    DefaultTableModel model;
    String[] columnas = new String [] {"ID", "NOMBRE", "FECHA"};
    Orden ord;
    Herramientas h;
    String sessionPrograma="";
    String edo="";
    String rutaFTP;
    JFileChooser selector;
    
    public ArchivoOrden(String id, Usuario usuario, String estado, String ses, String carpeta) {
        usr=usuario;
        sessionPrograma=ses;
        orden=id;
        edo=estado;
        initComponents();
        try{
        FileReader fil = new FileReader("ftp.txt");
            BufferedReader b = new BufferedReader(fil);
            if((rutaFTP = b.readLine())==null)
                rutaFTP="";
            b.close();
            fil.close();
        }catch(Exception e){}
        
        if(usr.getEditaDocumentos()==false)
        {
            edo="sin permiso";
	}
        cargaArchivos();
        //p_contenedor.set
        if(edo.compareTo("")==0)
            visualiza(true);
        else
            visualiza(false);
        h=new Herramientas(usr, 0);
        if(h.isCerrada(orden)==true)
            visualiza(false);
        selector=new JFileChooser();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        panel = new javax.swing.JScrollPane();
        p_contenedor = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));

        jButton2.setBackground(new java.awt.Color(2, 135, 242));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new ImageIcon("imagenes/guardar-documento.png"));
        jButton2.setToolTipText("Agregar un documento");
        jButton2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        panel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(90, 66, 126), 1, true));
        panel.setMaximumSize(new java.awt.Dimension(818, 32767));

        p_contenedor.setBackground(new java.awt.Color(255, 255, 255));
        p_contenedor.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(90, 66, 126), 1, true), "Carpeta de Archivos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12))); // NOI18N
        p_contenedor.setAutoscrolls(true);
        p_contenedor.setMaximumSize(new java.awt.Dimension(787, 32767));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT);
        flowLayout1.setAlignOnBaseline(true);
        p_contenedor.setLayout(flowLayout1);
        panel.setViewportView(p_contenedor);

        jScrollPane1.setViewportView(panel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 890, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(235, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        h=new Herramientas(usr, 0);
        h.session(sessionPrograma);
        
        selector.setSelectedFile(null);
        selector.setMultiSelectionEnabled(true);
        int estado=1;
        File destino=null;
        estado=selector.showOpenDialog(null);
        if(estado==0)
        {
            File archivo[]=null;
            archivo = selector.getSelectedFiles();
            Session session = HibernateUtil.getSessionFactory().openSession();
            try
            {
                Ftp miFtp=new Ftp();
                boolean respuesta=true;
                respuesta=miFtp.conectar(rutaFTP, "compras", "04650077", 3310);
                if(respuesta==true){
                    for(int x=0; x<archivo.length; x++)
                    {
                        session.beginTransaction().begin();
                        if(archivo[x].exists())
                        {
                            if(!miFtp.cambiarDirectorio("/ordenes"))
                                if(miFtp.crearDirectorio("/ordenes"))
                                    miFtp.cambiarDirectorio("/ordenes");
                            
                            if(!miFtp.cambiarDirectorio("/ordenes/"+orden+"/"))
                            {
                                miFtp.cambiarDirectorio(miFtp.raiz);
                                if(miFtp.crearDirectorio("/ordenes/"+orden+"/"))
                                    miFtp.cambiarDirectorio("/ordenes/"+orden+"/");
                            }
                            
                            if(!miFtp.cambiarDirectorio("/ordenes/"+orden+"/archivos/"))
                            {
                                miFtp.cambiarDirectorio(miFtp.raiz);
                                if(miFtp.crearDirectorio("/ordenes/"+orden+"/archivos/"))
                                    miFtp.cambiarDirectorio("/ordenes/"+orden+"/archivos/");
                            }
                            
                            FTPFile[] lista=miFtp.listarArchivos();
                            boolean existe=false;
                            for(int pos=0; pos<lista.length; pos++)
                            {
                                if(lista[pos].getName().compareToIgnoreCase(archivo[x].getName())==0)
                                {
                                    existe=true;
                                    pos=lista.length;
                                }
                            }

                            if(existe==true)
                            {
                                int opt=JOptionPane.showConfirmDialog(this, "El archivo '"+archivo[x].getName()+"' ya existe desea remplazarlo");
                                if(opt==0)
                                {
                                    try
                                    {
                                        //****************obtenemos la nueva fecha
                                        respuesta=miFtp.subirArchivo(archivo[x].getPath(), archivo[x].getName());
                                        Date fecha_orden = new Date();
                                        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                                        String valor=dateFormat.format(fecha_orden);
                                        String [] fecha = valor.split("-");
                                        String [] hora=fecha[2].split(":");
                                        String [] aux=hora[0].split(" ");
                                        fecha[2]=aux[0];
                                        hora[0]=aux[1];
                                        Calendar calendario = Calendar.getInstance();
                                        calendario.set(
                                            Integer.parseInt(fecha[2]), 
                                            Integer.parseInt(fecha[1])-1, 
                                            Integer.parseInt(fecha[0]), 
                                            Integer.parseInt(hora[0]), 
                                            Integer.parseInt(hora[1]), 
                                            Integer.parseInt(hora[2]));

                                        session.beginTransaction();
                                        int id=-1;

                                       Archivo ar = (Archivo) session.createCriteria(Archivo.class).add(Restrictions.eq("orden.idOrden", ord.getIdOrden())).add(Restrictions.eq("nombreDocumento", archivo[x].getName())).setMaxResults(1).uniqueResult();
                                       if(ar!=null)
                                        {
                                            ar.setFechaDocumento(calendario.getTime());
                                            session.update(ar);
                                        }
                                       else
                                       {
                                            ar=new Archivo();
                                            Archivo img=new Archivo(ord, archivo[x].getName(), calendario.getTime());
                                            ord = (Orden)session.get(Orden.class, Integer.parseInt(orden)); 
                                            ord.addArchivo(img);
                                            session.save(ord);
                                       }
                                       session.getTransaction().commit();
                                    }
                                    catch(Exception e)
                                    {
                                        e.printStackTrace();
                                        session.getTransaction().rollback();
                                        javax.swing.JOptionPane.showMessageDialog(null, "Error no se pudo eliminar el archivo NO° Error:3");
                                    }
                                }
                            }
                            else
                            {
                                respuesta=miFtp.subirArchivo(archivo[x].getPath(), archivo[x].getName());
                                ord = (Orden)session.get(Orden.class, Integer.parseInt(orden)); 
                                //*******obtenemos fecha con hora******
                                Date fecha_orden = new Date();
                                DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");//YYYY-MM-DD HH:MM:SS
                                String valor=dateFormat.format(fecha_orden);
                                String [] fecha = valor.split("-");
                                String [] hora=fecha[2].split(":");
                                String [] aux=hora[0].split(" ");
                                fecha[2]=aux[0];
                                hora[0]=aux[1];
                                Calendar calendario = Calendar.getInstance();
                                calendario.set(
                                    Integer.parseInt(fecha[2]), 
                                    Integer.parseInt(fecha[1])-1, 
                                    Integer.parseInt(fecha[0]), 
                                    Integer.parseInt(hora[0]), 
                                    Integer.parseInt(hora[1]), 
                                    Integer.parseInt(hora[2]));
                                System.out.println(calendario.getTime());
                                Archivo img=new Archivo(ord, archivo[x].getName(), calendario.getTime());
                                //******************************************
                                ord.addArchivo(img);
                                session.saveOrUpdate(ord);
                                session.getTransaction().commit();  
                            }
                        }
                        else
                        {
                            session.getTransaction().rollback();
                            //javax.swing.JOptionPane.showMessageDialog(null, "Error no se pudo cargar el archivo NO° Error:2");
                        }
                        miFtp.cambiarDirectorio("/");
                    }
                }
            }catch (Exception ioe)
            {
                session.getTransaction().rollback();
                destino.deleteOnExit();
                ioe.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(null, "Error no se pudo cargar algun archivo");
            }
            if(session!= null)
                if(session.isOpen())
                    session.close(); 
            cargaArchivos();
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel p_contenedor;
    private javax.swing.JScrollPane panel;
    // End of variables declaration//GEN-END:variables


    public void visualiza(Boolean valor)
    {
        this.jButton2.setEnabled(valor);
    }
    public void cargaArchivos()
    {
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            ord=(Orden)session.get(Orden.class, Integer.parseInt(orden));
            Archivo[] fotos = (Archivo[]) ord.getArchivos().toArray(new Archivo[0]);
            p_contenedor.setSize(250*3, (fotos.length/3)*80);
            p_contenedor.setMaximumSize(p_contenedor.getSize());
            p_contenedor.setPreferredSize(p_contenedor.getSize());

            for(int k=0;k<fotos.length-1;k++) 
            {
                for(int f=0;f<(fotos.length-1)-k;f++) 
                {
                    if (fotos[f].getFechaDocumento().after(fotos[f+1].getFechaDocumento())==true) 
                    {
                        Archivo aux;
                        aux=fotos[f];
                        fotos[f]=fotos[f+1];
                        fotos[f+1]=aux;
                    }
                }
            }

            if(fotos.length>0)
            {
                p_contenedor.removeAll();
                DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
                for(int i=0; i<fotos.length; i++)
                {
                    Elemento obj=new Elemento(fotos[i], ""+ord.getIdOrden(), edo, rutaFTP);
                    p_contenedor.add(obj);
                }
                //p_contenedor.updateUI();
                p_contenedor.repaint();
            }
        }catch(Exception e)
        {
            System.out.println(e);
        }
        if(session!=null)
            if(session.isOpen())
                session.close();
    }
}
