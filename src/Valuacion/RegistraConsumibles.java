/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Valuacion;

import Ejemplar.buscaEjemplar;
import Hibernate.Util.HibernateUtil;
import Hibernate.entidades.Configuracion;
import Hibernate.entidades.Consumible;
import Hibernate.entidades.Ejemplar;
import Hibernate.entidades.Orden;
import Hibernate.entidades.Usuario;
import Integral.DefaultTableHeaderCellRenderer;
import Integral.FormatoEditor;
import Integral.FormatoTabla;
import Integral.PDF;
import Integral.VerticalTableHeaderCellRenderer;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.GrayColor;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPTable;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 *
 * @author Sistemas
 */

public class RegistraConsumibles extends javax.swing.JDialog {

    FormatoTabla formato;
    private Usuario user;
    String orden;
    String sessionPrograma="";
    String[] columnas = new String [] {
        "#","DESCRIPCIÓN","NO PARTE","CANT","MED","PRECIO","HOJ","MEC","SUS",
        "ELE","PIN", "TIPO"};
    MyModel model;
    Class[] types;
    
    /**
     * Creates new form RegistraConsumibles
     */
    public RegistraConsumibles(java.awt.Frame parent, boolean modal, String ord, Usuario us, String ses) {
        super(parent, modal);
        initComponents();
        sessionPrograma=ses;
        orden=ord;
        user=us;
        t_datos.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        model=new MyModel(0, columnas);
        t_datos.setModel(model);
        formato = new FormatoTabla();
        tabla_tamaños();
        buscaCuentas(-1,-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        medida = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        t_datos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        cb_tipo_partida = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        t_hojalateria = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        t_mecanica = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        t_suspension = new javax.swing.JFormattedTextField();
        jLabel14 = new javax.swing.JLabel();
        t_electrico = new javax.swing.JFormattedTextField();
        jLabel15 = new javax.swing.JLabel();
        t_pintura = new javax.swing.JFormattedTextField();
        t_total = new javax.swing.JFormattedTextField();
        jLabel16 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        medida.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        medida.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PZAS", "LTS", "MTS", "CMS", "MMS", "GRS", "MLS", "KGS", "HRS", "MIN", "KIT", "FT", "LB", "JGO", "NA" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(2, 135, 242));

        jPanel2.setBackground(new java.awt.Color(2, 135, 242));
        jPanel2.setForeground(new java.awt.Color(2, 135, 242));

        t_datos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "DESCRIPCION", "NO PARTE", "CANT", "MED", "PRECIO", "HOJ", "MEC", "SUS", "ELE", "PIN", "TIPO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(t_datos);

        jButton1.setIcon(new ImageIcon("imagenes/boton_mas_n.png"));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new ImageIcon("imagenes/boton_menos.png"));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        cb_tipo_partida.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        cb_tipo_partida.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ordinaria", "Complementaria", "Adicional" }));
        cb_tipo_partida.setBorder(null);

        jPanel1.setBackground(new java.awt.Color(2, 135, 242));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("HOJALATERÍA:");

        t_hojalateria.setEditable(false);
        t_hojalateria.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_hojalateria.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_hojalateria.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_hojalateria.setText("0.00");
        t_hojalateria.setDisabledTextColor(new java.awt.Color(2, 38, 253));
        t_hojalateria.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        t_hojalateria.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_hojalateriaFocusLost(evt);
            }
        });

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("MECÁNICA:");

        t_mecanica.setEditable(false);
        t_mecanica.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_mecanica.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_mecanica.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_mecanica.setText("0.00");
        t_mecanica.setDisabledTextColor(new java.awt.Color(2, 38, 253));
        t_mecanica.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        t_mecanica.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_mecanicaFocusLost(evt);
            }
        });

        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("SUSPENSIÓN:");

        t_suspension.setEditable(false);
        t_suspension.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_suspension.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_suspension.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_suspension.setText("0.00");
        t_suspension.setDisabledTextColor(new java.awt.Color(2, 38, 253));
        t_suspension.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        t_suspension.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_suspensionFocusLost(evt);
            }
        });

        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("ELÉCTRICO:");

        t_electrico.setEditable(false);
        t_electrico.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_electrico.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_electrico.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_electrico.setText("0.00");
        t_electrico.setDisabledTextColor(new java.awt.Color(2, 38, 253));
        t_electrico.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        t_electrico.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_electricoFocusLost(evt);
            }
        });

        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("PINTURA:");

        t_pintura.setEditable(false);
        t_pintura.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_pintura.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_pintura.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_pintura.setText("0.00");
        t_pintura.setDisabledTextColor(new java.awt.Color(2, 38, 253));
        t_pintura.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        t_pintura.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_pinturaFocusLost(evt);
            }
        });

        t_total.setEditable(false);
        t_total.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_total.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_total.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_total.setText("0.00");
        t_total.setDisabledTextColor(new java.awt.Color(2, 38, 253));
        t_total.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        t_total.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_totalFocusLost(evt);
            }
        });

        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("TOTAL:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(t_hojalateria)
                    .addComponent(t_mecanica, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_suspension, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_pintura, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(t_electrico, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_total, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(t_hojalateria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel12)
                    .addComponent(t_suspension, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(t_pintura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel16)
                        .addComponent(t_total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(t_mecanica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10)
                        .addComponent(jLabel14)
                        .addComponent(t_electrico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton3.setText("PDF");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cb_tipo_partida, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cb_tipo_partida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        buscaEjemplar obj = new buscaEjemplar(new javax.swing.JFrame(), true, sessionPrograma, user, 1);
        obj.t_busca.requestFocus();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
        obj.setVisible(true);
        Ejemplar eje=obj.getReturnStatus();
        if (eje!=null)
        {
            Session session = HibernateUtil.getSessionFactory().openSession();
            try
            {
                Orden or=(Orden)session.get(Orden.class, Integer.parseInt(orden));      
                session.beginTransaction().begin();
                eje=(Ejemplar)session.get(Ejemplar.class, eje.getIdParte());
                Consumible nuevo=new Consumible();
                nuevo.setEjemplar(eje);
                nuevo.setMedida(eje.getMedida());
                nuevo.setCantidad(1);
                nuevo.setPrecio(eje.getPrecio());
                nuevo.setOrden(or);
                nuevo.setEspHoj(false);
                nuevo.setEspMec(false);
                nuevo.setEspSus(false);
                nuevo.setEspEle(false);
                nuevo.setEspPin(false);
                if(cb_tipo_partida.getSelectedIndex()==0)
                    nuevo.setTipo("O");
                else if(cb_tipo_partida.getSelectedIndex()==1)
                    nuevo.setTipo("C");
                else
                    nuevo.setTipo("A");

                session.saveOrUpdate(nuevo);
                session.beginTransaction().commit();
                
            }catch(Exception e){e.printStackTrace();}
            if(session!=null)
                if(session.isOpen())
                {
                    session.flush();
                    session.clear();
                    session.close();
                }
            buscaCuentas(-1, -1);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void t_hojalateriaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_hojalateriaFocusLost
        // TODO add your handling code here:
        if(t_hojalateria.getText().compareTo("")==0)
        {
            t_hojalateria.setText("0");
            t_hojalateria.setValue(0.00);
        }
    }//GEN-LAST:event_t_hojalateriaFocusLost

    private void t_mecanicaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_mecanicaFocusLost
        // TODO add your handling code here:
        if(t_mecanica.getText().compareTo("")==0)
        {
            t_mecanica.setText("0");
            t_mecanica.setValue(0.00);
        }
    }//GEN-LAST:event_t_mecanicaFocusLost

    private void t_suspensionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_suspensionFocusLost
        // TODO add your handling code here:
        if(t_suspension.getText().compareTo("")==0)
        {
            t_suspension.setText("0");
            t_suspension.setValue(0.00);
        }
    }//GEN-LAST:event_t_suspensionFocusLost

    private void t_electricoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_electricoFocusLost
        // TODO add your handling code here:
        if(t_electrico.getText().compareTo("")==0)
        {
            t_electrico.setText("0");
            t_electrico.setValue(0.00);
        }
    }//GEN-LAST:event_t_electricoFocusLost

    private void t_pinturaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_pinturaFocusLost
        // TODO add your handling code here:
        if(t_pintura.getText().compareTo("")==0)
        {
            t_pintura.setText("0");
            t_pintura.setValue(0.00);
        }
    }//GEN-LAST:event_t_pinturaFocusLost

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            user = (Usuario)session.get(Usuario.class, user.getIdUsuario());
            if(t_datos.getSelectedRow()>-1)
            {
                int opt=JOptionPane.showConfirmDialog(this, "¡Confirma que deseas eliminar las partidas seleccionadas");
                if(opt==0)
                {
                    int [] renglones=t_datos.getSelectedRows();
                    for(int x=0; x<renglones.length;x++)
                    {
                        session.beginTransaction().begin();
                            Consumible part=(Consumible) session.get(Consumible.class, Integer.parseInt(t_datos.getValueAt(renglones[x], 0).toString()));
                            Orden ord=(Orden)session.get(Orden.class, Integer.parseInt(orden));
                            
                            String esp="";
                            if(t_datos.getValueAt(renglones[x], 6).toString().compareTo("true")==0)
                                esp=" and almacen.especialidad='H'";
                            if(t_datos.getValueAt(renglones[x], 7).toString().compareTo("true")==0)
                                esp=" and almacen.especialidad='M'";
                            if(t_datos.getValueAt(renglones[x], 8).toString().compareTo("true")==0)
                                esp=" and almacen.especialidad='S'";
                            if(t_datos.getValueAt(renglones[x], 9).toString().compareTo("true")==0)
                                esp=" and almacen.especialidad='E'";
                            if(t_datos.getValueAt(renglones[x], 10).toString().compareTo("true")==0)
                                esp=" and almacen.especialidad='P'";
                            if(esp.compareTo("")==0)
                            {
                                ord.eliminaConsumible(part);
                                session.update(ord);
                                session.delete(part);
                                session.getTransaction().commit();
                            }
                            else
                            {
                                Query query = session.createSQLQuery("select " +
    "( (select if(sum(movimiento.cantidad) is null, 0, sum(movimiento.cantidad)) from ejemplar left join movimiento on ejemplar.id_Parte=movimiento.id_Parte " +
    "left join almacen on movimiento.id_almacen=almacen.id_almacen where ejemplar.id_Parte='"+t_datos.getValueAt(renglones[x], 2).toString()+"' and almacen.id_orden="+orden+" and almacen.tipo_movimiento=2 and almacen.operacion=8 "+esp+" ) - " +
    "(select if(sum(movimiento.cantidad) is null, 0, sum(movimiento.cantidad)) from ejemplar left join movimiento on ejemplar.id_Parte=movimiento.id_Parte " +
    "left join almacen on movimiento.id_almacen=almacen.id_almacen where ejemplar.id_Parte='"+t_datos.getValueAt(renglones[x], 2).toString()+"' and almacen.id_orden="+orden+" and almacen.tipo_movimiento=1 and almacen.operacion=8 "+esp+" ) )as operario ");  
                                query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
                                ArrayList partidas=(ArrayList)query.list();
                                java.util.HashMap map=(java.util.HashMap)partidas.get(0);
                                if(Double.parseDouble(map.get("operario").toString()) == 0.0d)
                                {
                                    ord.eliminaConsumible(part);
                                    session.update(ord);
                                    session.delete(part);
                                    session.getTransaction().commit();
                                }
                                else
                                {
                                    session.getTransaction().rollback();
                                    JOptionPane.showMessageDialog(null, "La partida ya fue Entregada al operario");    
                                }
                            }
                    }
                    buscaCuentas(-1,-1);
                }
            }
            else
            {
                javax.swing.JOptionPane.showMessageDialog(null, "Debes seleccionar una partida de la tabla para porde eliminarla");
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
            session.getTransaction().rollback();
            JOptionPane.showMessageDialog(null, "¡No se pudo eliminar la partida seleccionada!");
        }
        if(session!=null)
            if(session.isOpen())
            {
                session.flush();
                session.clear();
                session.close();
            }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            Orden ord=(Orden)session.get(Orden.class, Integer.parseInt(orden));
            DecimalFormat formatoPorcentaje = new DecimalFormat("#,##0.00");
            DecimalFormat formatoDecimal = new DecimalFormat("####0.0");
            formatoPorcentaje.setMinimumFractionDigits(2);
            session.beginTransaction().begin();
            BaseFont bf = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.WINANSI, BaseFont.NOT_EMBEDDED);
            //Orden ord=buscaApertura();
            PDF reporte = new PDF();
            Date fecha = new Date();
            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyyHH-mm-ss");//YYYY-MM-DD HH:MM:SS
            String valor=dateFormat.format(fecha);
            File folder = new File("reportes/"+ord.getIdOrden());
            folder.mkdirs();
            reporte.Abrir2(PageSize.LETTER, "Valuación", "reportes/"+ord.getIdOrden()+"/"+valor+"-valuacion.pdf");
            Font font = new Font(Font.FontFamily.HELVETICA, 7, Font.NORMAL);
            BaseColor contenido=BaseColor.WHITE;
            int centro=Element.ALIGN_CENTER;
            int izquierda=Element.ALIGN_LEFT;
            int derecha=Element.ALIGN_RIGHT;
            float tam[]=new float[]{40,140,25,25,40, 15,15,15,15,15,25};
            PdfPTable tabla=reporte.crearTabla(11, tam, 100, Element.ALIGN_LEFT);
            
            cabecera(reporte, bf, tabla);
            int ren=0;
            double dm=0d, cam=0d, min=0d, med=0d, max=0d, pin=0d, tot=0d;
            for(int i=0; i<t_datos.getRowCount(); i++)
            {
                tabla.addCell(reporte.celda(""+t_datos.getValueAt(i, 2).toString(), font, contenido, izquierda, 0,1,Rectangle.RECTANGLE));
                tabla.addCell(reporte.celda(""+t_datos.getValueAt(i, 1).toString(), font, contenido, izquierda, 0,1,Rectangle.RECTANGLE));
                tabla.addCell(reporte.celda(""+t_datos.getValueAt(i, 3).toString(), font, contenido, izquierda, 0,1,Rectangle.RECTANGLE));
                tabla.addCell(reporte.celda(""+t_datos.getValueAt(i, 4).toString(), font, contenido, izquierda, 0,1,Rectangle.RECTANGLE));
                tabla.addCell(reporte.celda(""+t_datos.getValueAt(i, 5).toString(), font, contenido, izquierda, 0,1,Rectangle.RECTANGLE));
                if(t_datos.getValueAt(i, 6).toString().compareTo("true")==0){
                    tabla.addCell(reporte.celda("X", font, contenido, izquierda, 0,1,Rectangle.RECTANGLE));  
                }else{
                    tabla.addCell(reporte.celda("", font, contenido, izquierda, 0,1,Rectangle.RECTANGLE));  
                }
                if(t_datos.getValueAt(i, 7).toString().compareTo("true")==0){
                    tabla.addCell(reporte.celda("X", font, contenido, izquierda, 0,1,Rectangle.RECTANGLE));  
                }else{
                    tabla.addCell(reporte.celda("", font, contenido, izquierda, 0,1,Rectangle.RECTANGLE));  
                }
                if(t_datos.getValueAt(i, 8).toString().compareTo("true")==0){
                    tabla.addCell(reporte.celda("X", font, contenido, izquierda, 0,1,Rectangle.RECTANGLE));  
                }else{
                    tabla.addCell(reporte.celda("", font, contenido, izquierda, 0,1,Rectangle.RECTANGLE));  
                }
                if(t_datos.getValueAt(i, 9).toString().compareTo("true")==0){
                    tabla.addCell(reporte.celda("X", font, contenido, izquierda, 0,1,Rectangle.RECTANGLE));  
                }else{
                    tabla.addCell(reporte.celda("", font, contenido, izquierda, 0,1,Rectangle.RECTANGLE));  
                }
                if(t_datos.getValueAt(i, 10).toString().compareTo("true")==0){
                    tabla.addCell(reporte.celda("X", font, contenido, izquierda, 0,1,Rectangle.RECTANGLE));  
                }else{
                    tabla.addCell(reporte.celda("", font, contenido, izquierda, 0,1,Rectangle.RECTANGLE));  
                }
                tabla.addCell(reporte.celda(t_datos.getValueAt(i, 11).toString(), font, contenido, izquierda, 0,1,Rectangle.RECTANGLE));
                
            }
            
            reporte.agregaObjeto(tabla);
            reporte.cerrar();
            reporte.visualizar2("reportes/"+ord.getIdOrden()+"/"+valor+"-valuacion.pdf");
        }catch(Exception e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "No se pudo realizar el reporte si el archivo esta abierto.");
        }
        if(session!=null)
            if(session.isOpen())
            {
                session.flush();
                session.clear();
                session.close();
            }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void t_totalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_totalFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_t_totalFocusLost

    public void cabecera(PDF reporte, BaseFont bf, PdfPTable tabla)
   {
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            reporte.contenido.setLineWidth(0.5f);
            reporte.contenido.setColorStroke(new GrayColor(0.2f));
            reporte.contenido.setColorFill(new GrayColor(0.9f));
            reporte.contenido.roundRectangle(30, 700, 210, 45, 5);
            reporte.contenido.roundRectangle(250, 700, 325, 45, 5);
            //reporte.contenido.roundRectangle(550, 700, 210, 45, 5);

            Configuracion con=(Configuracion)session.get(Configuracion.class, 1);
            Orden ord = (Orden)session.get(Orden.class, Integer.parseInt(orden)); 
            reporte.inicioTexto();
            reporte.contenido.setFontAndSize(bf, 14);
            reporte.contenido.setColorFill(BaseColor.BLACK);
            reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, con.getEmpresa(), 30, 760, 0);
            reporte.contenido.setFontAndSize(bf, 8);
            reporte.contenido.setColorFill(BaseColor.BLACK);
            reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, "Listado de Consumibles", 30, 750, 0);
            
            //reporte.contenido.showTextAligned(PdfContentByte.ALIGN_CENTER, "Consulta de Ordenes Filtrado por '"+this.c_filtro.getSelectedItem().toString()+"' ("+this.t_busca.getText()+")", 505, 537, 0);
                
               
                //************************datos de la orden****************************
                reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, "Orden:"+ord.getIdOrden(), 34, 735, 0);
                
                if(ord.getFecha()!=null)
                    reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, "Apertura:"+ord.getFecha(), 155, 735, 0);
                else
                    reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, "Apertura:", 155, 735, 0);

                String clien=ord.getClientes().getNombre();
                if(clien.length()>30)
                    clien=ord.getClientes().getNombre().substring(0, 30);
                reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, "Cliente:"+clien, 34, 725, 0);
                
                if(ord.getSiniestro()!=null)
                    reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, "Siniestro:"+ord.getSiniestro(), 34, 715, 0);
                else
                    reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, "Siniestro:", 34, 715, 0);
                
                if(ord.getFechaSiniestro()!=null)
                    reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, "F. Siniestro:"+ord.getFechaSiniestro(), 155, 715, 0);
                else
                    reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, "F.Siniestro:", 155, 715, 0);
                
                if(ord.getPoliza()!=null)
                    reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, "Poliza:"+ord.getPoliza(), 34, 705, 0);
                else
                    reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, "Poliza:", 34, 705, 0);
                
                if(ord.getInciso()!=null)
                    reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, "Inciso:"+ord.getInciso(), 155, 705, 0);
                else
                    reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, "Inciso:", 155, 705, 0);
                //**********************************************************
                
                //************datos de la unidad
                reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, "Unidad:"+ord.getTipo().getTipoNombre(), 255, 735, 0);
                reporte.contenido.showTextAligned(PdfContentByte.ALIGN_RIGHT, "Modelo:"+ord.getModelo(), 534, 735, 0);
                
                reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, "Marca:"+ord.getMarca().getMarcaNombre(), 255, 725, 0);
                if(ord.getNoEconomico()!=null)
                    reporte.contenido.showTextAligned(PdfContentByte.ALIGN_RIGHT, "Economico:"+ord.getNoEconomico(), 534, 725, 0);
                else
                    reporte.contenido.showTextAligned(PdfContentByte.ALIGN_RIGHT, "Economico:", 534, 725, 0);
                
                if(ord.getNoMotor()!=null)
                    reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, "N° Motor:"+ord.getNoMotor(), 255, 715, 0);
                else
                    reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, "N° Motor:", 255, 715, 0);
                
                if(ord.getNoSerie()!=null)
                    reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, "N° Serie:"+ord.getNoSerie(), 255, 705, 0);
                else
                    reporte.contenido.showTextAligned(PdfContentByte.ALIGN_LEFT, "N° Serie:", 255, 705, 0);
                reporte.contenido.showTextAligned(PdfContentByte.ALIGN_RIGHT, "Fecha:"+new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date()), 564, 705, 0);
                //*************************************************************
                
                try
                {
                    reporte.agregaObjeto(reporte.crearImagen(ord.getCompania().getFoto(), 455, -10, 13));
                }catch(Exception e){}
                
            reporte.finTexto();
            //agregamos renglones vacios para dejar un espacio
            reporte.agregaObjeto(new Paragraph(" "));
            reporte.agregaObjeto(new Paragraph(" "));
            reporte.agregaObjeto(new Paragraph(" "));
            reporte.agregaObjeto(new Paragraph(" "));
            //reporte.agregaObjeto(new Paragraph(" "));
            
            Font font = new Font(Font.FontFamily.HELVETICA, 6, Font.BOLD);
            
            BaseColor cabecera=BaseColor.GRAY;
            BaseColor contenido=BaseColor.WHITE;
            int centro=Element.ALIGN_CENTER;
            int izquierda=Element.ALIGN_LEFT;
            int derecha=Element.ALIGN_RIGHT;
        
            tabla.addCell(reporte.celda("#Parte", font, cabecera, centro, 0, 2, Rectangle.RECTANGLE));
            tabla.addCell(reporte.celda("Descripción", font, cabecera, centro, 0, 2,Rectangle.RECTANGLE));
            tabla.addCell(reporte.celda("Cantidad", font, cabecera, centro, 0,2, Rectangle.RECTANGLE));
            tabla.addCell(reporte.celda("Medida", font, cabecera, centro, 0, 2,Rectangle.RECTANGLE));
            tabla.addCell(reporte.celda("Precio", font, cabecera, centro, 0, 2, Rectangle.RECTANGLE));
            tabla.addCell(reporte.celda("Especialidad", font, cabecera, centro, 5,1,Rectangle.RECTANGLE));
            tabla.addCell(reporte.celda("Tipo", font, cabecera, centro, 0,2, Rectangle.RECTANGLE));
            tabla.addCell(reporte.celda("Hoj", font, cabecera, centro, 0,1, Rectangle.RECTANGLE));
            tabla.addCell(reporte.celda("Mec", font, cabecera, centro, 0,1, Rectangle.RECTANGLE));
            tabla.addCell(reporte.celda("Sus", font, cabecera, centro, 0,1,Rectangle.RECTANGLE));
            tabla.addCell(reporte.celda("Ele", font, cabecera, centro, 0,1,Rectangle.RECTANGLE));            
            tabla.addCell(reporte.celda("Pin", font, cabecera, centro, 0,1, Rectangle.RECTANGLE));
            
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        if(session!=null)
            if(session.isOpen())
            {
                session.flush();
                session.clear();
                session.close();
            }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cb_tipo_partida;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox medida;
    private javax.swing.JTable t_datos;
    private javax.swing.JFormattedTextField t_electrico;
    private javax.swing.JFormattedTextField t_hojalateria;
    private javax.swing.JFormattedTextField t_mecanica;
    private javax.swing.JFormattedTextField t_pintura;
    private javax.swing.JFormattedTextField t_suspension;
    private javax.swing.JFormattedTextField t_total;
    // End of variables declaration//GEN-END:variables

    
    public void tabla_tamaños()
   {
        TableColumnModel col_model = t_datos.getColumnModel();
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.RIGHT);
        FormatoEditor fe=new FormatoEditor();
        t_datos.setDefaultEditor(Double.class, fe);
        for (int i=0; i<t_datos.getColumnCount(); i++)
        {
  	      TableColumn column = col_model.getColumn(i);
              switch(i)
              {
                  case 0:
                      column.setPreferredWidth(30);
                      break;
                  case 1:
                      column.setPreferredWidth(400);
                      break;
                  case 2:
                      column.setPreferredWidth(90);
                      break;
                  case 3:
                      column.setPreferredWidth(40);
                      break;
                  case 4:
                      column.setPreferredWidth(40);
                      break;
                  case 5:
                      column.setPreferredWidth(70);
                      break;
                  default:
                      column.setPreferredWidth(10);
                      break;
              }
        }
        JTableHeader header = t_datos.getTableHeader();
        header.setBackground(new java.awt.Color(2, 135, 242));//102,102,102
        header.setForeground(Color.white);
   }  

    public void formatoTabla()
    {
        TableCellRenderer textVertical = new VerticalTableHeaderCellRenderer();
        TableCellRenderer textNormal = new DefaultTableHeaderCellRenderer();
        Enumeration columns = t_datos.getColumnModel().getColumns();
        
        for(int x=0; x<t_datos.getColumnModel().getColumnCount(); x++)
        {
            if(x>5 && x<12)
                t_datos.getColumnModel().getColumn(x).setHeaderRenderer(textVertical);
            else
                t_datos.getColumnModel().getColumn(x).setHeaderRenderer(textNormal);
        } 
        tabla_tamaños();
        //t_datos.setShowVerticalLines(true);
        t_datos.setShowHorizontalLines(true);
        t_datos.setDefaultRenderer(String.class, formato); 
        t_datos.setDefaultRenderer(Boolean.class, formato); 
        t_datos.setDefaultRenderer(Double.class, formato); 
    }
    
    public class MyModel extends DefaultTableModel
    {
        Class[] types = new Class [] {
                    java.lang.String.class, 
                    java.lang.String.class, 
                    java.lang.String.class, 
                    java.lang.Double.class,
                    java.lang.String.class, 
                    java.lang.Double.class,
                    java.lang.Boolean.class,
                    java.lang.Boolean.class,
                    java.lang.Boolean.class,
                    java.lang.Boolean.class,
                    java.lang.Boolean.class,
                    java.lang.String.class,
                };
        int ren=0;
        int col=0;
        private boolean[][] celdaEditable;
        double imp=0.0;

        public MyModel(int renglones, String columnas[])
        {
            ren=renglones;
            col=columnas.length;
            celdaEditable=new boolean[types.length][renglones];
            for(int x=0; x<types.length; x++)
            {
                for(int y=0; y<renglones; y++)
                    celdaEditable[x][y]=true;
            }
            this.setDataVector(new Object [renglones][columnas.length], columnas);
        }

        @Override
        public int getRowCount() {
            return ren;
        }

        @Override
        public int getColumnCount() {
            return col;
        }
        
        @Override
        public void setValueAt(Object value, int row, int col)
        {
            Vector vector = (Vector) this.dataVector.elementAt(row);
            Object celda = ((Vector)this.dataVector.elementAt(row)).elementAt(col);
            switch(col)
            {
                case 3:
                        if(vector.get(col)==null)
                        {
                            vector.setElementAt(value, col);
                            this.dataVector.setElementAt(vector, row);
                            fireTableCellUpdated(row, col);
                        }
                        else
                        {
                            Session session = HibernateUtil.getSessionFactory().openSession();
                            try
                            {
                                session.beginTransaction().begin();
                                user = (Usuario)session.get(Usuario.class, user.getIdUsuario());
                                if(user.getEditaConsumible()==true)
                                {
                                    String esp="";
                                    if(t_datos.getValueAt(t_datos.getSelectedRow(), 6).toString().compareTo("true")==0)
                                        esp=" and almacen.especialidad='H'";
                                    if(t_datos.getValueAt(t_datos.getSelectedRow(), 7).toString().compareTo("true")==0)
                                        esp=" and almacen.especialidad='M'";
                                    if(t_datos.getValueAt(t_datos.getSelectedRow(), 8).toString().compareTo("true")==0)
                                        esp=" and almacen.especialidad='S'";
                                    if(t_datos.getValueAt(t_datos.getSelectedRow(), 9).toString().compareTo("true")==0)
                                        esp=" and almacen.especialidad='E'";
                                    if(t_datos.getValueAt(t_datos.getSelectedRow(), 10).toString().compareTo("true")==0)
                                        esp=" and almacen.especialidad='P'";

                                    Consumible consumo = (Consumible)session.get(Consumible.class, Integer.parseInt(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString()));
                                    if(esp.compareTo("")==0)
                                    {
                                        if(Double.parseDouble(value.toString())>0.0){
                                                consumo.setCantidad(Double.parseDouble(value.toString()));
                                                session.saveOrUpdate(consumo);
                                                session.beginTransaction().commit();
                                                vector.setElementAt(value, col);
                                                this.dataVector.setElementAt(vector, row);
                                                fireTableCellUpdated(row, col);
                                            }else{
                                                JOptionPane.showMessageDialog(null, "La cantidad debe ser mayor a 0.0"); 
                                            }
                                    }
                                    else
                                    {
                                        Query query = session.createSQLQuery("select " +
             "( (select if(sum(movimiento.cantidad) is null, 0, sum(movimiento.cantidad)) from ejemplar left join movimiento on ejemplar.id_Parte=movimiento.id_Parte " +
             "left join almacen on movimiento.id_almacen=almacen.id_almacen where ejemplar.id_Parte='"+t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString()+"' and almacen.id_orden="+orden+" and almacen.tipo_movimiento=2 and almacen.operacion=8 "+esp+") - " +
             "(select if(sum(movimiento.cantidad) is null, 0, sum(movimiento.cantidad)) from ejemplar left join movimiento on ejemplar.id_Parte=movimiento.id_Parte " +
             "left join almacen on movimiento.id_almacen=almacen.id_almacen where ejemplar.id_Parte='"+t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString()+"' and almacen.id_orden="+orden+" and almacen.tipo_movimiento=1 and almacen.operacion=8 "+esp+") )as operario ");  
                                        System.out.println("select " +
             "( (select if(sum(movimiento.cantidad) is null, 0, sum(movimiento.cantidad)) from ejemplar left join movimiento on ejemplar.id_Parte=movimiento.id_Parte " +
             "left join almacen on movimiento.id_almacen=almacen.id_almacen where ejemplar.id_Parte='"+t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString()+"' and almacen.id_orden="+orden+" and almacen.tipo_movimiento=2 and almacen.operacion=8 "+esp+") - " +
             "(select if(sum(movimiento.cantidad) is null, 0, sum(movimiento.cantidad)) from ejemplar left join movimiento on ejemplar.id_Parte=movimiento.id_Parte " +
             "left join almacen on movimiento.id_almacen=almacen.id_almacen where ejemplar.id_Parte='"+t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString()+"' and almacen.id_orden="+orden+" and almacen.tipo_movimiento=1 and almacen.operacion=8 "+esp+") )as operario "); 
                                        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
                                         ArrayList partidas=(ArrayList)query.list();
                                         java.util.HashMap map=(java.util.HashMap)partidas.get(0);
                                         //if(Double.parseDouble(map.get("operario").toString()) == 0.0d )
                                         //{
                                             if(Double.parseDouble(map.get("operario").toString())<=Double.parseDouble(value.toString()))
                                             {
                                                 if(Double.parseDouble(value.toString())>0.0)
                                                 {
                                                    consumo.setCantidad(Double.parseDouble(value.toString()));
                                                    session.saveOrUpdate(consumo);
                                                    session.beginTransaction().commit();
                                                    vector.setElementAt(value, col);
                                                    this.dataVector.setElementAt(vector, row);
                                                    fireTableCellUpdated(row, col);
                                                 }
                                                 else
                                                     JOptionPane.showMessageDialog(null, "La cantidad debe ser mayor a 0.0"); 
                                            }else//{
                                                JOptionPane.showMessageDialog(null, "La cantidad no puede ser menor a lo entregado previamente al operario"); 
                                            //}
                                         /*}
                                         else
                                         {
                                             session.getTransaction().rollback();
                                             JOptionPane.showMessageDialog(null, "La partida ya fue Entregada al operario");    
                                         }*/
                                    }
                                }
                                else
                                {
                                    JOptionPane.showMessageDialog(null, "Acceso denegado"); 
                                }
                            }
                            catch(Exception e)
                            {
                                session.getTransaction().rollback();
                                e.printStackTrace();
                                JOptionPane.showMessageDialog(null, "Error al actualizar los datos"); 
                            }
                            if(session!=null)
                                if(session.isOpen()==true)
                                {
                                    session.flush();
                                    session.clear();
                                    session.close();
                                }
                            sumaTotales();
                        }
                        break;
                    case 6:
                        if(vector.get(col)==null)
                        {
                            vector.setElementAt(value, col);
                            this.dataVector.setElementAt(vector, row);
                            fireTableCellUpdated(row, col);
                        }else{
                            Session session = HibernateUtil.getSessionFactory().openSession();
                            try
                            {
                                session.beginTransaction().begin();
                                user = (Usuario)session.get(Usuario.class, user.getIdUsuario());
                                if(user.getEditaConsumible()==true)
                                {
                                    if(existe(t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString(),6)==false)
                                    {
                                        int renglon=t_datos.getSelectedRow();
                                        String op="";
                                        if(t_datos.getValueAt(renglon, 6).toString().compareTo("true")==0)
                                            op="H";
                                        if(t_datos.getValueAt(renglon, 7).toString().compareTo("true")==0)
                                            op="M";
                                        if(t_datos.getValueAt(renglon, 8).toString().compareTo("true")==0)
                                            op="S";
                                        if(t_datos.getValueAt(renglon, 9).toString().compareTo("true")==0)
                                            op="E";
                                        if(t_datos.getValueAt(renglon, 10).toString().compareTo("true")==0)
                                            op="P";
                                        if(op.compareTo("")!=0)
                                        {
                                            Consumible consumo = (Consumible)session.get(Consumible.class, Integer.parseInt(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString()));
                                            Query query = session.createSQLQuery("select " +
                "( (select if(sum(movimiento.cantidad) is null, 0, sum(movimiento.cantidad)) from ejemplar left join movimiento on ejemplar.id_Parte=movimiento.id_Parte " +
                "left join almacen on movimiento.id_almacen=almacen.id_almacen where ejemplar.id_Parte='"+t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString()+"' and almacen.id_orden="+orden+" and almacen.tipo_movimiento=2 and almacen.operacion=8 and almacen.especialidad='"+op+"') - " +
                "(select if(sum(movimiento.cantidad) is null, 0, sum(movimiento.cantidad)) from ejemplar left join movimiento on ejemplar.id_Parte=movimiento.id_Parte " +
                "left join almacen on movimiento.id_almacen=almacen.id_almacen where ejemplar.id_Parte='"+t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString()+"' and almacen.id_orden="+orden+" and almacen.tipo_movimiento=1 and almacen.operacion=8 and almacen.especialidad='"+op+"') )as operario ");  
                                            query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
                                            ArrayList partidas=(ArrayList)query.list();
                                            java.util.HashMap map=(java.util.HashMap)partidas.get(0);
                                            if(Double.parseDouble(map.get("operario").toString()) == 0.0d)
                                            {
                                                if(value.toString().compareTo("true")==0){
                                                    consumo.setEspHoj(true);
                                                    consumo.setEspMec(false);
                                                    consumo.setEspPin(false);
                                                    consumo.setEspSus(false);
                                                    consumo.setEspEle(false);
                                                }else{
                                                    consumo.setEspHoj(false);
                                                }

                                                session.update(consumo);
                                                session.getTransaction().commit();
                                                vector.setElementAt(value, col);
                                                this.dataVector.setElementAt(vector, row);
                                                fireTableCellUpdated(row, col);
                                                buscaCuentas(-1, -1);
                                            }
                                            else
                                            {
                                                session.getTransaction().rollback();
                                                JOptionPane.showMessageDialog(null, "La partida ya fue Entregada al operario");    
                                            }
                                        }
                                        else
                                        {
                                            Consumible consumo = (Consumible)session.get(Consumible.class, Integer.parseInt(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString()));
                                            if(value.toString().compareTo("true")==0){
                                                consumo.setEspHoj(true);
                                                consumo.setEspMec(false);
                                                consumo.setEspPin(false);
                                                consumo.setEspSus(false);
                                                consumo.setEspEle(false);
                                            }else{
                                                consumo.setEspHoj(false);
                                            }

                                            session.update(consumo);
                                            session.getTransaction().commit();
                                            vector.setElementAt(value, col);
                                            this.dataVector.setElementAt(vector, row);
                                            fireTableCellUpdated(row, col);
                                            buscaCuentas(-1, -1);
                                        }
                                    }else
                                    {
                                        session.getTransaction().rollback();
                                        JOptionPane.showMessageDialog(null, "Este consumible ya esta asignado a Hojalateria en otra partida, incrementelo");    
                                    }
                                }else{
                                    JOptionPane.showMessageDialog(null, "Acceso denegado");
                                }
                            }
                            catch(Exception e)
                            {
                                session.getTransaction().rollback();
                                e.printStackTrace();
                                JOptionPane.showMessageDialog(null, "Error al actualizar los datos"); 
                            }
                            if(session!=null)
                                if(session.isOpen()==true)
                                {
                                    session.flush();
                                    session.clear();
                                    session.close();
                                }
                            sumaTotales();
                        }
                        break;
                      case 7:
                        if(vector.get(col)==null)
                        {
                            vector.setElementAt(value, col);
                            this.dataVector.setElementAt(vector, row);
                            fireTableCellUpdated(row, col);
                        }else{
                            Session session = HibernateUtil.getSessionFactory().openSession();
                            try
                            {
                                session.beginTransaction().begin();
                                user = (Usuario)session.get(Usuario.class, user.getIdUsuario());
                                if(user.getEditaConsumible()==true)
                                {
                                    if(existe(t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString(),7)==false)
                                    {
                                        int renglon=t_datos.getSelectedRow();
                                        String op="";
                                        if(t_datos.getValueAt(renglon, 6).toString().compareTo("true")==0)
                                            op="H";
                                        if(t_datos.getValueAt(renglon, 7).toString().compareTo("true")==0)
                                            op="M";
                                        if(t_datos.getValueAt(renglon, 8).toString().compareTo("true")==0)
                                            op="S";
                                        if(t_datos.getValueAt(renglon, 9).toString().compareTo("true")==0)
                                            op="E";
                                        if(t_datos.getValueAt(renglon, 10).toString().compareTo("true")==0)
                                            op="P";
                                        if(op.compareTo("")!=0)
                                        {
                                            Consumible consumo = (Consumible)session.get(Consumible.class, Integer.parseInt(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString()));
                                            Query query = session.createSQLQuery("select " +
                "( (select if(sum(movimiento.cantidad) is null, 0, sum(movimiento.cantidad)) from ejemplar left join movimiento on ejemplar.id_Parte=movimiento.id_Parte " +
                "left join almacen on movimiento.id_almacen=almacen.id_almacen where ejemplar.id_Parte='"+t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString()+"' and almacen.id_orden="+orden+" and almacen.tipo_movimiento=2 and almacen.operacion=8 and almacen.especialidad='"+op+"') - " +
                "(select if(sum(movimiento.cantidad) is null, 0, sum(movimiento.cantidad)) from ejemplar left join movimiento on ejemplar.id_Parte=movimiento.id_Parte " +
                "left join almacen on movimiento.id_almacen=almacen.id_almacen where ejemplar.id_Parte='"+t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString()+"' and almacen.id_orden="+orden+" and almacen.tipo_movimiento=1 and almacen.operacion=8 and almacen.especialidad='"+op+"') )as operario ");  
                                            query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
                                            ArrayList partidas=(ArrayList)query.list();
                                            java.util.HashMap map=(java.util.HashMap)partidas.get(0);
                                            if(Double.parseDouble(map.get("operario").toString()) == 0.0d)
                                            {
                                                if(value.toString().compareTo("true")==0){
                                                    consumo.setEspHoj(false);
                                                    consumo.setEspMec(true);
                                                    consumo.setEspPin(false);
                                                    consumo.setEspSus(false);
                                                    consumo.setEspEle(false);
                                                }else{
                                                    consumo.setEspMec(false);
                                                }

                                                session.update(consumo);
                                                session.getTransaction().commit();
                                                vector.setElementAt(value, col);
                                                this.dataVector.setElementAt(vector, row);
                                                fireTableCellUpdated(row, col);
                                                buscaCuentas(-1, -1);
                                            }
                                            else
                                            {
                                                session.getTransaction().rollback();
                                                JOptionPane.showMessageDialog(null, "La partida ya fue Entregada al operario");    
                                            }
                                        }
                                        else
                                        {
                                            Consumible consumo = (Consumible)session.get(Consumible.class, Integer.parseInt(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString()));
                                            if(value.toString().compareTo("true")==0){
                                                    consumo.setEspHoj(false);
                                                    consumo.setEspMec(true);
                                                    consumo.setEspPin(false);
                                                    consumo.setEspSus(false);
                                                    consumo.setEspEle(false);
                                                }else{
                                                    consumo.setEspMec(false);
                                                }

                                                session.update(consumo);
                                                session.getTransaction().commit();
                                                vector.setElementAt(value, col);
                                                this.dataVector.setElementAt(vector, row);
                                                fireTableCellUpdated(row, col);
                                                buscaCuentas(-1, -1);
                                        }
                                    }
                                    else
                                    {
                                        session.getTransaction().rollback();
                                        JOptionPane.showMessageDialog(null, "Este consumible ya esta asignado a Mecanica en otra partida, incrementelo");    
                                    }
                                }else{
                                    JOptionPane.showMessageDialog(null, "Acceso denegado");
                                }
                            }
                            catch(Exception e)
                            {
                                session.getTransaction().rollback();
                                e.printStackTrace();
                                JOptionPane.showMessageDialog(null, "Error al actualizar los datos"); 
                            }
                            if(session!=null)
                                if(session.isOpen()==true)
                                {
                                    session.flush();
                                    session.clear();
                                    session.close();
                                }
                            sumaTotales();
                        }
                        break;
                      case 8:
                        if(vector.get(col)==null)
                        {
                            vector.setElementAt(value, col);
                            this.dataVector.setElementAt(vector, row);
                            fireTableCellUpdated(row, col);
                        }else{
                            Session session = HibernateUtil.getSessionFactory().openSession();
                            try
                            {
                                session.beginTransaction().begin();
                                user = (Usuario)session.get(Usuario.class, user.getIdUsuario());
                                if(user.getEditaConsumible()==true)
                                {
                                    if(existe(t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString(),8)==false)
                                    {
                                        int renglon=t_datos.getSelectedRow();
                                        String op="";
                                        if(t_datos.getValueAt(renglon, 6).toString().compareTo("true")==0)
                                            op="H";
                                        if(t_datos.getValueAt(renglon, 7).toString().compareTo("true")==0)
                                            op="M";
                                        if(t_datos.getValueAt(renglon, 8).toString().compareTo("true")==0)
                                            op="S";
                                        if(t_datos.getValueAt(renglon, 9).toString().compareTo("true")==0)
                                            op="E";
                                        if(t_datos.getValueAt(renglon, 10).toString().compareTo("true")==0)
                                            op="P";
                                        if(op.compareTo("")!=0)
                                        {
                                            Consumible consumo = (Consumible)session.get(Consumible.class, Integer.parseInt(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString()));
                                            Query query = session.createSQLQuery("select " +
                "( (select if(sum(movimiento.cantidad) is null, 0, sum(movimiento.cantidad)) from ejemplar left join movimiento on ejemplar.id_Parte=movimiento.id_Parte " +
                "left join almacen on movimiento.id_almacen=almacen.id_almacen where ejemplar.id_Parte='"+t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString()+"' and almacen.id_orden="+orden+" and almacen.tipo_movimiento=2 and almacen.operacion=8  and almacen.especialidad='"+op+"') - " +
                "(select if(sum(movimiento.cantidad) is null, 0, sum(movimiento.cantidad)) from ejemplar left join movimiento on ejemplar.id_Parte=movimiento.id_Parte " +
                "left join almacen on movimiento.id_almacen=almacen.id_almacen where ejemplar.id_Parte='"+t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString()+"' and almacen.id_orden="+orden+" and almacen.tipo_movimiento=1 and almacen.operacion=8  and almacen.especialidad='"+op+"') )as operario ");  
                                            query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
                                            ArrayList partidas=(ArrayList)query.list();
                                            java.util.HashMap map=(java.util.HashMap)partidas.get(0);
                                            if(Double.parseDouble(map.get("operario").toString()) == 0.0d)
                                            {
                                                if(value.toString().compareTo("true")==0){
                                                    consumo.setEspHoj(false);
                                                    consumo.setEspMec(false);
                                                    consumo.setEspPin(false);
                                                    consumo.setEspSus(true);
                                                    consumo.setEspEle(false);
                                                }else{
                                                    consumo.setEspSus(false);
                                                }

                                                session.update(consumo);
                                                session.getTransaction().commit();
                                                vector.setElementAt(value, col);
                                                this.dataVector.setElementAt(vector, row);
                                                fireTableCellUpdated(row, col);
                                                buscaCuentas(-1, -1);
                                            }
                                            else
                                            {
                                                session.getTransaction().rollback();
                                                JOptionPane.showMessageDialog(null, "La partida ya fue Entregada al operario");    
                                            }
                                        }
                                        else
                                        {
                                            Consumible consumo = (Consumible)session.get(Consumible.class, Integer.parseInt(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString()));
                                            if(value.toString().compareTo("true")==0){
                                                    consumo.setEspHoj(false);
                                                    consumo.setEspMec(false);
                                                    consumo.setEspPin(false);
                                                    consumo.setEspSus(true);
                                                    consumo.setEspEle(false);
                                                }else{
                                                    consumo.setEspSus(false);
                                                }

                                                session.update(consumo);
                                                session.getTransaction().commit();
                                                vector.setElementAt(value, col);
                                                this.dataVector.setElementAt(vector, row);
                                                fireTableCellUpdated(row, col);
                                                buscaCuentas(-1, -1);
                                        }
                                    }
                                    else
                                    {
                                        session.getTransaction().rollback();
                                        JOptionPane.showMessageDialog(null, "Este consumible ya esta asignado a Suspensión en otra partida, incrementelo");    
                                    }
                                }else{
                                    JOptionPane.showMessageDialog(null, "Acceso denegado");
                                }
                            }
                            catch(Exception e)
                            {
                                session.getTransaction().rollback();
                                e.printStackTrace();
                                JOptionPane.showMessageDialog(null, "Error al actualizar los datos"); 
                            }
                            if(session!=null)
                                if(session.isOpen()==true)
                                {
                                    session.flush();
                                    session.clear();
                                    session.close();
                                }
                            sumaTotales();
                        }
                        break;
                      case 9:
                        if(vector.get(col)==null)
                        {
                            vector.setElementAt(value, col);
                            this.dataVector.setElementAt(vector, row);
                            fireTableCellUpdated(row, col);
                        }else{
                            Session session = HibernateUtil.getSessionFactory().openSession();
                            try
                            {
                                session.beginTransaction().begin();
                                user = (Usuario)session.get(Usuario.class, user.getIdUsuario());
                                if(user.getEditaConsumible()==true)
                                {
                                    if(existe(t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString(),9)==false)
                                    {
                                        int renglon=t_datos.getSelectedRow();
                                        String op="";
                                        if(t_datos.getValueAt(renglon, 6).toString().compareTo("true")==0)
                                            op="H";
                                        if(t_datos.getValueAt(renglon, 7).toString().compareTo("true")==0)
                                            op="M";
                                        if(t_datos.getValueAt(renglon, 8).toString().compareTo("true")==0)
                                            op="S";
                                        if(t_datos.getValueAt(renglon, 9).toString().compareTo("true")==0)
                                            op="E";
                                        if(t_datos.getValueAt(renglon, 10).toString().compareTo("true")==0)
                                            op="P";
                                        if(op.compareTo("")!=0)
                                        {

                                            Consumible consumo = (Consumible)session.get(Consumible.class, Integer.parseInt(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString()));
                                            Query query = session.createSQLQuery("select " +
                "( (select if(sum(movimiento.cantidad) is null, 0, sum(movimiento.cantidad)) from ejemplar left join movimiento on ejemplar.id_Parte=movimiento.id_Parte " +
                "left join almacen on movimiento.id_almacen=almacen.id_almacen where ejemplar.id_Parte='"+t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString()+"' and almacen.id_orden="+orden+" and almacen.tipo_movimiento=2 and almacen.operacion=8 and almacen.especialidad='"+op+"') - " +
                "(select if(sum(movimiento.cantidad) is null, 0, sum(movimiento.cantidad)) from ejemplar left join movimiento on ejemplar.id_Parte=movimiento.id_Parte " +
                "left join almacen on movimiento.id_almacen=almacen.id_almacen where ejemplar.id_Parte='"+t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString()+"' and almacen.id_orden="+orden+" and almacen.tipo_movimiento=1 and almacen.operacion=8 and almacen.especialidad='"+op+"') )as operario ");  
                                            query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
                                            ArrayList partidas=(ArrayList)query.list();
                                            java.util.HashMap map=(java.util.HashMap)partidas.get(0);
                                            if(Double.parseDouble(map.get("operario").toString()) == 0.0d)
                                            {
                                                if(value.toString().compareTo("true")==0){
                                                    consumo.setEspHoj(false);
                                                    consumo.setEspMec(false);
                                                    consumo.setEspPin(false);
                                                    consumo.setEspSus(false);
                                                    consumo.setEspEle(true);
                                                }else{
                                                    consumo.setEspEle(false);
                                                }

                                                session.update(consumo);
                                                session.getTransaction().commit();
                                                vector.setElementAt(value, col);
                                                this.dataVector.setElementAt(vector, row);
                                                fireTableCellUpdated(row, col);
                                                buscaCuentas(-1, -1);
                                            }
                                            else
                                            {
                                                session.getTransaction().rollback();
                                                JOptionPane.showMessageDialog(null, "La partida ya fue Entregada al operario");    
                                            }
                                        }
                                        else
                                        {
                                            Consumible consumo = (Consumible)session.get(Consumible.class, Integer.parseInt(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString()));
                                            if(value.toString().compareTo("true")==0){
                                                consumo.setEspHoj(false);
                                                consumo.setEspMec(false);
                                                consumo.setEspPin(false);
                                                consumo.setEspSus(false);
                                                consumo.setEspEle(true);
                                            }else{
                                                consumo.setEspEle(false);
                                            }

                                            session.update(consumo);
                                            session.getTransaction().commit();
                                            vector.setElementAt(value, col);
                                            this.dataVector.setElementAt(vector, row);
                                            fireTableCellUpdated(row, col);
                                            buscaCuentas(-1, -1);
                                        }
                                    }
                                    else
                                    {
                                        session.getTransaction().rollback();
                                        JOptionPane.showMessageDialog(null, "Este consumible ya esta asignado a Suspensión en otra partida, incrementelo");    
                                    }
                                }else{
                                            JOptionPane.showMessageDialog(null, "Acceso denegado");
                                        }
                            }
                            catch(Exception e)
                            {
                                session.getTransaction().rollback();
                                e.printStackTrace();
                                JOptionPane.showMessageDialog(null, "Error al actualizar los datos"); 
                            }
                            if(session!=null)
                                if(session.isOpen()==true)
                                {
                                    session.flush();
                                    session.clear();
                                    session.close();
                                }
                            sumaTotales();
                        }
                        break;
                     case 10:
                        if(vector.get(col)==null)
                        {
                            vector.setElementAt(value, col);
                            this.dataVector.setElementAt(vector, row);
                            fireTableCellUpdated(row, col);
                        }else{
                            Session session = HibernateUtil.getSessionFactory().openSession();
                            try
                            {
                                session.beginTransaction().begin();
                                user = (Usuario)session.get(Usuario.class, user.getIdUsuario());
                                if(user.getEditaConsumible()==true)
                                {
                                    int renglon=t_datos.getSelectedRow();
                                    String op="";
                                    if(t_datos.getValueAt(renglon, 6).toString().compareTo("true")==0)
                                        op="H";
                                    if(t_datos.getValueAt(renglon, 7).toString().compareTo("true")==0)
                                        op="M";
                                    if(t_datos.getValueAt(renglon, 8).toString().compareTo("true")==0)
                                        op="S";
                                    if(t_datos.getValueAt(renglon, 9).toString().compareTo("true")==0)
                                        op="E";
                                    if(t_datos.getValueAt(renglon, 10).toString().compareTo("true")==0)
                                        op="P";
                                    if(op.compareTo("")!=0)
                                    {
                                        if(existe(t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString(),10)==false)
                                        {
                                            Consumible consumo = (Consumible)session.get(Consumible.class, Integer.parseInt(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString()));
                                            Query query = session.createSQLQuery("select " +
                "( (select if(sum(movimiento.cantidad) is null, 0, sum(movimiento.cantidad)) from ejemplar left join movimiento on ejemplar.id_Parte=movimiento.id_Parte " +
                "left join almacen on movimiento.id_almacen=almacen.id_almacen where ejemplar.id_Parte='"+t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString()+"' and almacen.id_orden="+orden+" and almacen.tipo_movimiento=2 and almacen.operacion=8 and almacen.especialidad='"+op+"') - " +
                "(select if(sum(movimiento.cantidad) is null, 0, sum(movimiento.cantidad)) from ejemplar left join movimiento on ejemplar.id_Parte=movimiento.id_Parte " +
                "left join almacen on movimiento.id_almacen=almacen.id_almacen where ejemplar.id_Parte='"+t_datos.getValueAt(t_datos.getSelectedRow(), 2).toString()+"' and almacen.id_orden="+orden+" and almacen.tipo_movimiento=1 and almacen.operacion=8 and almacen.especialidad='"+op+"') )as operario ");  
                                            query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
                                            ArrayList partidas=(ArrayList)query.list();
                                            java.util.HashMap map=(java.util.HashMap)partidas.get(0);
                                            if(Double.parseDouble(map.get("operario").toString()) == 0.0d)
                                            {
                                                if(value.toString().compareTo("true")==0){
                                                    consumo.setEspHoj(false);
                                                    consumo.setEspMec(false);
                                                    consumo.setEspPin(true);
                                                    consumo.setEspSus(false);
                                                    consumo.setEspEle(false);
                                                }else{
                                                    consumo.setEspPin(false);
                                                }

                                                session.update(consumo);
                                                session.getTransaction().commit();
                                                vector.setElementAt(value, col);
                                                this.dataVector.setElementAt(vector, row);
                                                fireTableCellUpdated(row, col);
                                                buscaCuentas(-1, -1);
                                            }
                                            else
                                            {
                                                session.getTransaction().rollback();
                                                JOptionPane.showMessageDialog(null, "La partida ya fue Entregada al operario");    
                                            }
                                        }
                                        else
                                        {
                                            session.getTransaction().rollback();
                                            JOptionPane.showMessageDialog(null, "Este consumible ya esta asignado a pintura en otra partida, incrementelo");    
                                        }
                                    }
                                    else
                                    {
                                        Consumible consumo = (Consumible)session.get(Consumible.class, Integer.parseInt(t_datos.getValueAt(t_datos.getSelectedRow(), 0).toString()));
                                        if(value.toString().compareTo("true")==0){
                                            consumo.setEspHoj(false);
                                            consumo.setEspMec(false);
                                            consumo.setEspPin(true);
                                            consumo.setEspSus(false);
                                            consumo.setEspEle(false);
                                        }else{
                                            consumo.setEspPin(false);
                                        }

                                        session.update(consumo);
                                        session.getTransaction().commit();
                                        vector.setElementAt(value, col);
                                        this.dataVector.setElementAt(vector, row);
                                        fireTableCellUpdated(row, col);
                                        buscaCuentas(-1, -1);
                                    }
                                }else{
                                    JOptionPane.showMessageDialog(null, "Acceso denegado");
                                }
                            }
                            catch(Exception e)
                            {
                                session.getTransaction().rollback();
                                e.printStackTrace();
                                JOptionPane.showMessageDialog(null, "Error al actualizar los datos"); 
                            }
                            if(session!=null)
                                if(session.isOpen()==true)
                                {
                                    session.flush();
                                    session.clear();
                                    session.close();
                                }
                            sumaTotales();
                        }
                        break;
                        
                    default:
                        vector.setElementAt(value, col);
                        this.dataVector.setElementAt(vector, row);
                        fireTableCellUpdated(row, col);
                        break;
            }
            t_datos.requestFocus();
        }

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
           return this.celdaEditable[ columnIndex ] [ rowIndex ];
        }

        public void setCeldaEditable(int fila, int columna,  boolean editable)
        {
            this.celdaEditable[ columna ][ fila ] = editable;
        }

        public void setColumnaEditable(int columna, boolean editable)
        {
            int i = 0;
            int cantidadFilas = this.getRowCount();
            for(i=0; i<celdaEditable[columna].length; i++)
                this.celdaEditable[ columna ][ i ] = editable;
        }
    }
    
    private void buscaCuentas(int x, int y)
    {
        if(orden!=null)
        {
            Session session = HibernateUtil.getSessionFactory().openSession();
            try
            {
                Orden ord = (Orden)session.get(Orden.class, Integer.parseInt(orden));
                Query query = session.createSQLQuery("select id_consumible, id_catalogo, consumible.id_Parte, cantidad, consumible.medida, consumible.precio, esp_hoj, esp_mec, esp_sus, esp_ele, esp_pin, tipo from consumible \n" +
"left join ejemplar on consumible.id_Parte=ejemplar.id_Parte where id_orden="+orden+" order by id_consumible;");  
                query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
                ArrayList partidas=(ArrayList)query.list();
                if(partidas.size()>0)
                {
                    model=new MyModel(partidas.size(), columnas);
                    t_datos.setModel(model);
                    t_datos.getModel();
                    
                    for(int i=0; i<partidas.size(); i++)
                    {
                        //consumible., , , , , 
                        java.util.HashMap map=(java.util.HashMap)partidas.get(i);
                        model.setValueAt(map.get("id_consumible"), i, 0);
                        model.setCeldaEditable(i, 0, false);
                        model.setValueAt(map.get("id_catalogo"), i, 1);
                        model.setCeldaEditable(i, 1, false);
                        model.setValueAt(map.get("id_Parte"), i, 2);
                        model.setCeldaEditable(i, 2, false);
                        model.setValueAt(map.get("cantidad"), i, 3);
                        model.setValueAt(map.get("medida"), i, 4);
                        model.setCeldaEditable(i, 4, false);
                        model.setValueAt(map.get("precio"), i, 5);
                        model.setCeldaEditable(i, 5, false);
                        model.setValueAt(map.get("esp_hoj").toString().contentEquals("true"), i, 6);
                        model.setValueAt(map.get("esp_mec").toString().contentEquals("true"), i, 7);
                        model.setValueAt(map.get("esp_sus").toString().contentEquals("true"), i, 8);
                        model.setValueAt(map.get("esp_ele").toString().contentEquals("true"), i, 9);
                        model.setValueAt(map.get("esp_pin").toString().contentEquals("true"), i, 10);
                        model.setValueAt(map.get("tipo"), i, 11);
                        model.setCeldaEditable(i, 11, false);
                    }
                }
                else
                {
                    model=new MyModel(0, columnas);
                    t_datos.setModel(model);    
                    //model.setNumRows(0);
                }
                session.beginTransaction().rollback();
            }catch(Exception e)
            {
                e.printStackTrace();
            }
            if(session!=null)
                if(session.isOpen()==true)
                {
                    session.flush();
                    session.clear();
                    session.close();
                }
        }
        else
        {
            model=new MyModel(0, columnas);
            t_datos.setModel(model);
        }
        formatoTabla();
        sumaTotales();
        if(x>=0 && y>=0)
        {
            t_datos.setColumnSelectionInterval(y, y);
            t_datos.setRowSelectionInterval(x, x);
        }
    }
    public void sumaTotales()
    {
         double hoj=0.0, mec=0.0, sus=0.0, ele=0.0, pin=0.0, total=0.0;
         for(int x=0; x<t_datos.getRowCount(); x++)
         {
             if(t_datos.getValueAt(x, 6).toString().compareTo("true")==0){
                 hoj += (Double)t_datos.getValueAt(x, 5) * (Double)t_datos.getValueAt(x, 3);
             }else if(t_datos.getValueAt(x, 7).toString().compareTo("true")==0){
                 mec += (Double)t_datos.getValueAt(x, 5) * (Double)t_datos.getValueAt(x, 3);
             }
             else if(t_datos.getValueAt(x, 8).toString().compareTo("true")==0){
                 sus += (Double)t_datos.getValueAt(x, 5) * (Double)t_datos.getValueAt(x, 3);
             }else if(t_datos.getValueAt(x, 9).toString().compareTo("true")==0){
                 ele += (Double)t_datos.getValueAt(x, 5) * (Double)t_datos.getValueAt(x, 3);
             }else if(t_datos.getValueAt(x, 10).toString().compareTo("true")==0){
                 pin += (Double)t_datos.getValueAt(x, 5) * (Double)t_datos.getValueAt(x, 3);
             }
        }
        total = hoj+mec+sus+ele+pin;
        t_hojalateria.setValue(hoj);
        t_mecanica.setValue(mec);
        t_suspension.setValue(sus);
        t_electrico.setValue(ele);
        t_pintura.setValue(pin);
        t_total.setValue(total);
    }
    boolean existe(String aux, int pos)
    {
        for(int x=0; x<t_datos.getRowCount(); x++)
        {
            if(t_datos.getSelectedRow()!=x)
                if(t_datos.getValueAt(x, 2).toString().compareTo(aux)==0 && t_datos.getValueAt(x, pos).toString().compareTo("true")==0)
                    return true;
        }
        return false;
    }
}
