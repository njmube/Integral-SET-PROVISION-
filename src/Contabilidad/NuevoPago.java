/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Contabilidad;

import Compras.Formatos;
import static Contabilidad.General.acentos;
import Hibernate.Util.HibernateUtil;
import Hibernate.entidades.Concepto;
import Hibernate.entidades.Configuracion;
import Hibernate.entidades.DocumentoPago;
import Hibernate.entidades.Factura;
import Hibernate.entidades.Pago;
import Hibernate.entidades.Relacion;
import Hibernate.entidades.Usuario;
import Integral.Comprimir;
import Integral.FormatoEditor;
import Integral.FormatoTabla;
import Integral.Render1;
import Integral.calendario;
import api.ApiTurbo;
import finkok33.CMoneda;
import finkok33.CTipoDeComprobante;
import finkok33.CUsoCFDI;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.xml.datatype.DatatypeFactory;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import timbrar.ApiFinkok;
import timbrar.Constantes33;
import timbrar.GeneradorSelloDigital;

/**
 *
 * @author I.S.C.Salvador
 */
public class NuevoPago extends javax.swing.JDialog {

    Date fecha_pago=new Date();
    String error="";
    Pago pago;
    Usuario user;
    String sessionPrograma;
    String anterior="";
    String ruta="";
    boolean permiso=false;
    DefaultTableModel model;
    FormatoTabla formato;
    boolean bandera=false;
    int configuracion=1;
    
    finkok33.Comprobante comprobante33;
    /**
     * Creates new form NuevoPago
     */
    public NuevoPago(java.awt.Frame parent, boolean modal, Usuario u, String ses, Pago pag, int configuracion) {
        super(parent, modal);
        initComponents();
        this.configuracion=configuracion;
         try{
            FileReader fil = new FileReader("config.txt");
            BufferedReader b = new BufferedReader(fil);
            if((ruta = b.readLine())==null)
                ruta="";
            b.close();
            fil.close();
            fil=null;
            b=null;
        }catch(Exception e){}
        user=u;
        sessionPrograma=ses;
        pago=pag;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        l_rfc_emisor = new javax.swing.JLabel();
        progreso = new javax.swing.JProgressBar();
        contenedor = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        t_datos = new javax.swing.JTable();
        b_menos2 = new javax.swing.JButton();
        b_mas2 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        t_pagado = new javax.swing.JFormattedTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        t_relacionados = new javax.swing.JTable();
        b_menos1 = new javax.swing.JButton();
        b_mas1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel79 = new javax.swing.JLabel();
        jLabel80 = new javax.swing.JLabel();
        t_serie_factura = new javax.swing.JTextField();
        jLabel81 = new javax.swing.JLabel();
        t_folio_factura = new javax.swing.JTextField();
        jLabel86 = new javax.swing.JLabel();
        t_uuid_factura = new javax.swing.JTextField();
        jLabel82 = new javax.swing.JLabel();
        t_xml = new javax.swing.JTextField();
        b_xml = new javax.swing.JButton();
        jLabel83 = new javax.swing.JLabel();
        t_pdf = new javax.swing.JTextField();
        b_pdf = new javax.swing.JButton();
        b_email = new javax.swing.JButton();
        p_informacion = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        l_emisor = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        t_fecha = new javax.swing.JTextField();
        b_fecha = new javax.swing.JButton();
        c_forma_pago = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        t_referencia = new javax.swing.JTextField();
        p_cliente = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        t_cliente = new javax.swing.JTextField();
        t_direccion = new javax.swing.JTextField();
        t_colonia = new javax.swing.JTextField();
        t_rfc = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        t_municipio = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        t_cp = new javax.swing.JTextField();
        t_id = new javax.swing.JTextField();
        c_estado = new javax.swing.JComboBox();
        c_pais = new javax.swing.JComboBox();
        jLabel23 = new javax.swing.JLabel();
        t_numero_exterior = new javax.swing.JTextField();
        t_correo_receptor = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        p_botones = new javax.swing.JPanel();
        b_salir = new javax.swing.JButton();
        b_generar = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        b_actualizar = new javax.swing.JButton();

        l_rfc_emisor.setText("jLabel16");

        progreso.setString("Listo");
        progreso.setStringPainted(true);

        setBackground(new java.awt.Color(255, 255, 255));
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setResizable(false);

        contenedor.setBackground(new java.awt.Color(255, 255, 255));
        contenedor.setOpaque(true);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        t_datos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Serie", "Folio", "UUID", "Parcialidad", "Imp. Pag", "Saldo Ant", "Saldo Insol."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(t_datos);

        b_menos2.setBackground(new java.awt.Color(2, 135, 242));
        b_menos2.setForeground(new java.awt.Color(255, 255, 255));
        b_menos2.setIcon(new ImageIcon("imagenes/boton_menos.png"));
        b_menos2.setToolTipText("Eliminar un concepto");
        b_menos2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_menos2ActionPerformed(evt);
            }
        });

        b_mas2.setBackground(new java.awt.Color(2, 135, 242));
        b_mas2.setForeground(new java.awt.Color(255, 255, 255));
        b_mas2.setIcon(new ImageIcon("imagenes/boton_mas.png"));
        b_mas2.setToolTipText("Agrega un concepto");
        b_mas2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_mas2ActionPerformed(evt);
            }
        });

        jLabel14.setText("Total Pagado $");

        t_pagado.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_pagado.setEnabled(false);
        t_pagado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_pagadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(b_mas2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(b_menos2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(t_pagado, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b_mas2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_menos2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14)
                        .addComponent(t_pagado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        contenedor.addTab("CFDI PAGADOS", jPanel2);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        t_relacionados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "UUID", "Tipo", "relacion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(t_relacionados);

        b_menos1.setBackground(new java.awt.Color(2, 135, 242));
        b_menos1.setForeground(new java.awt.Color(255, 255, 255));
        b_menos1.setIcon(new ImageIcon("imagenes/boton_menos.png"));
        b_menos1.setToolTipText("Eliminar un concepto");
        b_menos1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_menos1ActionPerformed(evt);
            }
        });

        b_mas1.setBackground(new java.awt.Color(2, 135, 242));
        b_mas1.setForeground(new java.awt.Color(255, 255, 255));
        b_mas1.setIcon(new ImageIcon("imagenes/boton_mas.png"));
        b_mas1.setToolTipText("Agrega un concepto");
        b_mas1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_mas1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(b_mas1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(b_menos1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b_mas1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_menos1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        contenedor.addTab("CFDI Relacionados", jPanel3);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel79.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel79.setText("Datos del Pago Electrónico");

        jLabel80.setText("Serie:");

        t_serie_factura.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        t_serie_factura.setToolTipText("Número de serie asignado por el PAC");
        t_serie_factura.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_serie_factura.setEnabled(false);

        jLabel81.setText("Folio:");

        t_folio_factura.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        t_folio_factura.setToolTipText("Folio asignado por el PAC");
        t_folio_factura.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_folio_factura.setEnabled(false);

        jLabel86.setText("UUID:");

        t_uuid_factura.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        t_uuid_factura.setToolTipText("Folio fiscal asignado por el SAT");
        t_uuid_factura.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_uuid_factura.setEnabled(false);

        jLabel82.setText("XML:");

        t_xml.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        t_xml.setToolTipText("Factura en formato XML");
        t_xml.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_xml.setEnabled(false);

        b_xml.setBackground(new java.awt.Color(2, 135, 242));
        b_xml.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        b_xml.setForeground(new java.awt.Color(254, 254, 254));
        b_xml.setIcon(new ImageIcon("imagenes/xml_icon.png"));
        b_xml.setText("Abrir");
        b_xml.setToolTipText("Abrir factura en formato XML");
        b_xml.setEnabled(false);
        b_xml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_xmlActionPerformed(evt);
            }
        });

        jLabel83.setText("PDF:");

        t_pdf.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        t_pdf.setToolTipText("Factura en formato PDF");
        t_pdf.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_pdf.setEnabled(false);
        t_pdf.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                t_pdfMouseClicked(evt);
            }
        });

        b_pdf.setBackground(new java.awt.Color(2, 135, 242));
        b_pdf.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        b_pdf.setForeground(new java.awt.Color(254, 254, 254));
        b_pdf.setIcon(new ImageIcon("imagenes/pdf_icon.png"));
        b_pdf.setText("Abrir");
        b_pdf.setToolTipText("Abrir factura en formato PDF");
        b_pdf.setEnabled(false);
        b_pdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_pdfActionPerformed(evt);
            }
        });

        b_email.setBackground(new java.awt.Color(2, 135, 242));
        b_email.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        b_email.setForeground(new java.awt.Color(254, 254, 254));
        b_email.setIcon(new ImageIcon("imagenes/send2.png"));
        b_email.setText("Enviar al Cliente");
        b_email.setToolTipText("Comprime el XML y el PDF para enviarlo por correo electrónico");
        b_email.setEnabled(false);
        b_email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_emailActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(351, 351, 351)
                        .addComponent(jLabel79))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(273, 273, 273)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addComponent(jLabel86)
                                    .addGap(18, 18, 18)
                                    .addComponent(t_uuid_factura, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel80)
                                        .addComponent(jLabel81))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(t_folio_factura, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(t_serie_factura, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(1, 1, 1)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel82)
                                    .addComponent(jLabel83))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(t_pdf, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(b_pdf))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(t_xml, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(b_xml))
                                    .addComponent(b_email))))))
                .addContainerGap(352, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel79)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel80)
                    .addComponent(t_serie_factura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel81)
                    .addComponent(t_folio_factura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel86)
                    .addComponent(t_uuid_factura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel82)
                    .addComponent(t_xml, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_xml))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel83)
                    .addComponent(t_pdf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_pdf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_email)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        contenedor.addTab("COMPROBANTE ELECTRONICO", jPanel4);

        getContentPane().add(contenedor, java.awt.BorderLayout.CENTER);

        p_informacion.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Emisión de Comprobantes de Pago");

        l_emisor.setText("Empresa:");

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Datos de Pago", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

        t_fecha.setEditable(false);
        t_fecha.setBackground(new java.awt.Color(204, 255, 255));
        t_fecha.setText("DD-MM-AAAA");
        t_fecha.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_fecha.setEnabled(false);

        b_fecha.setBackground(new java.awt.Color(2, 135, 242));
        b_fecha.setIcon(new ImageIcon("imagenes/calendario.png"));
        b_fecha.setToolTipText("Calendario");
        b_fecha.setMaximumSize(new java.awt.Dimension(32, 8));
        b_fecha.setMinimumSize(new java.awt.Dimension(32, 8));
        b_fecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_fechaActionPerformed(evt);
            }
        });

        c_forma_pago.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "99" }));
        c_forma_pago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_forma_pagoActionPerformed(evt);
            }
        });

        jLabel15.setText("F. Pago:");

        jLabel11.setText("Referencia:");

        t_referencia.setToolTipText("Municipio del cliente");
        t_referencia.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_referencia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_referenciaKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(b_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_fecha, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c_forma_pago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_referencia)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(t_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(c_forma_pago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(t_referencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        p_cliente.setBackground(new java.awt.Color(254, 254, 254));
        p_cliente.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Datos del cliente", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.TOP));

        jLabel2.setText("Cliente:");

        jLabel3.setForeground(new java.awt.Color(13, 132, 254));
        jLabel3.setText("Dir:");

        jLabel4.setText("Colonia:");

        t_cliente.setToolTipText("Razon social del cliente");
        t_cliente.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_cliente.setEnabled(false);
        t_cliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_clienteKeyTyped(evt);
            }
        });

        t_direccion.setToolTipText("Calle del cliente");
        t_direccion.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_direccion.setEnabled(false);
        t_direccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_direccionKeyTyped(evt);
            }
        });

        t_colonia.setToolTipText("Colonia del cliente");
        t_colonia.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_colonia.setEnabled(false);
        t_colonia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_coloniaKeyTyped(evt);
            }
        });

        t_rfc.setToolTipText("RFC del cliente");
        t_rfc.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_rfc.setEnabled(false);
        t_rfc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_rfcKeyTyped(evt);
            }
        });

        jLabel5.setForeground(new java.awt.Color(13, 132, 254));
        jLabel5.setText("RFC:");

        jLabel6.setForeground(new java.awt.Color(13, 132, 254));
        jLabel6.setText("Mpio:");

        t_municipio.setToolTipText("Municipio del cliente");
        t_municipio.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_municipio.setEnabled(false);
        t_municipio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_municipioActionPerformed(evt);
            }
        });
        t_municipio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_municipioKeyTyped(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(13, 132, 254));
        jLabel7.setText("Edo:");

        jLabel8.setForeground(new java.awt.Color(13, 132, 254));
        jLabel8.setText("Pais:");

        jLabel9.setForeground(new java.awt.Color(13, 132, 254));
        jLabel9.setText("CP:");

        t_cp.setToolTipText("CP del cliente");
        t_cp.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_cp.setEnabled(false);
        t_cp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_cpKeyTyped(evt);
            }
        });

        t_id.setToolTipText("Numero de compañia o cliente");
        t_id.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_id.setEnabled(false);

        c_estado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AGUASCALIENTES", "BAJA CALIFORNIA", "BAJA CALIFORNIA SUR", "CAMPECHE", "CHIAPAS", "CHIHUAHUA", "COAHUILA", "COLIMA", "CIUDAD DE MEXICO", "DURANGO", "ESTADO DE MEXICO", "GUANAJUATO", "GUERRERO", "HIDALGO", "JALISCO", "MICHOACAN", "MORELOS", "NAYARIT", "NUEVO LEON", "OAXACA", "PUEBLA", "QUERETARO", "QUINTANA ROO", "SAN LUIS POTOSI", "SINALOA", "SONORA", "TABASCO", "TAMAULIPAS", "TLAXCALA", "VERACRUZ", "YUCATAN", "ZACATECAS" }));
        c_estado.setToolTipText("Estado del cliente");
        c_estado.setEnabled(false);

        c_pais.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MEX", "USA", "GTM", "HND" }));
        c_pais.setSelectedItem("MX");
        c_pais.setToolTipText("Pais del cliente");
        c_pais.setEnabled(false);

        jLabel23.setForeground(new java.awt.Color(13, 132, 254));
        jLabel23.setText("No:");

        t_numero_exterior.setToolTipText("Número externo del domicilio del cliente");
        t_numero_exterior.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_numero_exterior.setEnabled(false);
        t_numero_exterior.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_numero_exteriorKeyTyped(evt);
            }
        });

        t_correo_receptor.setToolTipText("Municipio del cliente");
        t_correo_receptor.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_correo_receptor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_correo_receptorKeyTyped(evt);
            }
        });

        jLabel10.setForeground(new java.awt.Color(13, 132, 254));
        jLabel10.setText("Correo Receptor:");

        javax.swing.GroupLayout p_clienteLayout = new javax.swing.GroupLayout(p_cliente);
        p_cliente.setLayout(p_clienteLayout);
        p_clienteLayout.setHorizontalGroup(
            p_clienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_clienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(p_clienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_clienteLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_id, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_cliente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_rfc, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(p_clienteLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_direccion, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel23)
                        .addGap(2, 2, 2)
                        .addComponent(t_numero_exterior, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_colonia, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(p_clienteLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c_estado, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_municipio, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_cp)
                        .addGap(14, 14, 14)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c_pais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_clienteLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_correo_receptor, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(91, 91, 91)))
                .addContainerGap())
        );
        p_clienteLayout.setVerticalGroup(
            p_clienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_clienteLayout.createSequentialGroup()
                .addGroup(p_clienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(t_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(t_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(t_rfc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p_clienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(t_direccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(t_colonia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23)
                    .addComponent(t_numero_exterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p_clienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(c_estado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(t_municipio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(c_pais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(t_cp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p_clienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(t_correo_receptor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout p_informacionLayout = new javax.swing.GroupLayout(p_informacion);
        p_informacion.setLayout(p_informacionLayout);
        p_informacionLayout.setHorizontalGroup(
            p_informacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_informacionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(p_informacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(p_informacionLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(l_emisor))
                    .addGroup(p_informacionLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(p_cliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        p_informacionLayout.setVerticalGroup(
            p_informacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_informacionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(p_informacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(l_emisor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p_informacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(p_cliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(p_informacion, java.awt.BorderLayout.NORTH);

        p_botones.setBackground(new java.awt.Color(255, 255, 255));

        b_salir.setBackground(new java.awt.Color(2, 135, 242));
        b_salir.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        b_salir.setForeground(new java.awt.Color(254, 254, 254));
        b_salir.setIcon(new ImageIcon("imagenes/salir1.png"));
        b_salir.setText("Salir");
        b_salir.setToolTipText("Cierra la ventana");
        b_salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_salirActionPerformed(evt);
            }
        });

        b_generar.setBackground(new java.awt.Color(2, 135, 242));
        b_generar.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        b_generar.setForeground(new java.awt.Color(254, 254, 254));
        b_generar.setIcon(new ImageIcon("imagenes/nube.png"));
        b_generar.setText("Generar comprobante");
        b_generar.setToolTipText("Genera el timbre fiscal");
        b_generar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_generarActionPerformed(evt);
            }
        });

        jLabel29.setText("Los campos con \"*\" son obligatorios");

        b_actualizar.setBackground(new java.awt.Color(2, 135, 242));
        b_actualizar.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        b_actualizar.setForeground(new java.awt.Color(254, 254, 254));
        b_actualizar.setIcon(new ImageIcon("imagenes/guardar-documento.png"));
        b_actualizar.setText("Actualizar");
        b_actualizar.setToolTipText("Actualiza el registro en la base de datos");
        b_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_actualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout p_botonesLayout = new javax.swing.GroupLayout(p_botones);
        p_botones.setLayout(p_botonesLayout);
        p_botonesLayout.setHorizontalGroup(
            p_botonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_botonesLayout.createSequentialGroup()
                .addGap(314, 314, 314)
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                .addComponent(b_actualizar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_generar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_salir)
                .addContainerGap())
        );
        p_botonesLayout.setVerticalGroup(
            p_botonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_botonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(p_botonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(b_salir)
                    .addComponent(b_generar)
                    .addComponent(b_actualizar))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        getContentPane().add(p_botones, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void t_clienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_clienteKeyTyped
        // TODO add your handling code here:
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_cliente.getText().length()>=100)
        evt.consume();
    }//GEN-LAST:event_t_clienteKeyTyped

    private void t_direccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_direccionKeyTyped
        // TODO add your handling code here:
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_direccion.getText().length()>=150)
        evt.consume();
    }//GEN-LAST:event_t_direccionKeyTyped

    private void t_coloniaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_coloniaKeyTyped
        // TODO add your handling code here:
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_colonia.getText().length()>=150)
        evt.consume();
    }//GEN-LAST:event_t_coloniaKeyTyped

    private void t_rfcKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_rfcKeyTyped
        // TODO add your handling code here:
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_rfc.getText().length()>=13)
        evt.consume();
    }//GEN-LAST:event_t_rfcKeyTyped

    private void t_municipioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_municipioKeyTyped
        // TODO add your handling code here:
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_municipio.getText().length()>=20)
        evt.consume();
    }//GEN-LAST:event_t_municipioKeyTyped

    private void t_cpKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_cpKeyTyped
        char car = evt.getKeyChar();
        if(t_cp.getText().length()>=5)
        evt.consume();
        if((car<'0' || car>'9'))
        evt.consume();
    }//GEN-LAST:event_t_cpKeyTyped

    private void t_numero_exteriorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_numero_exteriorKeyTyped
        // TODO add your handling code here:
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_numero_exterior.getText().length()>=10)
        evt.consume();
    }//GEN-LAST:event_t_numero_exteriorKeyTyped

    private void b_fechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_fechaActionPerformed
        // TODO add your handling code here:
        calendario cal =new calendario(new javax.swing.JFrame(), true, false);
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        cal.setLocation((d.width/2)-(cal.getWidth()/2), (d.height/2)-(cal.getHeight()/2));
        cal.setVisible(true);

        Calendar miCalendario=cal.getReturnStatus();
        if(miCalendario!=null)
        {
            String dia=Integer.toString(miCalendario.get(Calendar.DATE));
            String mes = Integer.toString(miCalendario.get(Calendar.MONTH)+1);
            String anio = Integer.toString(miCalendario.get(Calendar.YEAR));
            t_fecha.setText(dia+"-"+mes+"-"+anio);
            b_fecha.requestFocus();
        }
        else
            t_fecha.setText("DD-MM-AAAA");
    }//GEN-LAST:event_b_fechaActionPerformed

    private void b_menos2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_menos2ActionPerformed
        // TODO add your handling code here:
        if(t_datos.getRowCount()>0 && t_datos.getSelectedRowCount()>=0)
        {
            int [] renglones=t_datos.getSelectedRows();
            Session session = HibernateUtil.getSessionFactory().openSession();
            try{
                DocumentoPago docPago;
                session.beginTransaction().begin();
                for(int x=0; x<renglones.length; x++)
                {
                    docPago=(DocumentoPago)session.get(DocumentoPago.class, Integer.parseInt(t_datos.getValueAt(renglones[x]-x, 0).toString()));
                    session.delete(docPago);
                    
                    Factura aux=(Factura)session.get(Factura.class,docPago.getFactura().getIdFactura());
                    aux.setEstatus("POR COBRAR");
                    aux.setfEstatus(pago.getFecha());
                    session.update(aux);
                    model.removeRow(renglones[x]-x);
                }
                session.beginTransaction().commit();
            }catch(Exception e){
                session.beginTransaction().rollback();
                e.printStackTrace();
                evt=null;
            }
            finally
            {
                if(session!=null)
                if(session.isOpen())
                session.close();
            }
            sumaTotales();
            if(t_datos.getRowCount()>0)
            {
                t_datos.setRowSelectionInterval(t_datos.getRowCount()-1, t_datos.getRowCount()-1);
                t_datos.setColumnSelectionInterval(0, 0);
            }
        }
    }//GEN-LAST:event_b_menos2ActionPerformed

    private void b_mas2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_mas2ActionPerformed
        // TODO add your handling code here:
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            buscaFactura obj = new buscaFactura(new javax.swing.JFrame(), true, this.sessionPrograma, this.user, 0, configuracion);
            obj.t_busca.requestFocus();
            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
            obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
            obj.setVisible(true);
            Factura aux=obj.getReturnStatus();
            if(aux!=null)
            {
                session.beginTransaction().begin();
                aux=(Factura)session.get(Factura.class, aux.getIdFactura());
                if(aux.getCondicionesPago().compareTo("PAGO EN PARCIALIDADES O DIFERIDO")==0)
                {
                    if(aux.getRfcEmisor().compareTo(l_rfc_emisor.getText())==0)
                    {
                        if(aux.getRfcReceptor().compareTo(t_rfc.getText())==0)
                        {
                            if(aux!=null && busca_lista(aux.getFFiscal())==false)
                            {
                                if(aux.getEstadoFactura().compareTo("Cancelado")!=0)
                                {
                                    if(aux.getFFiscal()!=null && aux.getFFiscal().compareTo("")!=0)
                                    {
                                        DefaultTableModel temp = (DefaultTableModel) t_datos.getModel();
                                        //ID, Folio, UUID, Parcialidad, Imp Pag, Sal Ant, Saldo insol.
                                        DocumentoPago docPago = (DocumentoPago)session.createCriteria(DocumentoPago.class).add(Restrictions.eq("factura.idFactura", aux.getIdFactura())).createAlias("pago", "pag").add(Restrictions.ne("pag.estadoFactura", "CANCELADO")).addOrder(Order.desc("parcialidad")).uniqueResult();
                                        if(docPago!=null)
                                        {
                                            if(docPago.getSaldoInsoluto()>0.0)
                                            {
                                                Concepto[] renglon=(Concepto[])aux.getConceptos().toArray(new Concepto[0]);
                                                BigDecimal total=new BigDecimal("0.0");
                                                for(int w=0; w<aux.getConceptos().size(); w++)
                                                {
                                                    BigDecimal cantidad=new BigDecimal(""+renglon[w].getCantidad());
                                                    BigDecimal precio=new BigDecimal(""+renglon[w].getPrecio());
                                                    BigDecimal descuento=new BigDecimal(""+renglon[w].getDescuento());
                                                    descuento=descuento.divide(new BigDecimal("100"));
                                                    BigDecimal subtotal=cantidad.multiply(precio).setScale(2, BigDecimal.ROUND_HALF_UP);
                                                    BigDecimal resta=subtotal.multiply(descuento).setScale(2, BigDecimal.ROUND_HALF_UP);
                                                    total = total.add(subtotal.subtract(resta)).setScale(2, BigDecimal.ROUND_HALF_UP);
                                                }
                                                BigDecimal iva=new BigDecimal(""+aux.getIva());
                                                iva=iva.divide(new BigDecimal("100"));
                                                total=total.add(total.multiply(iva));
                                                double totalFinal=Double.parseDouble(total.setScale(2, BigDecimal.ROUND_HALF_UP).toString());
                                                String folio="", serie="";
                                                if(aux.getVersion()==3.3)
                                                {
                                                    serie=aux.getSerieExterno();
                                                    folio=""+aux.getFolioExterno();
                                                }
                                                else
                                                {
                                                    serie=aux.getSerie();
                                                    folio=aux.getFolio();
                                                }

                                                pago=(Pago)session.get(Pago.class, pago.getIdPago());
                                                DocumentoPago nuevoRenglon=new DocumentoPago();
                                                nuevoRenglon.setPago(pago);
                                                nuevoRenglon.setFactura(aux);
                                                nuevoRenglon.setParcialidad(docPago.getParcialidad()+1);
                                                nuevoRenglon.setImporte(docPago.getSaldoInsoluto());
                                                nuevoRenglon.setSaldoInsoluto(0.0d);
                                                nuevoRenglon.setSaldoAnterior(docPago.getSaldoInsoluto());
                                                int siguente=(int)session.save(nuevoRenglon);

                                                aux.setEstatus("COBRADA");
                                                aux.setfEstatus(pago.getFecha());
                                                session.update(aux);
                                                        
                                                Object nuevo[]= {siguente, serie, folio, aux.getFFiscal(),docPago.getParcialidad()+1, docPago.getSaldoInsoluto(), docPago.getSaldoInsoluto(), 0.0d};
                                                temp.addRow(nuevo);
                                                sumaTotales();
                                            }
                                            else
                                            {
                                                JOptionPane.showMessageDialog(null, "El documento ya fué pagado en su totalidad!");
                                            }
                                        }
                                        else
                                        {
                                            Concepto[] renglon=(Concepto[])aux.getConceptos().toArray(new Concepto[0]);
                                            BigDecimal total=new BigDecimal("0.0");
                                            for(int w=0; w<aux.getConceptos().size(); w++)
                                            {
                                                BigDecimal cantidad=new BigDecimal(""+renglon[w].getCantidad());
                                                BigDecimal precio=new BigDecimal(""+renglon[w].getPrecio());
                                                BigDecimal descuento=new BigDecimal(""+renglon[w].getDescuento());
                                                descuento=descuento.divide(new BigDecimal("100"));
                                                BigDecimal subtotal=cantidad.multiply(precio).setScale(2, BigDecimal.ROUND_HALF_UP);
                                                BigDecimal resta=subtotal.multiply(descuento).setScale(2, BigDecimal.ROUND_HALF_UP);
                                                total = total.add(subtotal.subtract(resta)).setScale(2, BigDecimal.ROUND_HALF_UP);
                                            }

                                            String folio="", serie="";
                                            if(aux.getVersion()==3.3)
                                            {
                                                serie=aux.getSerieExterno();
                                                folio=""+aux.getFolioExterno();
                                            }
                                            else
                                            {
                                                serie=aux.getSerie();
                                                folio=aux.getFolio();
                                            }

                                            BigDecimal iva=new BigDecimal(""+aux.getIva());
                                            iva=iva.divide(new BigDecimal("100"));
                                            total=total.add(total.multiply(iva));
                                            double totalFinal=Double.parseDouble(total.setScale(2, BigDecimal.ROUND_HALF_UP).toString());

                                            pago=(Pago)session.get(Pago.class, pago.getIdPago());
                                            DocumentoPago nuevoRenglon1=new DocumentoPago();
                                            nuevoRenglon1.setPago(pago);
                                            nuevoRenglon1.setFactura(aux);
                                            nuevoRenglon1.setParcialidad(1);
                                            nuevoRenglon1.setImporte(totalFinal);
                                            nuevoRenglon1.setSaldoInsoluto(0.0d);
                                            nuevoRenglon1.setSaldoAnterior(totalFinal);
                                            int siguente1=(int)session.save(nuevoRenglon1);

                                            aux.setEstatus("COBRADA");
                                            aux.setfEstatus(pago.getFecha());
                                            session.update(aux);
                                                
                                            Object nuevo[] = {siguente1, serie, folio, aux.getFFiscal(),1, totalFinal, totalFinal, 0.0d};
                                            temp.addRow(nuevo);
                                            sumaTotales();
                                        }
                                    }
                                    else
                                    {
                                        JOptionPane.showMessageDialog(null, "El documento no esta timbrado aun!");
                                    }
                                }
                                else
                                {
                                    JOptionPane.showMessageDialog(null, "El documento Esta canceado!");
                                }
                            }

                        //factura = (Factura)session.get(Factura.class, factura.getIdFactura()); chava
                        session.beginTransaction().commit();
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, "El RFC de la factura no coincide con el del cliente seleccionado!");
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "El RFC de la factura no coincide con el FRC del emisor del Pago!");
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "La factura no tiene el Metodo de Pago=PPD!");
                }
            }
        }catch(Exception e)
        {
            session.beginTransaction().rollback();
            e.printStackTrace();
            evt=null;
        }
        finally
        {
            if(session!=null)
            if(session.isOpen())
            session.close();
        }
    }//GEN-LAST:event_b_mas2ActionPerformed

    private void b_xmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_xmlActionPerformed
        // TODO add your handling code here:
        if(t_folio_factura.getText().compareTo("")!=0 && t_uuid_factura.getText().compareTo("")!=0)
        {
            Session session = HibernateUtil.getSessionFactory().openSession();
            try
            {
                session.beginTransaction().begin();
                String ruta="";
                try
                {
                    ruta="";
                    FileReader f = new FileReader("config.txt");
                    BufferedReader b = new BufferedReader(f);
                    if((ruta = b.readLine())==null)
                    ruta="";
                    b.close();
                }
                catch(IOException e)
                {
                    e.printStackTrace();
                }
                Configuracion config=(Configuracion)session.createCriteria(Configuracion.class).add(Restrictions.eq("nombre", l_emisor.getText())).uniqueResult();

                if(t_xml.getText().compareTo("")==0)
                t_xml.setText(config.getRfc()+"_"+t_serie_factura.getText()+"_"+t_folio_factura.getText()+"_"+t_rfc.getText()+"-p.xml");
                File xml=new File(ruta+"xml-timbrados/"+t_xml.getText());
                if(xml.exists())//existe en nuestro directorio
                Desktop.getDesktop().open(xml);
                else//descargar el archivo del SAP
                {
                    progreso.setIndeterminate(true);
                    progreso.setString("Descargando archivo espere");
                    consultaFacturaElectronica(xml);
                }
            }catch(Exception e)
            {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error al consultar la base de datos");
            }
            finally
            {
                if(session!=null)
                if(session.isOpen())
                session.close();
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Debes generar comprobante primero para tratar de recuperar los datos del SAP");
        }
    }//GEN-LAST:event_b_xmlActionPerformed

    private void t_pdfMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_t_pdfMouseClicked
        // TODO add your handling code here:
        /*Formatos f=new Formatos(this.user, this.sessionPrograma, null, "");
        f.factura=factura;
        f.factura();*/
    }//GEN-LAST:event_t_pdfMouseClicked

    private void b_pdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_pdfActionPerformed
        // TODO add your handling code here:
        if(t_folio_factura.getText().compareTo("")!=0 && t_uuid_factura.getText().compareTo("")!=0)
        {
            Session session = HibernateUtil.getSessionFactory().openSession();
            try
            {
                session.beginTransaction().begin();
                String ruta="";
                try
                {
                    ruta="";
                    FileReader f = new FileReader("config.txt");
                    BufferedReader b = new BufferedReader(f);
                    if((ruta = b.readLine())==null)
                    ruta="";
                    b.close();
                }
                catch(IOException e)
                {
                    e.printStackTrace();
                }
                Configuracion config=(Configuracion)session.createCriteria(Configuracion.class).add(Restrictions.eq("nombre", pago.getNombreEmisor())).uniqueResult();
                if(t_pdf.getText().compareTo("")==0)
                    t_pdf.setText(config.getRfc()+"_"+t_serie_factura.getText()+"_"+t_folio_factura.getText()+"_"+t_rfc.getText()+"-p.pdf");
                File xml=new File(ruta+"xml-timbrados/"+t_pdf.getText());
                if(xml.exists()){//existe en nuestro directorio
                    Desktop.getDesktop().open(xml);
                }else//descargar el archivo del SAP
                {
                    //progreso.setIndeterminate(true);
                    //progreso.setString("Descargando archivo espere");
                    pago=(Pago)session.get(Pago.class, pago.getIdPago());
                    Formatos formato_pdf = new Formatos(this.user, this.sessionPrograma, pago,configuracion);
                    formato_pdf.pago();
                }
            }catch(Exception e)
            {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error al consultar la base de datos");
            }
            finally
            {
                if(session!=null)
                if(session.isOpen())
                session.close();
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Debes generar comprobante primero para tratar de recuperar los datos del SAP");
        }
    }//GEN-LAST:event_b_pdfActionPerformed

    private void b_emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_emailActionPerformed
        // TODO add your handling code here:
        String ruta="";
        try
        {
            ruta="";
            FileReader f = new FileReader("config.txt");
            BufferedReader b = new BufferedReader(f);
            if((ruta = b.readLine())==null)
            ruta="";
            b.close();
        }
        catch(IOException e)
        {
            e.printStackTrace();
        }
        File xml= new File(ruta+"xml-timbrados/"+t_xml.getText());
        File pdf=new File(ruta+"xml-timbrados/"+t_pdf.getText());

        if(xml.exists()==true && pdf.exists()==true)
        {
            Comprimir zip=new Comprimir();
            List lista=new ArrayList();
            lista.add(ruta+"xml-timbrados/"+t_xml.getText());
            lista.add(ruta+"xml-timbrados/"+t_pdf.getText());
            Session session = HibernateUtil.getSessionFactory().openSession();
            try
            {
                session.beginTransaction().begin();
                pago=(Pago)session.get(Pago.class, pago.getIdPago());
                int numeroID=0;
                zip.zipArchivos(lista, ruta+"xml-timbrados/"+numeroID, Comprimir.Extension.ZIP);
                File envio=new File(ruta+"xml-timbrados/"+numeroID+".zip");
                if(envio.exists())
                {
                    //String mail=pago.getCorreoReceptor();  chava
                    /*EnviarCorreo en=null; chava
                    en= new EnviarCorreo(new javax.swing.JFrame(), true, mail,"Envío Factura", "Hola buen día, envío XML y PDF", envio, this.user, this.sessionPrograma);
                    Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
                    en.setLocation((d.width/2)-(en.getWidth()/2), (d.height/2)-(en.getHeight()/2));
                    en.setVisible(true);*/
                }
                else
                JOptionPane.showMessageDialog(null, "Error al comprimir.");
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, "Error al comprimir.");
            }
            finally
            {
                if(session!=null)
                if(session.isOpen())
                session.close();
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No se encontraron los archivos");
        }
    }//GEN-LAST:event_b_emailActionPerformed

    private void b_mas1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_mas1ActionPerformed
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            buscaPago obj = new buscaPago(new javax.swing.JFrame(), true, this.sessionPrograma, this.user, 0, configuracion);
            obj.t_busca.requestFocus();
            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
            obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
            obj.setVisible(true);
            Pago aux=obj.getReturnStatus();
            if(aux!=null && busca_relacion(aux.getFFiscal())==false)
            {
                if(aux.getFFiscal()!=null && aux.getFFiscal().compareTo("")!=0)
                {
                    aux=(Pago)session.get(Pago.class, aux.getIdPago());
                    Relacion r_nuevo=new Relacion();
                    r_nuevo.setPagoByIdPago(pago);
                    r_nuevo.setPagoByRelacionPago(aux);
                    int id = (int)session.save(r_nuevo);
                    DefaultTableModel temp = (DefaultTableModel) t_relacionados.getModel();
                    Object nuevo[]= {id,aux.getFFiscal(),"Pago", r_nuevo.getIdRelacion()};
                    temp.addRow(nuevo);
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "El documento no esta timbrado aun!");
                }
            }
            pago = (Pago)session.get(Pago.class, pago.getIdPago());
            session.beginTransaction().commit();
        }catch(Exception e)
        {
            session.beginTransaction().rollback();
            e.printStackTrace();
            evt=null;
        }
        finally
        {
            if(session!=null)
            if(session.isOpen())
            session.close();
        }
    }//GEN-LAST:event_b_mas1ActionPerformed

    private void b_menos1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_menos1ActionPerformed
        if(t_relacionados.getRowCount()>0 && t_relacionados.getSelectedRowCount()>=0)
        {
            Session session = HibernateUtil.getSessionFactory().openSession();
            try
            {
                session.beginTransaction().begin();
                pago = (Pago)session.get(Pago.class, pago.getIdPago());
                DefaultTableModel temp = (DefaultTableModel) t_relacionados.getModel();
                int [] renglones=t_relacionados.getSelectedRows();
                for(int x=0; x<renglones.length; x++)
                {
                    Relacion r_elimina=(Relacion)session.get(Relacion.class, Integer.parseInt(t_relacionados.getValueAt(renglones[x]-x, 0).toString()));
                    session.delete(r_elimina);
                    temp.removeRow(renglones[x]-x);
                }
                session.beginTransaction().commit();
            }catch(Exception e)
            {
                session.beginTransaction().rollback();
                e.printStackTrace();
            }
            finally
            {
                if(session!=null)
                if(session.isOpen())
                session.close();
            }
        }
    }//GEN-LAST:event_b_menos1ActionPerformed

    private void b_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_actualizarActionPerformed
        // TODO add your handling code here:
        Session session = HibernateUtil.getSessionFactory().openSession();
        try{
            String [] campos = t_fecha.getText().split("-");
            Calendar calendario = Calendar.getInstance();
            calendario.set(Calendar.MONTH, Integer.parseInt(campos[1])-1);
            calendario.set(Calendar.YEAR, Integer.parseInt(campos[2]));
            calendario.set(Calendar.DAY_OF_MONTH, Integer.parseInt(campos[0]));
                                
            DocumentoPago docPago;
            session.beginTransaction().begin();
            pago=(Pago)session.get(Pago.class, pago.getIdPago());
            pago.setFormaPago(c_forma_pago.getSelectedItem().toString());
            pago.setFechaPago(calendario.getTime());
            pago.setReferencia(t_referencia.getText());
            pago.setCorreoReceptor(t_correo_receptor.getText());
            session.update(pago);
            session.beginTransaction().commit();
            JOptionPane.showMessageDialog(null, "Datos Actualizados");
        }catch(Exception e){
            session.beginTransaction().rollback();
            e.printStackTrace();
            evt=null;
        }
        finally
        {
            if(session!=null)
                if(session.isOpen())
                    session.close();
        }
    }//GEN-LAST:event_b_actualizarActionPerformed

    private void b_generarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_generarActionPerformed
        // TODO add your handling code here:
        if(t_cliente.getText().trim().compareTo("")!=0)
        {
            if(t_rfc.getText().trim().compareTo("")!=0)
            {
                if(t_direccion.getText().trim().compareTo("")!=0)
                {
                    if(t_colonia.getText().trim().compareTo("")!=0)
                    {
                        if(c_estado.getSelectedIndex()>=0)
                        {
                            if(c_pais.getSelectedIndex()>=0)
                            {
                                if(t_cp.getText().trim().compareTo("")!=0)
                                {
                                    if(t_municipio.getText().trim().compareTo("")!=0)
                                    {
                                        if(t_datos.getRowCount()>0)
                                        {
                                            if(t_correo_receptor.getText().trim().compareTo("")!=0)
                                            {
                                                bandera=false;
                                                habilita(false, false);
                                                progreso.setIndeterminate(true);
                                                progreso.setString("Conectando al servidor SAT Espere");
                                                facturaElectronica();
                                            }
                                            else
                                            {
                                                //contenedor.setSelectedIndex(2); chava
                                                JOptionPane.showMessageDialog(null, "Debes ingresar el correo del receptor");
                                                t_correo_receptor.requestFocus();
                                            }
                                        }
                                        else
                                        {
                                            //contenedor.setSelectedIndex(1);
                                            JOptionPane.showMessageDialog(null, "Debes ingresar el tipo de combio");
                                            //t_tipo_cambio.requestFocus(); chava
                                        }
                                    }
                                    else
                                    {
                                        //contenedor.setSelectedIndex(0);  chava
                                        JOptionPane.showMessageDialog(null, "Debes ingresar el municipio del receptor");
                                        t_municipio.requestFocus();
                                    }
                                }
                                else
                                {
                                    //contenedor.setSelectedIndex(0); chava
                                    JOptionPane.showMessageDialog(null, "Debes ingresar el cp del receptor");
                                    t_cp.requestFocus();
                                }
                            }
                            else
                            {
                                //contenedor.setSelectedIndex(0);  chava
                                JOptionPane.showMessageDialog(null, "Debes ingresar el pais del receptor");
                                c_pais.requestFocus();
                            }
                        }
                        else
                        {
                            //contenedor.setSelectedIndex(0); chava
                            JOptionPane.showMessageDialog(null, "Debes ingresar el estado del del receptor");
                            c_estado.requestFocus();
                        }
                    }
                    else
                    {
                        //contenedor.setSelectedIndex(0); chava
                        JOptionPane.showMessageDialog(null, "Debes ingresar la colonia del receptor");
                        t_colonia.requestFocus();
                    }
                }
                else
                {
                    //contenedor.setSelectedIndex(0); chava
                    JOptionPane.showMessageDialog(null, "Debes ingresar la calle del receptor");
                    //t_calle.requestFocus(); chava
                }
            }
            else
            {
                //contenedor.setSelectedIndex(0); chava
                JOptionPane.showMessageDialog(null, "Debes ingresar el RFC receptor");
                t_rfc.requestFocus();
            }
        }
        else
        {
            //contenedor.setSelectedIndex(0); chava
            JOptionPane.showMessageDialog(null, "Debes ingresar la razón social del receptor");
            //t_social.requestFocus(); chava
        }
    }//GEN-LAST:event_b_generarActionPerformed

    private void b_salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_salirActionPerformed
        // TODO add your handling code here:
        //doClose(factura); chava
    }//GEN-LAST:event_b_salirActionPerformed

    private void t_correo_receptorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_correo_receptorKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_t_correo_receptorKeyTyped

    private void t_pagadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_pagadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t_pagadoActionPerformed

    private void c_forma_pagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c_forma_pagoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_c_forma_pagoActionPerformed

    private void t_municipioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_municipioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t_municipioActionPerformed

    private void t_referenciaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_referenciaKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_t_referenciaKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_actualizar;
    private javax.swing.JButton b_email;
    private javax.swing.JButton b_fecha;
    private javax.swing.JButton b_generar;
    private javax.swing.JButton b_mas1;
    private javax.swing.JButton b_mas2;
    private javax.swing.JButton b_menos1;
    private javax.swing.JButton b_menos2;
    private javax.swing.JButton b_pdf;
    private javax.swing.JButton b_salir;
    private javax.swing.JButton b_xml;
    private javax.swing.JComboBox c_estado;
    private javax.swing.JComboBox c_forma_pago;
    private javax.swing.JComboBox c_pais;
    private javax.swing.JTabbedPane contenedor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel l_emisor;
    private javax.swing.JLabel l_rfc_emisor;
    private javax.swing.JPanel p_botones;
    private javax.swing.JPanel p_cliente;
    private javax.swing.JPanel p_informacion;
    private javax.swing.JProgressBar progreso;
    private javax.swing.JTextField t_cliente;
    private javax.swing.JTextField t_colonia;
    private javax.swing.JTextField t_correo_receptor;
    private javax.swing.JTextField t_cp;
    private javax.swing.JTable t_datos;
    private javax.swing.JTextField t_direccion;
    private javax.swing.JTextField t_fecha;
    private javax.swing.JTextField t_folio_factura;
    private javax.swing.JTextField t_id;
    private javax.swing.JTextField t_municipio;
    private javax.swing.JTextField t_numero_exterior;
    private javax.swing.JFormattedTextField t_pagado;
    private javax.swing.JTextField t_pdf;
    private javax.swing.JTextField t_referencia;
    private javax.swing.JTable t_relacionados;
    private javax.swing.JTextField t_rfc;
    private javax.swing.JTextField t_serie_factura;
    private javax.swing.JTextField t_uuid_factura;
    private javax.swing.JTextField t_xml;
    // End of variables declaration//GEN-END:variables

    public void borraCliente()
    {
        t_id.setText("");
        t_cliente.setText("");
        t_rfc.setText("");
        t_direccion.setText("");
        t_numero_exterior.setText("");
        t_colonia.setText("");
        t_municipio.setText("");
        t_cp.setText("");
        c_estado.setSelectedIndex(0);
        c_pais.setSelectedIndex(0);
        
    }
    public boolean XML_FINKOK(int folio, String serie, double version)
    {
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            error="";
            GregorianCalendar GC = new GregorianCalendar();
            GC.setTime(fecha_pago);
            
            session.beginTransaction().begin();
            pago=(Pago)session.get(Pago.class, pago.getIdPago());
            //Configuracion config=(Configuracion)session.get(Configuracion.class, 2);
            BigDecimal valorIva=new BigDecimal(0.0d);
            
                finkok33.ObjectFactory objeto = new finkok33.ObjectFactory();
                comprobante33 = objeto.createComprobante();

                comprobante33.setVersion(Constantes33.VERSION_COMPROBANTE_TRES);
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss");
                comprobante33.setFecha(sdf.format(fecha_pago));
                comprobante33.setSello(null);//Falta
                comprobante33.setNoCertificado(null);//Falta
                comprobante33.setCertificado(null);//Falta
                comprobante33.setSubTotal(new BigDecimal("0"));
                comprobante33.setMoneda(CMoneda.XXX);
                comprobante33.setTotal(new BigDecimal("0"));
                comprobante33.setTipoDeComprobante(CTipoDeComprobante.P);
                comprobante33.setLugarExpedicion(pago.getCpEmisor());
                comprobante33.setSerie(serie);
                comprobante33.setFolio(""+folio);//Falta
                
                
                //agregamos CFDI Enlazados checar
                if(t_relacionados.getRowCount()>0)
                {
                    finkok33.Comprobante.CfdiRelacionados relacion=new finkok33.Comprobante.CfdiRelacionados();
                    relacion.setTipoRelacion("04");
                    List <finkok33.Comprobante.CfdiRelacionados.CfdiRelacionado> lista_relacion=relacion.getCfdiRelacionado();
                    for(int w=0; w<t_relacionados.getRowCount(); w++)
                    {
                        finkok33.Comprobante.CfdiRelacionados.CfdiRelacionado elemento=new finkok33.Comprobante.CfdiRelacionados.CfdiRelacionado();
                        elemento.setUUID(t_relacionados.getValueAt(w, 1).toString());
                        lista_relacion.add(elemento);
                    }
                    comprobante33.setCfdiRelacionados(relacion);
                }
                
                    finkok33.Comprobante.Emisor emisor= objeto.createComprobanteEmisor();
                    emisor.setRfc(pago.getRfcEmisor());//Cambiar por config.getRfc()
                    if(pago.getNombreEmisor().compareTo("VICENTE PEREZ VILLAR.")==0)
                    {
                        emisor.setNombre(acentos("VICENTE PEREZ VILLAR"));
                        emisor.setRegimenFiscal("612");
                    }
                    else
                    {
                        emisor.setNombre(acentos(pago.getNombreEmisor()));
                        emisor.setRegimenFiscal("601");
                    }
                comprobante33.setEmisor(emisor);
                    finkok33.Comprobante.Receptor receptor=objeto.createComprobanteReceptor();
                    receptor.setRfc(t_rfc.getText());
                    receptor.setNombre(acentos(t_cliente.getText()));
                    receptor.setUsoCFDI(CUsoCFDI.P_01);
                comprobante33.setReceptor(receptor);
                    finkok33.Comprobante.Conceptos misConceptos = objeto.createComprobanteConceptos();     
                        finkok33.Comprobante.Conceptos.Concepto renglon= objeto.createComprobanteConceptosConcepto();
                        renglon.setCantidad(new BigDecimal("1"));
                        renglon.setClaveProdServ("84111506");
                        renglon.setClaveUnidad("ACT");
                        renglon.setDescripcion("Pago");
                        renglon.setImporte(new BigDecimal("0"));
                        renglon.setValorUnitario(new BigDecimal("0"));
                        misConceptos.getConcepto().add(renglon);
                comprobante33.setConceptos(misConceptos);
                
                //**Pago***
                
                Pagos10.ObjectFactory objeto1 = new Pagos10.ObjectFactory();
                Pagos10.Pagos cPago= objeto1.createPagos();
                cPago.setVersion("1.0");
                Pagos10.Pagos.Pago renglonPago= new Pagos10.Pagos.Pago();
                String [] campos = t_fecha.getText().split("-");
                renglonPago.setFechaPago(campos[2]+"-"+campos[1]+"-"+campos[0]+"T12:00:00");
                renglonPago.setFormaDePagoP(c_forma_pago.getSelectedItem().toString());
                renglonPago.setMonedaP(finkok33.CMoneda.MXN);
                renglonPago.setMonto(new BigDecimal(""+t_pagado.getValue().toString()).setScale(2, BigDecimal.ROUND_HALF_UP));
                if(t_referencia.getText().compareTo("")!=0)
                    renglonPago.setNumOperacion(t_referencia.getText());//no de transferencia
                List<Pagos10.Pagos.Pago.DoctoRelacionado> listaDocumentos = renglonPago.getDoctoRelacionado();
                for(int r=0; r<t_datos.getRowCount(); r++)
                {
                    Pagos10.Pagos.Pago.DoctoRelacionado docPago = new Pagos10.Pagos.Pago.DoctoRelacionado();
                    docPago.setIdDocumento(t_datos.getValueAt(r, 3).toString());
                    docPago.setSerie(t_datos.getValueAt(r, 1).toString());
                    docPago.setFolio(t_datos.getValueAt(r, 2).toString());
                    docPago.setMonedaDR(finkok33.CMoneda.MXN);
                    docPago.setMetodoDePagoDR(finkok33.CMetodoPago.PPD);
                    docPago.setNumParcialidad(new BigInteger("1"));
                    docPago.setImpSaldoAnt(new BigDecimal(t_datos.getValueAt(r, 6).toString()).setScale(2, BigDecimal.ROUND_HALF_UP));
                    docPago.setImpPagado(new BigDecimal(t_datos.getValueAt(r, 5).toString()).setScale(2, BigDecimal.ROUND_HALF_UP));
                    docPago.setImpSaldoInsoluto(new BigDecimal(t_datos.getValueAt(r, 7).toString()).setScale(2, BigDecimal.ROUND_HALF_UP));//saldo ant - monto pagado = lo que debe
                    listaDocumentos.add(docPago);
                }
                cPago.getPago().add(renglonPago);
                finkok33.Comprobante.Complemento complementoPago = objeto.createComprobanteComplemento();
                complementoPago.getAny().add(cPago);
                comprobante33.getComplemento().add(complementoPago);
            return true;
        }
        catch(Exception e)
        {
            e.printStackTrace();
            return false;
        }
        finally
        {
            if(session!=null)
                if(session.isOpen())
                    session.close();
        }
    }
    
    public void consultaFacturaElectronica(File  arch){
        Session session = HibernateUtil.getSessionFactory().openSession();
        try{
            session.beginTransaction().begin();
            pago=(Pago)session.get(Pago.class, pago.getIdPago());
            int numeroID=0;
            Configuracion config=(Configuracion)session.createCriteria(Configuracion.class).add(Restrictions.eq("empresa", pago.getNombreEmisor())).setMaxResults(1).uniqueResult();
            int folio=pago.getFolio();
            String serie=pago.getSerie();
            if(XML_FINKOK(folio, serie, config.getVersion())==true)
            {
                GeneradorSelloDigital generadorsello = new GeneradorSelloDigital();
                if(config.getCer()!=null && config.getCer().compareTo("")!=0)
                {
                    if(config.getClave()!=null && config.getClave().compareTo("")!=0)
                    {
                        String cadena="";
                        String[] certificado=generadorsello.getCertificado(ruta+"config/"+config.getCer());
                        if(certificado[0].compareTo("1")==0)
                        {
                            comprobante33.setNoCertificado(certificado[2]);
                            comprobante33.setCertificado(certificado[3]);
                            
                            String[] getSello;
                            
                            timbrar.CadenaOriginal33 cOriginal= new timbrar.CadenaOriginal33(comprobante33); 
                            cadena = cOriginal.getCadena();
                            getSello = generadorsello.getSelloDigital33(cadena, config.getClave(), ruta+"config/"+config.getLlave());
                            
                            if(getSello[0].compareTo("1")==0)
                            {
                                String sello=getSello[1];
                                FinkokJavaToXML xml= new FinkokJavaToXML();
                                boolean genero=false;
                                comprobante33.setSello(sello);
                                genero = xml.convierteXML(comprobante33, ruta+"nativos/"+folio+"-"+config.getRfc()+"nativo-p.xml");
                                
                                if(genero==true)
                                {
                                    ApiTurbo api1=new ApiTurbo(ruta);
                                    ArrayList datos=new ArrayList();
                                    datos.add(config.getEmailFinkok());
                                    datos.add(config.getClaveFinkok());
                                    datos.add(folio+"-"+config.getRfc()+"nativo-p.xml");//nombre del archivo nativo
                                    datos.add(pago.getRfcEmisor()+"_"+serie+"_"+folio+"_"+t_rfc.getText()+"-p.xml");//nombre del archivo timbrado
                                    ArrayList guarda=api1.llamarSoapConsulta(datos);
                                    switch(guarda.get(0).toString())
                                    {
                                        case "1"://Se timbro correcto
                                            pago=(Pago)session.get(Pago.class, pago.getIdPago());
                                            pago.setFecha(fecha_pago);
                                            pago.setEstadoFactura(guarda.get(1).toString());
                                            pago.setEstatus(guarda.get(2).toString());
                                            pago.setFFiscal(guarda.get(3).toString());
                                            pago.setFechaFiscal(guarda.get(4).toString());
                                            pago.setSerie(serie);
                                            pago.setFolio(folio);
                                            pago.setNombreDocumento(pago.getRfcEmisor()+"_"+serie.toLowerCase()+"_"+folio+"_"+t_rfc.getText()+"-p");
                                            session.update(pago);
                                            session.beginTransaction().commit();

                                            progreso.setString("Listo");
                                            progreso.setIndeterminate(false);
                                            if(session.isOpen())
                                                session.close();
                                            //guarda(); chava
                                            //consulta();  chava
                                            arch=new File(ruta+"xml-timbrados/"+pago.getRfcEmisor()+"_"+serie+"_"+folio+"_"+t_rfc.getText()+"-p.xml");
                                            Desktop.getDesktop().open(arch);
                                            break;

                                        case "0"://Hay error local
                                            ArrayList lista=(ArrayList)guarda.get(1);
                                            String error="Error";
                                            for(int x=0; x<lista.size(); x++)
                                            {
                                                ArrayList inc=(ArrayList)lista.get(x);
                                                error+="Error: ";
                                                for(int y=0; y<inc.size(); y++)
                                                {
                                                    error+=lista.get(0)+" ";
                                                }
                                                error+="\n";
                                            }
                                            progreso.setString("Listo");
                                            progreso.setIndeterminate(false);
                                            JOptionPane.showMessageDialog(null, error);
                                            break;

                                        case "-1"://Hay error en el SAP
                                            progreso.setString("Listo");
                                            progreso.setIndeterminate(false);
                                            JOptionPane.showMessageDialog(null, guarda.get(1).toString());
                                            break;
                                    }
                                }
                                else
                                {
                                    progreso.setString("Listo");
                                    progreso.setIndeterminate(false);
                                    JOptionPane.showMessageDialog(null, "Error al generar el XML.-"+error);
                                }
                            }
                            else
                            {
                                progreso.setString("Listo");
                                progreso.setIndeterminate(false);
                                JOptionPane.showMessageDialog(null, getSello[1]);
                            }
                        }
                        else
                        {
                            progreso.setString("Listo");
                            progreso.setIndeterminate(false);
                            JOptionPane.showMessageDialog(null, certificado[1]);
                        }
                    }
                    else
                    {
                        progreso.setString("Listo");
                        progreso.setIndeterminate(false);
                        JOptionPane.showMessageDialog(null, "Falta la clave del Archivo CER");
                    }
                }
                else
                {
                    progreso.setString("Listo");
                    progreso.setIndeterminate(false);
                    JOptionPane.showMessageDialog(null, "Falta agrerar el archivo CER");
                }
            }
            else
            {
                progreso.setString("Listo");
                progreso.setIndeterminate(false);
                JOptionPane.showMessageDialog(null, "Error al generar el XML.-"+error);
            }
        }catch(Exception e)
        {
            habilita(true, false);
            progreso.setString("Listo");
            progreso.setIndeterminate(false);
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al abrir el archivo de configuración..");
        }
        finally
        {
            if(session!=null)
                if(session.isOpen())
                    session.close();
        }
    }
    
    void habilita(boolean edo, boolean edo2)
    {
        b_fecha.setEnabled(edo);
        b_mas2.setEnabled(edo);
        b_menos2.setEnabled(edo);
        b_mas1.setEnabled(edo);
        b_menos1.setEnabled(edo);
        c_forma_pago.setEnabled(edo);
        t_referencia.setEnabled(edo);
        t_correo_receptor.setEnabled(edo);
        
        b_xml.setEnabled(edo2);
        b_pdf.setEnabled(edo2);
        b_email.setEnabled(edo2);
        
        b_actualizar.setEnabled(edo);
        if(edo==false)
            b_generar.setEnabled(edo);
        else
            b_generar.setEnabled(permiso);
    }
    boolean busca_relacion(String aux)
    {
        if(aux!=null)
        {
            for(int x=0; x<t_relacionados.getRowCount(); x++)
            {
                if(t_relacionados.getValueAt(x, 1).toString().compareTo(aux)==0)
                    return true;
            }
            return false;
        }
        else
            return false;
        
    }
    
    public void consulta()
    {
        borraCliente();
        formatoTablaRelacionados();
        if (pago!=null)
        {
            Session session = HibernateUtil.getSessionFactory().openSession();
            try 
            {
                session.beginTransaction().begin();
                pago = (Pago)session.get(Pago.class, pago.getIdPago()); 
                //Emisor
                l_emisor.setText(pago.getNombreEmisor());
                l_rfc_emisor.setText(pago.getRfcEmisor());
                //Receptor
                t_cliente.setText(acentos(pago.getNombreReceptor().trim()));
                t_rfc.setText(pago.getRfcReceptor().trim());
                t_direccion.setText(acentos(pago.getCalleReceptor().trim()));
                t_numero_exterior.setText(pago.getNumeroExteriorReceptor().trim());
                t_cp.setText(pago.getCpReceptor().trim());
                t_colonia.setText(acentos(pago.getColoniaReceptor().trim()));
                t_municipio.setText(acentos(pago.getMunicipioReceptor().trim()));
                c_estado.setSelectedItem(acentos(pago.getEstadoReceptor()));
                c_pais.setSelectedItem(acentos(pago.getPaisReceptor()));
                c_forma_pago.setSelectedItem(pago.getFormaPago());
                t_referencia.setText(pago.getReferencia());
                if(pago.getFechaPago()!=null)
                {
                    SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");//YYYY-MM-DD HH:MM:SS
                    t_fecha.setText(dateFormat.format(pago.getFechaPago()));
                }
                
                //Fecha
                if(pago.getFFiscal()==null)
                {
                    long mFactura, mActual, diff;
                    Date actual=new Date();
                    Calendar cFactura = Calendar.getInstance();
                    Calendar cActual = Calendar.getInstance();
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");

                    cFactura.setTime(pago.getFecha());
                    cActual.setTime(actual);
                    mFactura = cFactura.getTimeInMillis();
                    mActual = cActual.getTimeInMillis();
                    diff = mActual-mFactura;
                    long diffMinutos =  Math.abs (diff / (60 * 1000));
                    if(diffMinutos > 4320)
                        fecha_pago=new Date();
                    else
                        fecha_pago=pago.getFecha();
                }
                else
                    fecha_pago=pago.getFecha();

                Configuracion config=(Configuracion)session.createCriteria(Configuracion.class).add(Restrictions.eq("empresa", pago.getNombreEmisor())).setMaxResults(1).uniqueResult();
                
                
                if(pago.getCorreoReceptor()!=null)
                    t_correo_receptor.setText(pago.getCorreoReceptor().trim());
                else
                    t_correo_receptor.setText("");
                
                //Documentos
                DocumentoPago[] partidas = (DocumentoPago[])session.createCriteria(DocumentoPago.class).
                                        add(Restrictions.eq("pago.idPago", pago.getIdPago())).
                                        addOrder(Order.asc("idDocumentoPago")).list().toArray(new DocumentoPago[0]);
                
                Factura aux;
                t_datos.setModel(ModeloTablaReporte(0, new String [] {
                "Id", "Serie", "Folio", "UUID", "Parcialidad", "Imp. Pag", "Saldo Ant", "Saldo Insol."
            }));
                for(int a=0; a<partidas.length; a++)
                {
                    aux=partidas[a].getFactura();
                    String folio="", serie="";
                    if(aux.getVersion()==3.3)
                    {
                        serie=aux.getSerieExterno();
                        folio=""+aux.getFolioExterno();
                    }
                    else
                    {
                        serie=aux.getSerie();
                        folio=aux.getFolio();
                    }
                    model.addRow(
                            new Object[]
                            {
                                partidas[a].getIdDocumentoPago(),
                                serie,
                                folio,
                                aux.getFFiscal(), 
                                partidas[a].getParcialidad(),
                                partidas[a].getImporte(),
                                partidas[a].getSaldoAnterior(),
                                partidas[a].getSaldoInsoluto()
                            });
                }
                formatoTabla();
                sumaTotales();
                
                DefaultTableModel temp = (DefaultTableModel) t_relacionados.getModel();
                
                Relacion[] r_pago=(Relacion[])session.createCriteria(Relacion.class).
                                    add(Restrictions.eq("pagoByRelacionPago.idPago", pago.getIdPago())).
                                    addOrder(Order.asc("idRelacion")).list().toArray(new Relacion[0]);
                temp.setRowCount(0);
                for(int ren=0; ren<r_pago.length; ren++)
                {
                    Pago p_relacion= r_pago[ren].getPagoByRelacionPago();
                    if(p_relacion!=null)
                    {
                        Object nuevo[]= {p_relacion.getIdPago(),p_relacion.getFFiscal(),"Pagos", r_pago[ren].getIdRelacion()};
                        temp.addRow(nuevo);
                    }
                }
                
                if(pago.getEstadoFactura().compareTo("Facturado")==0)
                {
                    if(pago.getSerie()!=null)
                        t_serie_factura.setText(pago.getSerie());
                    if(pago.getFolio()!=null)
                        t_folio_factura.setText(""+pago.getFolio());
                    if(pago.getNombreDocumento()!=null)
                    {
                        t_xml.setText(pago.getNombreDocumento()+".xml");
                        t_pdf.setText(pago.getNombreDocumento()+".pdf");
                    }
                    if(pago.getFFiscal()!=null)
                        this.t_uuid_factura.setText(pago.getFFiscal());
                    contenedor.setSelectedIndex(2);
                    if(this.user.getAutorizarFactura()==true)
                        permiso=true;
                    else
                        permiso=false;
                    this.habilita(false, true); 
                }
                else
                {
                    if(pago.getEstadoFactura().compareTo("Cancelado")==0)
                    {
                        if(pago.getSerie()!=null)
                            t_serie_factura.setText(pago.getSerie());
                        if(pago.getFolio()!=null)
                            t_folio_factura.setText(""+pago.getFolio());
                        if(pago.getNombreDocumento()!=null)
                        {
                            t_xml.setText(pago.getNombreDocumento()+".xml");
                            t_pdf.setText(pago.getNombreDocumento()+".pdf");
                        }
                        if(pago.getFFiscal()!=null)
                            this.t_uuid_factura.setText(pago.getFFiscal());
                        permiso=false;
                        this.habilita(false, false);
                    }
                    else
                    {
                        b_actualizar.setEnabled(true);
                        if(this.user.getAutorizarFactura()==true)
                            permiso=true;
                        else
                            permiso=false;
                        this.habilita(true, false);
                    }
                }
                session.beginTransaction().commit();
            }
            catch (HibernateException he) 
            {
                he.printStackTrace();
                session.getTransaction().rollback();
                permiso=false;
                this.habilita(true, false);
                JOptionPane.showMessageDialog(null, "Error al consultar la factura");
                this.dispose();
            }
            finally
            {
                if(session!=null)
                    if(session.isOpen())
                        session.close();
            }
        }
        else
        {
            borraCliente();
            this.dispose();
        }
    }

    public void formatoTabla()
    {
        Color c1 = new java.awt.Color(2, 135, 242);   
        for(int x=0; x<t_datos.getColumnModel().getColumnCount(); x++)
            t_datos.getColumnModel().getColumn(x).setHeaderRenderer(new Render1(c1));
        tabla_tamaños();
        t_datos.setShowVerticalLines(true);
        t_datos.setShowHorizontalLines(true);
        t_datos.setDefaultRenderer(Double.class, formato); 
        t_datos.setDefaultRenderer(Integer.class, formato);
        t_datos.setDefaultRenderer(String.class, formato);
    }
    
    public void tabla_tamaños()
    {
        TableColumnModel col_model = t_datos.getColumnModel();
        FormatoEditor fe=new FormatoEditor();
        t_datos.setDefaultEditor(Double.class, fe);
        for (int i=0; i<t_datos.getColumnCount(); i++)
        {
  	      TableColumn column = col_model.getColumn(i);
              switch(i)
              {
                  case 0:
                      column.setPreferredWidth(20);
                      break;
                  case 1:
                      column.setPreferredWidth(20);
                      break;
                  case 2:
                      column.setPreferredWidth(30);
                      break;
                  case 3:
                      column.setPreferredWidth(350);
                      break;
                  case 4:
                      column.setPreferredWidth(20);
                      break;
                  case 5:
                      column.setPreferredWidth(40);
                      break;
                  case 6:
                      column.setPreferredWidth(40);
                      break;
                  case 7:
                      column.setPreferredWidth(40);
                      break;
                  default:
                      column.setPreferredWidth(40);
                      break;
              }
        }
        JTableHeader header = t_datos.getTableHeader();
        header.setForeground(Color.white);
    }
    
    public void sumaTotales()
    {
        try{
            double total=0.0;
            for(int ren=0; ren<t_datos.getRowCount(); ren++){
                total+=(double)t_datos.getValueAt(ren, 5);
            }
            t_pagado.setValue(total);
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }
    
    public void tabla_tamanios_relacionados()
    {
        TableColumnModel col_model = t_relacionados.getColumnModel();
        for (int i=0; i<t_relacionados.getColumnCount(); i++)
        {
  	      TableColumn column = col_model.getColumn(i);
              switch(i)
              {
                  case 0:
                      column.setPreferredWidth(90);
                      break;
                  case 1:
                      column.setPreferredWidth(250);
                      break;
                  case 2:
                      column.setPreferredWidth(150);
                      break;
                  case 3:
                      column.setPreferredWidth(100);
                      break;
                  default:
                      column.setPreferredWidth(30);
                      break;
              }
        }
        JTableHeader header = t_relacionados.getTableHeader();
        header.setForeground(Color.white);
    }
    
    public void formatoTablaRelacionados()
    {
        Color c1 = new java.awt.Color(2, 135, 242);   
        for(int x=0; x<t_relacionados.getColumnModel().getColumnCount(); x++)
            t_relacionados.getColumnModel().getColumn(x).setHeaderRenderer(new Render1(c1));
        tabla_tamanios_relacionados();
        t_relacionados.setShowVerticalLines(true);
        t_relacionados.setShowHorizontalLines(true);
        t_relacionados.setDefaultRenderer(Double.class, formato); 
        t_relacionados.setDefaultRenderer(Integer.class, formato);
    }
    
    DefaultTableModel ModeloTablaReporte(int renglones, String columnas[])
    {
        model = new DefaultTableModel(new Object [renglones][8], columnas)
        {
            Class[] types = new Class [] {
                java.lang.Integer.class,
                java.lang.String.class, 
                java.lang.Integer.class, 
                java.lang.String.class, 
                java.lang.Integer.class, 
                java.lang.Double.class, 
                java.lang.Double.class,
                java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false, false
            };

            public void setValueAt(Object value, int row, int col)
             {
                    Vector vector = (Vector)this.dataVector.elementAt(row);
                    Object celda = ((Vector)this.dataVector.elementAt(row)).elementAt(col);
                    switch(col)
                    {
                        case 5:
                                if(vector.get(col)==null)
                                {
                                    vector.setElementAt(value, col);
                                    this.dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                }
                                else
                                {
                                    Session session = HibernateUtil.getSessionFactory().openSession();
                                    try 
                                    {
                                        session.beginTransaction().begin();
                                        if((double)value > 0.0d && (double)value <= (double)t_datos.getValueAt(row, 6))
                                        {
                                            double total = (double)t_datos.getValueAt(row, 6) - (double)value;
                                            DocumentoPago con = (DocumentoPago)session.get(DocumentoPago.class, Integer.parseInt(t_datos.getValueAt(row, 0).toString()));
                                            con.setImporte((double)value);
                                            con.setSaldoInsoluto(total);
                                            session.update(con);
                                            session.beginTransaction().commit();
                                            
                                            vector.setElementAt(value, col);
                                            this.dataVector.setElementAt(vector, row);
                                            fireTableCellUpdated(row, col);
                                            t_datos.setValueAt(total, row, 7);
                                            sumaTotales();
                                        }
                                    }catch(Exception e)
                                    {
                                        session.beginTransaction().rollback();
                                        e.printStackTrace();
                                        JOptionPane.showMessageDialog(null, "Error al almacenar los datos");
                                    }
                                    finally
                                    {
                                        if(session!=null)
                                            if(session.isOpen())
                                                session.close();
                                    }
                                }
                                sumaTotales();
                                break;
                        default:
                                vector.setElementAt(value, col);
                                this.dataVector.setElementAt(vector, row);
                                fireTableCellUpdated(row, col);
                                break;
                    }
                }

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        return model;
    }
    
    boolean busca_lista(String aux)
    {
        if(aux!=null)
        {
            for(int x=0; x<t_datos.getRowCount(); x++)
            {
                if(t_datos.getValueAt(x, 0).toString().compareTo(aux)==0)
                    return true;
            }
            return false;
        }
        else
            return false;
        
    }
    
    public void facturaElectronica()
    {
        Session session = HibernateUtil.getSessionFactory().openSession();
        try{
            session.beginTransaction().begin();
            pago=(Pago)session.get(Pago.class, pago.getIdPago());
            Configuracion config=(Configuracion)session.createCriteria(Configuracion.class).add(Restrictions.eq("empresa", pago.getNombreEmisor())).setMaxResults(1).uniqueResult();
            String serie=config.getSerie2();
            double version=config.getVersion();
            
            int folio=1;
            if(t_folio_factura.getText().compareTo("")==0)
            {
                //quitar 
                Query maximo = session.createSQLQuery("select if(max(folio) is null, 1, max(folio)+1) as folio from pago where rfc_emisor='"+pago.getRfcEmisor()+"' and serie='"+serie+"';");
                maximo.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
                ArrayList list_maximo=(ArrayList)maximo.list();
                if(list_maximo.size()>0)
                {
                    java.util.HashMap map=(java.util.HashMap)list_maximo.get(0);
                    folio = Integer.parseInt(map.get("folio").toString());
                }
            }
            else{
                folio=Integer.parseInt(t_folio_factura.getText());
            }
            if(XML_FINKOK(folio, serie, version)==true)
            {
                GeneradorSelloDigital generadorsello = new GeneradorSelloDigital();
                if(config.getCer()!=null && config.getCer().compareTo("")!=0)
                {
                    if(config.getClave()!=null && config.getClave().compareTo("")!=0)
                    {
                        String cadena="";
                        String[] certificado=generadorsello.getCertificado(ruta+"config/"+config.getCer());
                        if(certificado[0].compareTo("1")==0)
                        {
                            comprobante33.setNoCertificado(certificado[2]);
                            comprobante33.setCertificado(certificado[3]);
                            String[] getSello;
                            timbrar.CadenaOriginal33 cOriginal= new timbrar.CadenaOriginal33(comprobante33); 
                            cadena = cOriginal.getCadena();
                            System.out.println("Cadena:"+cadena);
                            System.out.println("LLave"+config.getClave());
                            System.out.println(ruta+"config/"+config.getLlave());
                            getSello = generadorsello.getSelloDigital33(cadena, config.getClave(), ruta+"config/"+config.getLlave());
                            
                            if(getSello[0].compareTo("1")==0)
                            {
                                String sello=getSello[1];
                                FinkokJavaToXML xml= new FinkokJavaToXML();
                                boolean genero=false;
                                comprobante33.setSello(sello);
                                genero = xml.convierteXML(comprobante33, ruta+"nativos/"+folio+"-"+config.getRfc()+"nativo-p.xml");

                                if(genero==true)
                                {
                                    ApiTurbo api1=new ApiTurbo(ruta);
                                    ArrayList datos=new ArrayList();
                                    datos.add(config.getEmailFinkok());
                                    datos.add(config.getClaveFinkok());
                                    datos.add(folio+"-"+config.getRfc()+"nativo-p.xml");//nombre del archivo nativo
                                    datos.add(pago.getRfcEmisor()+"_"+serie.toLowerCase()+"_"+folio+"_"+t_rfc.getText()+"-p.xml");//nombre del archivo timbrado

                                    ArrayList guarda=api1.llamarSoapTimbre(datos);
                                    switch(guarda.get(0).toString())
                                    {
                                        case "1"://Se timbro correcto
                                            Pago pago1=(Pago)session.get(Pago.class, pago.getIdPago());
                                            pago1.setFecha(fecha_pago);
                                            pago1.setEstadoFactura(guarda.get(1).toString());
                                            pago1.setEstatus(guarda.get(2).toString());
                                            pago1.setFFiscal(guarda.get(3).toString());
                                            pago1.setFechaFiscal(guarda.get(4).toString());
                                            pago1.setSerie(serie);
                                            pago1.setFolio(folio);
                                            pago1.setNombreDocumento(pago.getRfcEmisor()+"_"+serie.toLowerCase()+"_"+folio+"_"+t_rfc.getText()+"-p");
                                            pago1.setCertificadoEmisor(certificado[2]);
                                            pago1.setCertificadoSat(guarda.get(9).toString());
                                            pago1.setSelloSat(guarda.get(8).toString());
                                            pago1.setSelloCfdi(sello);

                                            session.update(pago1);
                                            session.beginTransaction().commit();
                                            session.beginTransaction().commit();

                                            if(session.isOpen())
                                                session.close();
                                            Formatos formato_pdf = new Formatos(this.user, this.sessionPrograma, pago1,configuracion);
                                            formato_pdf.pago();
                                            habilita(true, false);
                                            progreso.setString("Listo");
                                            progreso.setIndeterminate(false);
                                            b_actualizarActionPerformed(null);
                                            consulta();
                                            break;

                                        case "0"://Hay error local
                                            ArrayList lista=(ArrayList)guarda.get(1);
                                            String error="Error:";
                                            for(int x=0; x<lista.size(); x++)
                                            {
                                                error+=lista.get(x).toString()+" ";
                                                error+="\n";
                                            }
                                            habilita(true, false);
                                            progreso.setString("Listo");
                                            progreso.setIndeterminate(false);
                                            JOptionPane.showMessageDialog(null, error);
                                            break;

                                        case "-1"://Hay error en el SAP
                                            habilita(true, false);
                                            progreso.setString("Listo");
                                            progreso.setIndeterminate(false);
                                            JOptionPane.showMessageDialog(null, guarda.get(1).toString());
                                            break;
                                    }
                                }
                                else
                                {
                                    habilita(true, false);
                                    progreso.setString("Listo");
                                    progreso.setIndeterminate(false);
                                    JOptionPane.showMessageDialog(null, "Error al generar el XML.-"+error);
                                }
                            }
                            else
                            {
                                habilita(true, false);
                                progreso.setString("Listo");
                                progreso.setIndeterminate(false);
                                JOptionPane.showMessageDialog(null, getSello[1]);
                            }
                        }
                        else
                        {
                            habilita(true, false);
                            progreso.setString("Listo");
                            progreso.setIndeterminate(false);
                            JOptionPane.showMessageDialog(null, certificado[1]);
                        }
                    }
                    else
                    {
                        habilita(true, false);
                        progreso.setString("Listo");
                        progreso.setIndeterminate(false);
                        JOptionPane.showMessageDialog(null, "Falta la clave del Archivo CER");
                    }
                }
                else
                {
                    habilita(true, false);
                    progreso.setString("Listo");
                    progreso.setIndeterminate(false);
                    JOptionPane.showMessageDialog(null, "Falta agrerar el archivo CER");
                }
            }
            else
            {
                habilita(true, false);
                progreso.setString("Listo");
                progreso.setIndeterminate(false);
                JOptionPane.showMessageDialog(null, "Error al generar el XML.-"+error);
            }
            bandera=true;
        }
        catch(Exception e)
        {
            bandera=true;
            habilita(true, false);
            progreso.setString("Listo");
            progreso.setIndeterminate(false);
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al abrir el archivo de configuración..");
        }
        finally
        {
            if(session!=null)
                if(session.isOpen())
                    session.close();
        }
    }
}
