/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Contabilidad;

import Clientes.altaCliente;
import Clientes.buscaCliente;
import Compania.buscaCompania;
import Hibernate.Util.HibernateUtil;
import Hibernate.entidades.Adicionales;
import Hibernate.entidades.Clientes;
import Hibernate.entidades.Compania;
import Hibernate.entidades.Concepto;
import Hibernate.entidades.Configuracion;
import Hibernate.entidades.DocumentoPago;
import Hibernate.entidades.Factura;
import Hibernate.entidades.Marca;
import Hibernate.entidades.Nota;
import Hibernate.entidades.Orden;
import Hibernate.entidades.OrdenExterna;
import Hibernate.entidades.Pago;
import Hibernate.entidades.Partida;
import Hibernate.entidades.ProductoServicio;
import Hibernate.entidades.Tipo;
import Hibernate.entidades.UsoCfdi;
import Hibernate.entidades.Usuario;
import Integral.Conexion;
import Integral.ExtensionFileFilter;
import Integral.FormatoEditor;
import Servicios.buscaOrden;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import Integral.FormatoTabla;
import Integral.Herramientas;
import Integral.Render1;
import Integral.calendario;
import Marca.buscaMarca;
import Tipo.buscaTipo;
import java.io.File;
import java.io.FileInputStream;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.DefaultCellEditor;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import sat.buscaUsoCfdi;
import sat.buscarProServicio;

/**
 *
 * @author salvador
 */
public class NuevoComprobante extends javax.swing.JPanel {

    FormatoTabla formato;
    Usuario user;
    String sessionPrograma;
    Herramientas h;
    public Orden orden_act=null;
    MyModel model;
    int iva=0;
    Factura factura=new Factura();
    String id_marca="";
    Conexion mysql;
    ArrayList orden=new ArrayList();
    Nota nota=new Nota();
    Class[] tipos;
    boolean[] editar;
    String[] columnas = new String [] {
                "Id","Folio","UUID","Parcialidad","Imp Pag","Saldo Ant","Saldo Insol."
            };
    int configuracion=1;
    
    /**
     * Creates new form altaFactura
     */
    public NuevoComprobante(Usuario u, String ses, int configuracion) {
        initComponents();
        user=u;
        sessionPrograma=ses;
        formato =new FormatoTabla();
        this.configuracion=configuracion;
        cargaEmpresas();
        asignaModelo();
        formatoTabla();
        this.p_datos_pago.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        alerta = new javax.swing.JDialog();
        jLabel21 = new javax.swing.JLabel();
        progreso = new javax.swing.JProgressBar();
        addendas = new javax.swing.JDialog();
        jLabel24 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        medida = new javax.swing.JComboBox();
        t_receptor = new javax.swing.JTextField();
        t_email = new javax.swing.JTextField();
        aviso = new javax.swing.JFileChooser();
        jButton2 = new javax.swing.JButton();
        cfdi = new javax.swing.JComboBox();
        l_marca = new javax.swing.JTextField();
        c_iva = new javax.swing.JComboBox();
        cb_iva = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        c_documento = new javax.swing.JComboBox();
        jLabel25 = new javax.swing.JLabel();
        c_emisor = new javax.swing.JComboBox();
        jLabel22 = new javax.swing.JLabel();
        t_noFactura = new javax.swing.JTextField();
        p_datos = new javax.swing.JPanel();
        p_orden = new javax.swing.JPanel();
        l_asegurado = new javax.swing.JLabel();
        t_asegurado = new javax.swing.JTextField();
        t_marca = new javax.swing.JTextField();
        t_tipo = new javax.swing.JTextField();
        t_serie = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        t_modelo = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        t_placas = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        t_poliza = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        t_siniestro = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        t_reporte = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        t_inc = new javax.swing.JTextField();
        b_marca = new javax.swing.JButton();
        b_tipo = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        t_km = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cb_sucursal = new javax.swing.JComboBox();
        t_orden = new javax.swing.JTextField();
        b_orden = new javax.swing.JButton();
        b_actualiza1 = new javax.swing.JButton();
        p_cliente = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        t_cliente = new javax.swing.JTextField();
        t_id = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        t_direccion = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        t_numero_exterior = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        t_colonia = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        t_cp = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        c_pais = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        c_estado = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        t_municipio = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        t_rfc = new javax.swing.JTextField();
        b_uso = new javax.swing.JButton();
        t_id_cfdi = new javax.swing.JTextField();
        t_descripcion_cfdi = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        c_cliente = new javax.swing.JComboBox();
        b_buscar = new javax.swing.JButton();
        b_buscar1 = new javax.swing.JButton();
        b_actualiza = new javax.swing.JButton();
        p_datos_pago = new javax.swing.JPanel();
        t_fecha = new javax.swing.JTextField();
        b_fecha = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        t_pagado = new javax.swing.JFormattedTextField();
        c_forma_pago = new javax.swing.JComboBox();
        jLabel31 = new javax.swing.JLabel();
        p_totales = new javax.swing.JPanel();
        p_iva = new javax.swing.JPanel();
        l_subtotal = new javax.swing.JLabel();
        t_subtotal = new javax.swing.JFormattedTextField();
        t_iva = new javax.swing.JFormattedTextField();
        l_iva = new javax.swing.JLabel();
        l_total = new javax.swing.JLabel();
        t_total = new javax.swing.JFormattedTextField();
        jPanel6 = new javax.swing.JPanel();
        b_guardar = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        b_mas = new javax.swing.JButton();
        b_menos = new javax.swing.JButton();
        l_descuento = new javax.swing.JLabel();
        t_descuento = new javax.swing.JFormattedTextField();
        b_claves = new javax.swing.JButton();
        l_iva2 = new javax.swing.JLabel();
        t_extra = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        t_datos = new javax.swing.JTable();

        alerta.setTitle("Conectando");
        alerta.setModalExclusionType(null);
        alerta.setModalityType(null);

        jLabel21.setFont(new java.awt.Font("Droid Sans", 3, 14)); // NOI18N
        jLabel21.setText("Generar Factura Electronica");

        javax.swing.GroupLayout alertaLayout = new javax.swing.GroupLayout(alerta.getContentPane());
        alerta.getContentPane().setLayout(alertaLayout);
        alertaLayout.setHorizontalGroup(
            alertaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alertaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, alertaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(progreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        alertaLayout.setVerticalGroup(
            alertaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alertaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addendas.setTitle("Facturacion Electrónica");
        addendas.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);

        jLabel24.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel24.setText("Selecciona la Addenda a utilizar para facturar");

        jButton1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton1.setText("Qualitas");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton4.setText("GNP");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton5.setText("General");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton6.setText("Alsea");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addendasLayout = new javax.swing.GroupLayout(addendas.getContentPane());
        addendas.getContentPane().setLayout(addendasLayout);
        addendasLayout.setHorizontalGroup(
            addendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addendasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addendasLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel24)
                        .addGroup(addendasLayout.createSequentialGroup()
                            .addComponent(jButton1)
                            .addGap(18, 18, 18)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addendasLayout.setVerticalGroup(
            addendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addendasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addendasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addendas.getAccessibleContext().setAccessibleParent(null);

        medida.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        medida.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PZAS", "LTS", "MTS", "CMS", "MMS", "GRS", "MLS", "KGS", "HRS", "MIN", "KIT", "FT", "LB", "JGO", "NA", "SERV" }));

        t_receptor.setText("jTextField1");

        t_email.setText("jTextField2");

        aviso.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        aviso.setDialogTitle("Examinar");

        jButton2.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton2.setText("Axa Talleres");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        cfdi.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        cfdi.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Buscar", "Cancelar" }));

        l_marca.setToolTipText("Marca de la unidad");
        l_marca.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        l_marca.setEnabled(false);

        c_iva.setFont(new java.awt.Font("Dialog", 0, 9)); // NOI18N
        c_iva.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "16", "0" }));

        cb_iva.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "16", "0" }));
        cb_iva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_ivaActionPerformed(evt);
            }
        });

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(254, 254, 254));

        jPanel2.setBackground(new java.awt.Color(2, 135, 242));

        jPanel3.setBackground(new java.awt.Color(2, 135, 242));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(2, 135, 242));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        jLabel27.setText("Tipo de Documento:");

        c_documento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECCIONAR", "Ingreso", "Egreso", "Pago" }));
        c_documento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_documentoActionPerformed(evt);
            }
        });

        jLabel25.setText("Emisor:");

        c_emisor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECCIONAR" }));

        jLabel22.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        jLabel22.setText("No Doc:");

        t_noFactura.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        t_noFactura.setToolTipText("Numero de factura");
        t_noFactura.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_noFactura.setEnabled(false);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel27)
                .addGap(4, 4, 4)
                .addComponent(c_documento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel25)
                .addGap(4, 4, 4)
                .addComponent(c_emisor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel22)
                .addGap(10, 10, 10)
                .addComponent(t_noFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel22))
                    .addComponent(t_noFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel27))
                    .addComponent(c_documento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel25))
                    .addComponent(c_emisor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        p_datos.setLayout(new java.awt.BorderLayout());

        p_orden.setBackground(new java.awt.Color(254, 254, 254));
        p_orden.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Datos de la Orden", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.TOP));

        l_asegurado.setText("Aseg:");

        t_asegurado.setToolTipText("Nombre del asegurado");
        t_asegurado.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_asegurado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_aseguradoFocusLost(evt);
            }
        });
        t_asegurado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_aseguradoActionPerformed(evt);
            }
        });
        t_asegurado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_aseguradoKeyTyped(evt);
            }
        });

        t_marca.setToolTipText("Marca de la unidad");
        t_marca.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_marca.setEnabled(false);

        t_tipo.setToolTipText("Tipo de la unidad");
        t_tipo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_tipo.setEnabled(false);

        t_serie.setToolTipText("Numero serie de la unidad");
        t_serie.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_serie.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_serieFocusLost(evt);
            }
        });
        t_serie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_serieActionPerformed(evt);
            }
        });
        t_serie.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_serieKeyTyped(evt);
            }
        });

        jLabel14.setText("Serie:");

        jLabel15.setText("Modelo:");

        t_modelo.setToolTipText("Modelo de la unidad");
        t_modelo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_modelo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_modeloFocusLost(evt);
            }
        });
        t_modelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_modeloActionPerformed(evt);
            }
        });

        jLabel16.setText("Placas:");

        t_placas.setToolTipText("Número de placas");
        t_placas.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_placas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_placasFocusLost(evt);
            }
        });
        t_placas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_placasActionPerformed(evt);
            }
        });
        t_placas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_placasKeyTyped(evt);
            }
        });

        jLabel17.setText("Poliza:");

        t_poliza.setToolTipText("Número de poliza");
        t_poliza.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_poliza.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_polizaFocusLost(evt);
            }
        });
        t_poliza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_polizaActionPerformed(evt);
            }
        });
        t_poliza.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_polizaKeyTyped(evt);
            }
        });

        jLabel18.setText("Siniestro:");

        t_siniestro.setToolTipText("Número de siniestro");
        t_siniestro.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_siniestro.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_siniestroFocusLost(evt);
            }
        });
        t_siniestro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_siniestroActionPerformed(evt);
            }
        });
        t_siniestro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_siniestroKeyTyped(evt);
            }
        });

        jLabel19.setText("Reporte:");

        t_reporte.setToolTipText("Número de reporte");
        t_reporte.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_reporte.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_reporteFocusLost(evt);
            }
        });
        t_reporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_reporteActionPerformed(evt);
            }
        });
        t_reporte.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_reporteKeyTyped(evt);
            }
        });

        jLabel20.setText("INC:");

        t_inc.setToolTipText("Número de inciso");
        t_inc.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_inc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_incFocusLost(evt);
            }
        });
        t_inc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_incActionPerformed(evt);
            }
        });
        t_inc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_incKeyTyped(evt);
            }
        });

        b_marca.setBackground(new java.awt.Color(2, 135, 242));
        b_marca.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        b_marca.setForeground(new java.awt.Color(255, 255, 255));
        b_marca.setIcon(new ImageIcon("imagenes/Marca.png"));
        b_marca.setToolTipText("Consultar marcas");
        b_marca.setBorderPainted(false);
        b_marca.setMargin(new java.awt.Insets(0, 0, 0, 0));
        b_marca.setMaximumSize(new java.awt.Dimension(32, 8));
        b_marca.setMinimumSize(new java.awt.Dimension(32, 8));
        b_marca.setPreferredSize(new java.awt.Dimension(28, 24));
        b_marca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_marcaActionPerformed(evt);
            }
        });

        b_tipo.setBackground(new java.awt.Color(2, 135, 242));
        b_tipo.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        b_tipo.setForeground(new java.awt.Color(255, 255, 255));
        b_tipo.setIcon(new ImageIcon("imagenes/Tipo.png"));
        b_tipo.setToolTipText("Consultar Tipos de vehículo");
        b_tipo.setMargin(new java.awt.Insets(1, 1, 1, 1));
        b_tipo.setMaximumSize(new java.awt.Dimension(28, 24));
        b_tipo.setMinimumSize(new java.awt.Dimension(28, 24));
        b_tipo.setPreferredSize(new java.awt.Dimension(28, 24));
        b_tipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_tipoActionPerformed(evt);
            }
        });

        jLabel28.setText("Km:");

        t_km.setToolTipText("Número de inciso");
        t_km.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setForeground(new java.awt.Color(13, 132, 254));
        jLabel1.setText("OT");

        cb_sucursal.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TOLUCA", "TULTITLAN" }));
        cb_sucursal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_sucursalActionPerformed(evt);
            }
        });

        t_orden.setToolTipText("Número de orden");
        t_orden.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_orden.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_ordenFocusLost(evt);
            }
        });
        t_orden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_ordenActionPerformed(evt);
            }
        });
        t_orden.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                t_ordenKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                t_ordenKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_ordenKeyTyped(evt);
            }
        });

        b_orden.setBackground(new java.awt.Color(2, 135, 242));
        b_orden.setIcon(new ImageIcon("imagenes/buscar.png"));
        b_orden.setMnemonic(KeyEvent.VK_F1);
        b_orden.setToolTipText("Buscar ordenes");
        b_orden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_ordenActionPerformed(evt);
            }
        });

        b_actualiza1.setBackground(new java.awt.Color(2, 135, 242));
        b_actualiza1.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        b_actualiza1.setForeground(new java.awt.Color(254, 254, 254));
        b_actualiza1.setIcon(new ImageIcon("imagenes/guardar.png"));
        b_actualiza1.setText("Actualizar");
        b_actualiza1.setToolTipText("Actualizar datos del cliente");
        b_actualiza1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_actualiza1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b_actualiza1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cb_sucursal, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_orden, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(b_orden, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(cb_sucursal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(t_orden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(b_orden, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_actualiza1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout p_ordenLayout = new javax.swing.GroupLayout(p_orden);
        p_orden.setLayout(p_ordenLayout);
        p_ordenLayout.setHorizontalGroup(
            p_ordenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_ordenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p_ordenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(p_ordenLayout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_placas, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_reporte, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_km, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_ordenLayout.createSequentialGroup()
                        .addComponent(l_asegurado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_asegurado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_inc, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_ordenLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_serie, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_modelo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(p_ordenLayout.createSequentialGroup()
                        .addComponent(b_marca, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_marca, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_tipo, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_tipo))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_ordenLayout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_poliza, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_siniestro)))
                .addContainerGap())
        );
        p_ordenLayout.setVerticalGroup(
            p_ordenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_ordenLayout.createSequentialGroup()
                .addGroup(p_ordenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(p_ordenLayout.createSequentialGroup()
                        .addGroup(p_ordenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(p_ordenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(l_asegurado)
                                .addComponent(t_asegurado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(t_inc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(p_ordenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(t_poliza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18)
                            .addComponent(t_siniestro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(p_ordenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(b_marca, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t_marca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b_tipo, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t_tipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(p_ordenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(t_serie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(t_modelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(p_ordenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(t_placas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19)
                            .addComponent(t_reporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel28)
                            .addComponent(t_km, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 2, Short.MAX_VALUE))
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        p_datos.add(p_orden, java.awt.BorderLayout.EAST);

        p_cliente.setBackground(new java.awt.Color(254, 254, 254));
        p_cliente.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Facturar a:", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setText("Cliente:");

        t_cliente.setToolTipText("Razon social del cliente");
        t_cliente.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_cliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_clienteKeyTyped(evt);
            }
        });

        t_id.setToolTipText("Numero de compañia o cliente");
        t_id.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_id.setEnabled(false);

        jLabel3.setForeground(new java.awt.Color(13, 132, 254));
        jLabel3.setText("Dir:");

        t_direccion.setToolTipText("Calle del cliente");
        t_direccion.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_direccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_direccionKeyTyped(evt);
            }
        });

        jLabel23.setForeground(new java.awt.Color(13, 132, 254));
        jLabel23.setText("No:");

        t_numero_exterior.setToolTipText("Número externo del domicilio del cliente");
        t_numero_exterior.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_numero_exterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t_numero_exteriorActionPerformed(evt);
            }
        });
        t_numero_exterior.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_numero_exteriorKeyTyped(evt);
            }
        });

        jLabel4.setText("Col:");

        t_colonia.setToolTipText("Colonia del cliente");
        t_colonia.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_colonia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_coloniaKeyTyped(evt);
            }
        });

        jLabel9.setForeground(new java.awt.Color(13, 132, 254));
        jLabel9.setText("CP:");

        t_cp.setToolTipText("CP del cliente");
        t_cp.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_cp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_cpKeyTyped(evt);
            }
        });

        jLabel8.setForeground(new java.awt.Color(13, 132, 254));
        jLabel8.setText("Pais:");

        c_pais.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        c_pais.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MEX", "USA", "GTM", "HND" }));
        c_pais.setSelectedItem("MX");
        c_pais.setToolTipText("Pais del cliente");

        jLabel7.setForeground(new java.awt.Color(13, 132, 254));
        jLabel7.setText("Edo:");

        c_estado.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        c_estado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AGUASCALIENTES", "BAJA CALIFORNIA", "BAJA CALIFORNIA SUR", "CAMPECHE", "CHIAPAS", "CHIHUAHUA", "COAHUILA", "COLIMA", "CIUDAD DE MÉXICO", "DURANGO", "ESTADO DE MEXICO", "GUANAJUATO", "GUERRERO", "HIDALGO", "JALISCO", "MICHOACAN", "MORELOS", "NAYARIT", "NUEVO LEON", "OAXACA", "PUEBLA", "QUERETARO", "QUINTANA ROO", "SAN LUIS POTOSI", "SINALOA", "SONORA", "TABASCO", "TAMAULIPAS", "TLAXCALA", "VERACRUZ", "YUCATAN", "ZACATECAS" }));
        c_estado.setToolTipText("Estado del cliente");
        c_estado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_estadoActionPerformed(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(13, 132, 254));
        jLabel6.setText("Mpio:");

        t_municipio.setToolTipText("Municipio del cliente");
        t_municipio.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_municipio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_municipioKeyTyped(evt);
            }
        });

        jLabel5.setForeground(new java.awt.Color(13, 132, 254));
        jLabel5.setText("RFC:");

        t_rfc.setToolTipText("RFC del cliente");
        t_rfc.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_rfc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_rfcKeyTyped(evt);
            }
        });

        b_uso.setBackground(new java.awt.Color(2, 135, 242));
        b_uso.setForeground(new java.awt.Color(255, 255, 255));
        b_uso.setIcon(new ImageIcon("imagenes/buscar.png"));
        b_uso.setMargin(new java.awt.Insets(1, 1, 1, 1));
        b_uso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_usoActionPerformed(evt);
            }
        });

        t_id_cfdi.setBackground(new java.awt.Color(204, 255, 255));
        t_id_cfdi.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_id_cfdi.setEnabled(false);

        t_descripcion_cfdi.setBackground(new java.awt.Color(204, 255, 255));
        t_descripcion_cfdi.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_descripcion_cfdi.setEnabled(false);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_direccion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_numero_exterior, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_id, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_cliente))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_municipio, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b_uso, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_id_cfdi, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_descripcion_cfdi))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(c_estado, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(t_rfc, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(t_colonia)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(t_cp, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(c_pais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(t_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(t_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(t_direccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23)
                    .addComponent(t_numero_exterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(t_colonia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(t_cp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(c_pais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(c_estado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(t_rfc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(t_municipio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(t_descripcion_cfdi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(t_id_cfdi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(b_uso, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        c_cliente.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        c_cliente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Compañia", "Cliente" }));
        c_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_clienteActionPerformed(evt);
            }
        });

        b_buscar.setBackground(new java.awt.Color(2, 135, 242));
        b_buscar.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        b_buscar.setForeground(new java.awt.Color(255, 255, 255));
        b_buscar.setText("Buscar");
        b_buscar.setToolTipText("Consultar datos de cliente o compañia");
        b_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_buscarActionPerformed(evt);
            }
        });

        b_buscar1.setBackground(new java.awt.Color(2, 135, 242));
        b_buscar1.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        b_buscar1.setForeground(new java.awt.Color(255, 255, 255));
        b_buscar1.setText("Nuevo");
        b_buscar1.setToolTipText("Consultar datos de cliente o compañia");
        b_buscar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_buscar1ActionPerformed(evt);
            }
        });

        b_actualiza.setBackground(new java.awt.Color(2, 135, 242));
        b_actualiza.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        b_actualiza.setForeground(new java.awt.Color(254, 254, 254));
        b_actualiza.setText("Actualizar");
        b_actualiza.setToolTipText("Actualizar datos del cliente");
        b_actualiza.setEnabled(false);
        b_actualiza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_actualizaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(b_actualiza, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(b_buscar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(b_buscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(c_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(c_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_buscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_buscar1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_actualiza)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout p_clienteLayout = new javax.swing.GroupLayout(p_cliente);
        p_cliente.setLayout(p_clienteLayout);
        p_clienteLayout.setHorizontalGroup(
            p_clienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_clienteLayout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        p_clienteLayout.setVerticalGroup(
            p_clienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        p_datos.add(p_cliente, java.awt.BorderLayout.CENTER);

        p_datos_pago.setBackground(new java.awt.Color(254, 254, 254));
        p_datos_pago.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Datos de Pago", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

        t_fecha.setEditable(false);
        t_fecha.setBackground(new java.awt.Color(204, 255, 255));
        t_fecha.setText("DD-MM-AAAA");
        t_fecha.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_fecha.setEnabled(false);

        b_fecha.setBackground(new java.awt.Color(2, 135, 242));
        b_fecha.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        b_fecha.setForeground(new java.awt.Color(255, 255, 255));
        b_fecha.setText("Fecha:");
        b_fecha.setToolTipText("Calendario");
        b_fecha.setMaximumSize(new java.awt.Dimension(32, 8));
        b_fecha.setMinimumSize(new java.awt.Dimension(32, 8));
        b_fecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_fechaActionPerformed(evt);
            }
        });

        jLabel30.setText("Total Pagado $");

        t_pagado.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_pagado.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_pagado.setEnabled(false);

        c_forma_pago.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "99" }));

        jLabel31.setText("F. Pago:");

        javax.swing.GroupLayout p_datos_pagoLayout = new javax.swing.GroupLayout(p_datos_pago);
        p_datos_pago.setLayout(p_datos_pagoLayout);
        p_datos_pagoLayout.setHorizontalGroup(
            p_datos_pagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_datos_pagoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(p_datos_pagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(p_datos_pagoLayout.createSequentialGroup()
                        .addComponent(b_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_fecha))
                    .addGroup(p_datos_pagoLayout.createSequentialGroup()
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t_pagado, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_datos_pagoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel31)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c_forma_pago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        p_datos_pagoLayout.setVerticalGroup(
            p_datos_pagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_datos_pagoLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(p_datos_pagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(t_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p_datos_pagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(t_pagado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p_datos_pagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(c_forma_pago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        p_datos.add(p_datos_pago, java.awt.BorderLayout.WEST);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(p_datos, javax.swing.GroupLayout.PREFERRED_SIZE, 1067, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(p_datos, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        p_totales.setBackground(new java.awt.Color(2, 135, 242));

        p_iva.setBackground(new java.awt.Color(2, 135, 242));
        p_iva.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        p_iva.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        l_subtotal.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        l_subtotal.setForeground(new java.awt.Color(255, 255, 255));
        l_subtotal.setText("Subtotal:");
        p_iva.add(l_subtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 4, -1, -1));

        t_subtotal.setEditable(false);
        t_subtotal.setBackground(new java.awt.Color(2, 135, 242));
        t_subtotal.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_subtotal.setForeground(new java.awt.Color(255, 255, 255));
        t_subtotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_subtotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_subtotal.setText("0.00");
        t_subtotal.setToolTipText("subtotal antes de IVA");
        t_subtotal.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        p_iva.add(t_subtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(106, 2, 88, -1));

        t_iva.setEditable(false);
        t_iva.setBackground(new java.awt.Color(2, 135, 242));
        t_iva.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_iva.setForeground(new java.awt.Color(255, 255, 255));
        t_iva.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_iva.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_iva.setText("0.00");
        t_iva.setToolTipText("Total de IVA");
        t_iva.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        p_iva.add(t_iva, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 18, 88, -1));

        l_iva.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        l_iva.setForeground(new java.awt.Color(255, 255, 255));
        l_iva.setText("I.V.A.:");
        p_iva.add(l_iva, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, -1, -1));

        l_total.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        l_total.setForeground(new java.awt.Color(255, 255, 255));
        l_total.setText("Total:");
        p_iva.add(l_total, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 40, -1, -1));

        t_total.setEditable(false);
        t_total.setBackground(new java.awt.Color(2, 135, 242));
        t_total.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        t_total.setForeground(new java.awt.Color(255, 255, 255));
        t_total.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        t_total.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_total.setText("0.00");
        t_total.setToolTipText("Total neto");
        t_total.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        p_iva.add(t_total, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 35, 88, -1));

        jPanel6.setBackground(new java.awt.Color(2, 135, 242));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        b_guardar.setText("Guardar");
        b_guardar.setToolTipText("Almacenar la Documento");
        b_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_guardarActionPerformed(evt);
            }
        });
        jPanel6.add(b_guardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 27, -1, -1));

        jButton3.setText("Importar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(85, 27, -1, -1));

        b_mas.setBackground(new java.awt.Color(2, 135, 242));
        b_mas.setForeground(new java.awt.Color(255, 255, 255));
        b_mas.setIcon(new ImageIcon("imagenes/boton_mas.png"));
        b_mas.setToolTipText("Agrega un concepto");
        b_mas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_masActionPerformed(evt);
            }
        });
        jPanel6.add(b_mas, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 2, 21, 21));

        b_menos.setBackground(new java.awt.Color(2, 135, 242));
        b_menos.setForeground(new java.awt.Color(255, 255, 255));
        b_menos.setIcon(new ImageIcon("imagenes/boton_menos.png"));
        b_menos.setToolTipText("Eliminar un concepto");
        b_menos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_menosActionPerformed(evt);
            }
        });
        jPanel6.add(b_menos, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 2, 21, 21));

        l_descuento.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        l_descuento.setForeground(new java.awt.Color(255, 255, 255));
        l_descuento.setText("Agregar Descuento:");
        jPanel6.add(l_descuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 4, -1, -1));

        t_descuento.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_descuento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0.00"))));
        t_descuento.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        t_descuento.setToolTipText("Agregar descuento general");
        t_descuento.setEnabled(false);
        t_descuento.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        t_descuento.setNextFocusableComponent(t_datos);
        t_descuento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_descuentoFocusLost(evt);
            }
        });
        jPanel6.add(t_descuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(155, 0, 90, -1));

        b_claves.setText("Claves");
        b_claves.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_clavesActionPerformed(evt);
            }
        });
        jPanel6.add(b_claves, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 27, -1, -1));

        l_iva2.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        l_iva2.setForeground(new java.awt.Color(255, 255, 255));
        l_iva2.setText("Información Adicional");

        t_extra.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        t_extra.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_extraKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout p_totalesLayout = new javax.swing.GroupLayout(p_totales);
        p_totales.setLayout(p_totalesLayout);
        p_totalesLayout.setHorizontalGroup(
            p_totalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_totalesLayout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 180, Short.MAX_VALUE)
                .addComponent(l_iva2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(t_extra, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addComponent(p_iva, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        p_totalesLayout.setVerticalGroup(
            p_totalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_totalesLayout.createSequentialGroup()
                .addGroup(p_totalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(p_iva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(p_totalesLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(p_totalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(t_extra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(l_iva2)))
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        add(p_totales, java.awt.BorderLayout.PAGE_END);

        t_datos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cant", "Med", "Descripción", "Cve-Prod", "Costo c/u", "Descuento", "IVA", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        t_datos.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        t_datos.getTableHeader().setReorderingAllowed(false);
        t_datos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                t_datosKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(t_datos);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void t_ordenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_ordenActionPerformed
        // TODO add your handling code here:
        if(c_documento.getSelectedItem().toString().compareTo("SELECCIONAR")!=0)
        {
            if(t_orden.getText().compareTo("")!=0)
            {
                Session session;
                switch(this.cb_sucursal.getSelectedItem().toString())
                {
                    case "TOLUCA":
                        session = HibernateUtil.getSessionFactory().openSession();
                        try 
                        {
                            session.beginTransaction().begin();
                            orden_act = (Orden)session.get(Orden.class, Integer.parseInt(t_orden.getText()));
                            if(orden_act!=null)
                            {
                                if(orden_act.getAutorizadoFacturar()==true)
                                {
                                    int id_fac=-1;
                                    switch(c_documento.getSelectedItem().toString())
                                    {
                                        case "Ingreso":
                                            id_fac=OrdenFacturado(orden_act);
                                            break;
                                        default:
                                            id_fac=-1;
                                            break;
                                    }
                                    if(id_fac==-1)
                                    {
                                        this.t_orden.setText(""+orden_act.getIdOrden());
                                        consultaOrden();
                                    }
                                    else
                                    {
                                        t_orden.setText("");
                                        orden_act=null;
                                        borra_cajas();
                                        int op=JOptionPane.showConfirmDialog(null, "La orden ya esta en facturación con el número:"+id_fac+" ¿desea consultarla?", "En proceso de Facturación", JOptionPane.YES_NO_OPTION);
                                        if(op==0)
                                        {
                                            try
                                            {
                                                session.beginTransaction().begin();
                                                factura=(Factura)session.get(Factura.class, id_fac);
                                                session.beginTransaction().commit();
                                                Dimension d;
                                                if(factura.getAddenda()!=null && factura.getEstadoFactura().compareTo("Facturado")==0)
                                                {
                                                    switch(factura.getAddenda())
                                                    {
                                                        case "qualitas":
                                                            QUALITAS genera=new QUALITAS(new Frame(), true, this.user, sessionPrograma, factura,configuracion);
                                                            d = Toolkit.getDefaultToolkit().getScreenSize();
                                                            genera.setLocation((d.width/2)-(genera.getWidth()/2), (d.height/2)-(genera.getHeight()/2));
                                                            genera.consulta();
                                                            genera.setVisible(true);
                                                            genera.dispose();
                                                            genera=null;
                                                            break;
                                                        case "axa":
                                                            AXA genera1=new AXA(new Frame(), true, this.user, sessionPrograma, factura);
                                                            d = Toolkit.getDefaultToolkit().getScreenSize();
                                                            genera1.setLocation((d.width/2)-(genera1.getWidth()/2), (d.height/2)-(genera1.getHeight()/2));
                                                            genera1.consulta();
                                                            genera1.setVisible(true);
                                                            genera1.dispose();
                                                            genera1=null;
                                                            break;
                                                        case "gnp":
                                                            GNP genera2=new GNP(new Frame(), true, this.user, sessionPrograma, factura,configuracion);
                                                            d = Toolkit.getDefaultToolkit().getScreenSize();
                                                            genera2.setLocation((d.width/2)-(genera2.getWidth()/2), (d.height/2)-(genera2.getHeight()/2));
                                                            genera2.consulta();
                                                            genera2.setVisible(true);
                                                            genera2.dispose();
                                                            genera2=null;
                                                            break;
                                                        case"general":
                                                            General genera3=new General(new Frame(), true, this.user, sessionPrograma, factura,configuracion);
                                                            d = Toolkit.getDefaultToolkit().getScreenSize();
                                                            genera3.setLocation((d.width/2)-(genera3.getWidth()/2), (d.height/2)-(genera3.getHeight()/2));
                                                            genera3.consulta();
                                                            genera3.setVisible(true);
                                                            genera3.dispose();
                                                            genera3=null;
                                                            break;
                                                        default:
                                                            addendas.setSize(324, 135);
                                                            d = Toolkit.getDefaultToolkit().getScreenSize();
                                                            addendas.setLocation((d.width/2)-(addendas.getWidth()/2), (d.height/2)-(addendas.getHeight()/2));
                                                            addendas.setVisible(true);
                                                            break;
                                                    }
                                                }
                                                else
                                                {
                                                    addendas.setSize(324, 135);
                                                    d = Toolkit.getDefaultToolkit().getScreenSize();
                                                    addendas.setLocation((d.width/2)-(addendas.getWidth()/2), (d.height/2)-(addendas.getHeight()/2));
                                                    addendas.setVisible(true);
                                                }
                                            }catch(Exception e)
                                            { 
                                                e.printStackTrace();
                                                JOptionPane.showMessageDialog(null, "Error al consultar la orden");
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    orden_act=null;
                                    t_orden.setText("");
                                    borra_cajas();
                                    JOptionPane.showMessageDialog(null, "La orden aun no esta lista para facturar");
                                    t_orden.requestFocus(); 
                                }
                            }
                            else
                            {
                                h= new Herramientas(user, 0);
                                t_orden.setText("");
                                orden_act=null;
                                borra_cajas();
                                t_orden.requestFocus();
                            }
                        }catch(Exception e)
                        {
                            e.printStackTrace();
                        }
                        finally
                        {
                            if(session!=null)
                                if(session.isOpen())
                                    session.close();
                        }
                        break;
                    case "TULTITLAN":
                        if(t_orden.getText().compareTo("")!=0)
                        {
                            mysql=new Conexion();
                            String resp=mysql.conectarMSQL("red", "04650077", "tbstultitlan.ddns.net", "3306", "mydb");
                            if(resp.compareTo("")==0)
                            {
                                try 
                                {
                                    ArrayList aux=mysql.Consulta("select inciso, clientes.nombre, marca.id_marca, marca.marca_nombre, tipo_nombre, "
                                            + "no_serie, modelo, no_placas, poliza, siniestro, no_reporte, autorizado_facturar, no_factura, tipo_cliente, mo_directa, importe_hora, km "
                                            + "from orden left join marca on orden.id_marca=marca.id_marca " 
                                            + "left join clientes on orden.id_cliente=clientes.id_clientes "
                                            + "left join compania on orden.id_compania=compania.id_compania "
                                            + "where id_orden="+t_orden.getText());
                                    if(aux.size()>0)
                                    {
                                        orden=(ArrayList)aux.get(0);
                                        if((boolean)orden.get(11)==true)
                                        {   
                                            int id_fac=-1;
                                            switch(c_documento.getSelectedItem().toString())
                                            {
                                                case "Ingreso":
                                                    if(orden.get(12)!=null)
                                                        id_fac=(int)orden.get(12);
                                                    validaEdo(id_fac);
                                                    break;
                                                default:
                                                    id_fac=-1;
                                                    break;
                                            }
                                            
                                            if(id_fac<=0)
                                                this.consultaOrden(t_orden.getText());
                                            else
                                            {
                                                orden_act=null;
                                                borra_cajas();
                                                int op=JOptionPane.showConfirmDialog(null, "La orden ya esta en facturación con el número:"+id_fac+" ¿desea consultarla?", "En proceso de Facturación", JOptionPane.YES_NO_CANCEL_OPTION);

                                                if(op==0)
                                                {
                                                    t_orden.setText("");
                                                    session = HibernateUtil.getSessionFactory().openSession();
                                                    try
                                                    {
                                                        session.beginTransaction().begin();
                                                        factura=(Factura)session.get(Factura.class, id_fac);
                                                        session.beginTransaction().commit();
                                                        Dimension d;
                                                        if(factura.getAddenda()!=null && factura.getEstadoFactura().compareTo("Facturado")==0)
                                                        {
                                                            switch(factura.getAddenda())
                                                            {
                                                                case "qualitas":
                                                                    QUALITAS genera=new QUALITAS(new Frame(), true, this.user, sessionPrograma, factura,configuracion);
                                                                    d = Toolkit.getDefaultToolkit().getScreenSize();
                                                                    genera.setLocation((d.width/2)-(genera.getWidth()/2), (d.height/2)-(genera.getHeight()/2));
                                                                    genera.consulta();
                                                                    genera.setVisible(true);
                                                                    genera.dispose();
                                                                    genera=null;
                                                                    //factura=genera.getReturnStatus();
                                                                    break;
                                                                case "axa":
                                                                    AXA genera1=new AXA(new Frame(), true, this.user, sessionPrograma, factura);
                                                                    d = Toolkit.getDefaultToolkit().getScreenSize();
                                                                    genera1.setLocation((d.width/2)-(genera1.getWidth()/2), (d.height/2)-(genera1.getHeight()/2));
                                                                    genera1.consulta();
                                                                    genera1.setVisible(true);
                                                                    genera1.dispose();
                                                                    genera1=null;
                                                                    break;
                                                                case "gnp":
                                                                    GNP genera2=new GNP(new Frame(), true, this.user, sessionPrograma, factura,configuracion);
                                                                    d = Toolkit.getDefaultToolkit().getScreenSize();
                                                                    genera2.setLocation((d.width/2)-(genera2.getWidth()/2), (d.height/2)-(genera2.getHeight()/2));
                                                                    genera2.consulta();
                                                                    genera2.setVisible(true);
                                                                    genera2.dispose();
                                                                    genera2=null;
                                                                    break;
                                                                case"general":
                                                                    General genera3=new General(new Frame(), true, this.user, sessionPrograma, factura,configuracion);
                                                                    d = Toolkit.getDefaultToolkit().getScreenSize();
                                                                    genera3.setLocation((d.width/2)-(genera3.getWidth()/2), (d.height/2)-(genera3.getHeight()/2));
                                                                    genera3.consulta();
                                                                    genera3.setVisible(true);
                                                                    genera3.dispose();
                                                                    genera3=null;
                                                                    break;
                                                                default:
                                                                    addendas.setSize(324, 135);
                                                                    d = Toolkit.getDefaultToolkit().getScreenSize();
                                                                    addendas.setLocation((d.width/2)-(addendas.getWidth()/2), (d.height/2)-(addendas.getHeight()/2));
                                                                    addendas.setVisible(true);
                                                                    break;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            addendas.setSize(324, 135);
                                                            d = Toolkit.getDefaultToolkit().getScreenSize();
                                                            addendas.setLocation((d.width/2)-(addendas.getWidth()/2), (d.height/2)-(addendas.getHeight()/2));
                                                            addendas.setVisible(true);
                                                        }
                                                    }catch(Exception e)
                                                    { 
                                                        e.printStackTrace();
                                                        JOptionPane.showMessageDialog(null, "Error al consultar la orden");
                                                    }
                                                    finally
                                                    {
                                                        if(session!=null)
                                                            if(session.isOpen())
                                                                session.close();
                                                    }
                                                }
                                                if(op==2)
                                                {
                                                    int op1=JOptionPane.showConfirmDialog(null, "Confirma que desea eliminar la factura:"+id_fac+" de la orden:"+t_orden.getText(), "Eliminar factura de orden logis", JOptionPane.YES_NO_OPTION);
                                                    if(op1==0)
                                                    {
                                                        mysql=new Conexion();
                                                        String respL=mysql.conectarMSQL("red", "04650077", "tbstultitlan.ddns.net", "3306", "mydb");
                                                        if(respL.compareTo("")==0)
                                                        {
                                                            try 
                                                            {
                                                                int res=mysql.actualiza("update orden set no_factura=null, feha_fectura=null,  where id_orden="+t_orden.getText());
                                                                if(res>0)
                                                                {
                                                                    t_orden.setText("");
                                                                    borra_cajas();
                                                                    JOptionPane.showMessageDialog(null, "La factura se elimino de logis");
                                                                    t_orden.requestFocus();
                                                                }
                                                            }catch(Exception e)
                                                            {
                                                                e.printStackTrace();
                                                            }
                                                            finally
                                                            {
                                                                mysql.desconectarMSQL();
                                                            }
                                                        }
                                                    }
                                                    t_orden.setText("");
                                                }
                                                if(op==1 || op==-1)
                                                    t_orden.setText("");
                                            }
                                        }
                                        else
                                        {
                                            orden_act=null;
                                            t_orden.setText("");
                                            borra_cajas();
                                            JOptionPane.showMessageDialog(null, "La orden aun no esta lista para facturar");
                                        }
                                    }
                                    else
                                    {
                                        JOptionPane.showMessageDialog(null, "La orden no existe");
                                        t_orden.setText("");
                                        borra_cajas();
                                        t_orden.requestFocus();
                                        orden=new ArrayList();
                                    }
                                }catch(Exception e)
                                {
                                    e.printStackTrace();
                                }
                                finally
                                {
                                    mysql.desconectarMSQL();
                                }
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null, "Error al conectar con el servidor: "+resp);
                            }
                        }
                        else
                        {
                            h= new Herramientas(user, 0);
                            t_orden.setText("");
                            borra_cajas();
                        }
                        break;
                }
            }
            else
            {
                h= new Herramientas(user, 0);
                t_orden.setText("");
                orden_act=null;
                borra_cajas();
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Debes Seleccionar Primero el Tipo de Documento");
            h= new Herramientas(user, 0);
            t_orden.setText("");
            orden_act=null;
            borra_cajas();
        }
    }//GEN-LAST:event_t_ordenActionPerformed

    private void c_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c_clienteActionPerformed
        // TODO add your handling code here:
        cargaCliente();
    }//GEN-LAST:event_c_clienteActionPerformed

    private void t_ordenKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_ordenKeyTyped
        // TODO add your handling code here:
        char car = evt.getKeyChar();
        if(t_orden.getText().length()>5) 
            evt.consume();
        if((car<'0' || car>'9')) 
            evt.consume();
    }//GEN-LAST:event_t_ordenKeyTyped

    private void b_ordenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_ordenActionPerformed
        // TODO add your handling code here:
        if(c_documento.getSelectedItem().toString().compareTo("SELECCIONAR")!=0)
        {
            h=new Herramientas(user, 0);
            h.session(sessionPrograma);
            buscaOrden obj = new buscaOrden(new javax.swing.JFrame(), true, user, 1, configuracion);
            obj.t_busca.requestFocus();
            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
            obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
            obj.setVisible(true);        
            orden_act=obj.getReturnStatus();
            if (orden_act!=null)
            {
                if(orden_act.getAutorizadoFacturar()==true)
                {
                    Session session = HibernateUtil.getSessionFactory().openSession();
                    try
                    {
                        orden_act=(Orden)session.get(Orden.class, orden_act.getIdOrden());
                        int id_fac=OrdenFacturado(orden_act);
                        if(id_fac==-1)
                        {
                            this.t_orden.setText(""+orden_act.getIdOrden());
                            consultaOrden();
                        }
                        else
                        {
                            t_orden.setText("");
                            orden_act=null;
                            borra_cajas();
                            t_orden.requestFocus();      
                            int op=JOptionPane.showConfirmDialog(null, "La orden ya esta en facturación con el número:"+id_fac+" ¿desea consultarla?", "En proceso de Facturación", JOptionPane.YES_NO_OPTION);
                            if(op==0)
                            {
                                session.beginTransaction().begin();
                                Factura factura=(Factura)session.get(Factura.class, id_fac);
                                if(factura.getAddenda()!=null && factura.getEstadoFactura().compareTo("Facturado")==0)
                                {
                                    switch(factura.getAddenda())
                                    {
                                        case "qualitas":
                                            session.beginTransaction().commit();
                                            QUALITAS genera=new QUALITAS(new Frame(), true, this.user, sessionPrograma, factura,configuracion);
                                            d = Toolkit.getDefaultToolkit().getScreenSize();
                                            genera.setLocation((d.width/2)-(genera.getWidth()/2), (d.height/2)-(genera.getHeight()/2));
                                            genera.consulta();
                                            genera.setVisible(true);
                                            factura=genera.getReturnStatus();
                                            break;
                                        case "axa":
                                            AXA genera1=new AXA(new Frame(), true, this.user, sessionPrograma, factura);
                                            d = Toolkit.getDefaultToolkit().getScreenSize();
                                            genera1.setLocation((d.width/2)-(genera1.getWidth()/2), (d.height/2)-(genera1.getHeight()/2));
                                            genera1.consulta();
                                            genera1.setVisible(true);
                                            factura=genera1.getReturnStatus();
                                            break;
                                        case "gnp":
                                            GNP genera2=new GNP(new Frame(), true, this.user, sessionPrograma, factura,configuracion);
                                            d = Toolkit.getDefaultToolkit().getScreenSize();
                                            genera2.setLocation((d.width/2)-(genera2.getWidth()/2), (d.height/2)-(genera2.getHeight()/2));
                                            genera2.consulta();
                                            genera2.setVisible(true);
                                            factura=genera2.getReturnStatus();
                                            break;
                                        case"general":
                                                General genera3=new General(new Frame(), true, this.user, sessionPrograma, factura,configuracion);
                                                d = Toolkit.getDefaultToolkit().getScreenSize();
                                                genera3.setLocation((d.width/2)-(genera3.getWidth()/2), (d.height/2)-(genera3.getHeight()/2));
                                                genera3.consulta();
                                                genera3.setVisible(true);
                                                factura=genera3.getReturnStatus();
                                                break;
                                        default:
                                            addendas.setSize(324, 135);
                                            d = Toolkit.getDefaultToolkit().getScreenSize();
                                            addendas.setLocation((d.width/2)-(addendas.getWidth()/2), (d.height/2)-(addendas.getHeight()/2));
                                            addendas.setVisible(true);
                                            break;
                                    }
                                }
                                else
                                {
                                    addendas.setSize(324, 135);
                                    d = Toolkit.getDefaultToolkit().getScreenSize();
                                    addendas.setLocation((d.width/2)-(addendas.getWidth()/2), (d.height/2)-(addendas.getHeight()/2));
                                    addendas.setVisible(true);
                                }
                            }
                        }
                    }catch(Exception e)
                    { 
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(null, "Error al consultar la orden");
                    }
                    finally
                    {
                        if(session!=null)
                            if(session.isOpen())
                                session.close();
                    }
                }
                else
                {
                    t_orden.setText("");
                    orden_act=null;
                    borra_cajas();
                    t_orden.requestFocus();      
                    JOptionPane.showMessageDialog(null, "La orden aun no esta lista para facturar");
                }
            }
            else
            {
                t_orden.setText("");
                orden_act=null;
                borra_cajas();
                t_orden.requestFocus();      
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Debes Seleccionar Primero el Tipo de Documento");
            h= new Herramientas(user, 0);
            t_orden.setText("");
            orden_act=null;
            borra_cajas();
            c_documento.requestFocus();
        }
    }//GEN-LAST:event_b_ordenActionPerformed

    private void b_actualizaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_actualizaActionPerformed
        // TODO add your handling code here:
        if(this.c_cliente.getSelectedItem().toString().compareTo("Compañia")==0)
        {
            h=new Herramientas(user, 0);
            h.session(sessionPrograma);
            t_cliente.setText(t_cliente.getText().trim());
            if(t_cliente.getText().compareTo("")!=0)
            {
                Session session = HibernateUtil.getSessionFactory().openSession();
                try
                {
                    session.beginTransaction().begin();
                    Compania registro  = (Compania)session.get(Compania.class, Integer.parseInt(t_id.getText()));
                    registro.setSocial(t_cliente.getText());
                    if(t_direccion.getText().compareTo("")!=0)
                        registro.setDireccion(t_direccion.getText());
                    else
                        registro.setDireccion(null);
                    if(t_colonia.getText().compareTo("")!=0)
                        registro.setColonia(t_colonia.getText());
                    else
                        registro.setColonia(null);
                    registro.setEstado(c_estado.getSelectedItem().toString());
                    if(t_rfc.getText().compareTo("")!=0)
                        registro.setRfc(t_rfc.getText());
                    else
                        registro.setRfc("");
                    if(t_cp.getText().compareTo("")!=0)
                        registro.setCp(t_cp.getText());
                    else
                        registro.setCp(null);
                    if(t_municipio.getText().compareTo("")!=0)
                        registro.setMunicipio(t_municipio.getText());
                    else
                        registro.setMunicipio("");
                    registro.setPais(c_pais.getSelectedItem().toString());
                    if(t_numero_exterior.getText().trim().compareTo("")!=0)
                        registro.setNumeroExterior(t_numero_exterior.getText().trim());

                    if(t_id_cfdi.getText().compareTo("")!=0)
                    {
                        UsoCfdi uso=(UsoCfdi) session.createCriteria(UsoCfdi.class).add(Restrictions.eq("idUsoCfdi", t_id_cfdi.getText())).setMaxResults(1).uniqueResult();
                        registro.setUsoCfdi(uso);
                    }

                   session.update(registro);
                   session.getTransaction().commit();
                   JOptionPane.showMessageDialog(null, "Registro modificado");
                }catch (HibernateException he) 
                {
                    he.printStackTrace();
                    session.getTransaction().rollback();
                }
                finally 
                {
                    if(session!=null)
                        if(session.isOpen())
                            session.close();
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "¡Debe introducir el nombre de la compañía!");
                t_cliente.requestFocus();
            }
        }
        if(this.c_cliente.getSelectedItem().toString().compareTo("Cliente")==0)
        {
            h=new Herramientas(user, 0);
            h.session(sessionPrograma);
            Session session = HibernateUtil.getSessionFactory().openSession();
            try
            {
                session.beginTransaction();
                Object resp=session.createQuery("from Clientes obj where obj.nombre='"+t_cliente.getText()+"' and obj.idClientes!="+t_id.getText()).uniqueResult();   
                if(resp==null)
                {
                    Clientes objeto = (Clientes)session.get(Clientes.class, Integer.parseInt(t_id.getText()));
                    objeto.setNombre(t_cliente.getText());
                    if(t_direccion.getText().compareTo("")!=1)
                        objeto.setDireccion(t_direccion.getText());
                    else
                        objeto.setDireccion("");
                    if(t_colonia.getText().compareTo("")!=1)
                        objeto.setColonia(t_colonia.getText());
                    else
                        objeto.setColonia("");
                    objeto.setEstado(c_estado.getSelectedItem().toString());
                    if(t_rfc.getText().compareTo("")!=1)
                        objeto.setRfc(t_rfc.getText());
                    else
                        objeto.setRfc("");
                    if(t_cp.getText().compareTo("")==0)
                        objeto.setCp(null);
                    else
                        objeto.setCp(Integer.parseInt(t_cp.getText()));
                    if(t_municipio.getText().compareTo("")!=0)
                        objeto.setMunicipio(t_municipio.getText());
                    else
                        objeto.setMunicipio(""); 
                    objeto.setPais(c_pais.getSelectedItem().toString());
                    if(t_numero_exterior.getText().trim().compareTo("")!=0)
                        objeto.setNumeroExterior(t_numero_exterior.getText().trim());
                    session.update(objeto);
                    session.getTransaction().commit();
                    JOptionPane.showMessageDialog(null, "Registro modificado");
                }
                else
                    JOptionPane.showMessageDialog(null, "¡Error: No se pueden guardar nombres duplicados!");  
            }
            catch (HibernateException he)
            {
                he.printStackTrace(); 
                System.out.println(he.hashCode());
                session.getTransaction().rollback();
            }
            finally
            {
                if(session!=null)
                    if(session.isOpen())
                        session.close();
            }
        }
    }//GEN-LAST:event_b_actualizaActionPerformed

    private void t_clienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_clienteKeyTyped
        // TODO add your handling code here:
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_cliente.getText().length()>=100)
            evt.consume();
    }//GEN-LAST:event_t_clienteKeyTyped

    private void t_direccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_direccionKeyTyped
        // TODO add your handling code here:
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_direccion.getText().length()>=150)
            evt.consume();
    }//GEN-LAST:event_t_direccionKeyTyped

    private void t_coloniaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_coloniaKeyTyped
        // TODO add your handling code here:
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_colonia.getText().length()>=150)
            evt.consume();
    }//GEN-LAST:event_t_coloniaKeyTyped

    private void t_rfcKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_rfcKeyTyped
        // TODO add your handling code here:
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_rfc.getText().length()>=13)
            evt.consume();
    }//GEN-LAST:event_t_rfcKeyTyped

    private void t_cpKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_cpKeyTyped
        char car = evt.getKeyChar();
        if(t_cp.getText().length()>=5) 
            evt.consume();
        if((car<'0' || car>'9')) 
            evt.consume();
    }//GEN-LAST:event_t_cpKeyTyped

    private void t_municipioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_municipioKeyTyped
        // TODO add your handling code here:
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_municipio.getText().length()>=20)
            evt.consume();
    }//GEN-LAST:event_t_municipioKeyTyped

    private void t_descuentoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_descuentoFocusLost
        // TODO add your handling code here:
        try
        {
            t_descuento.commitEdit();
            if(((Number)t_descuento.getValue()).doubleValue()<=100.0d && ((Number)t_descuento.getValue()).doubleValue()>=0.0d)
            {
                for(int a=0; a<t_datos.getRowCount(); a++)
                {
                    t_datos.setValueAt(((Number)t_descuento.getValue()).doubleValue(), a, 5);
                }
            }
            else
                t_descuento.setValue(0);
            this.sumaTotales();
        }
        catch(Exception e)
        {
            
        }
    }//GEN-LAST:event_t_descuentoFocusLost

    private void b_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_guardarActionPerformed
        // TODO add your handling code here:
        if(c_documento.getSelectedItem().toString().compareTo("SELECCIONAR")!=0)
        {
            if(c_documento.getSelectedItem().toString().compareTo("Pago")!=0)
            {
                if(t_datos.getRowCount()>0)
                {
                    if(c_emisor.getSelectedIndex()!=0)
                    {
                        if(t_cliente.getText().trim().compareTo("")!=0)
                        {
                            if(t_rfc.getText().compareTo("")!=0)
                            {
                                if(t_direccion.getText().trim().compareTo("")!=0)
                                {
                                    if(t_numero_exterior.getText().compareTo("")!=0)
                                    {
                                        if(t_cp.getText().compareTo("")!=0)
                                        {
                                            if(t_municipio.getText().compareTo("")!=0)
                                            {
                                                Session session = HibernateUtil.getSessionFactory().openSession();
                                                try
                                                {   
                                                    Calendar c1 = Calendar.getInstance();
                                                    //Calendar c2 = new GregorianCalendar();
                                                    session.beginTransaction().begin();
                                                    switch(c_documento.getSelectedItem().toString())
                                                    {
                                                        case "Ingreso":
                                                            if(orden_act!=null)
                                                            {
                                                                orden_act=(Orden)session.get(Orden.class, orden_act.getIdOrden());
                                                                if(orden_act.getAutorizadoFacturar()==true)
                                                                {
                                                                    System.out.println(c_emisor.getSelectedIndex());
                                                                    Configuracion con =(Configuracion)session.get(Configuracion.class, c_emisor.getSelectedIndex());
                                                                    Factura nuevaFactura=new Factura();
                                                                    nuevaFactura.setOrden(orden_act);
                                                                    nuevaFactura.setFecha(c1.getTime());// fecha de emision
                                                                    nuevaFactura.setRfcEmisor(con.getRfc());//RFC emisor
                                                                    nuevaFactura.setNombreEmisor(con.getNombre());//nombre emisor
                                                                    nuevaFactura.setCalleEmisor(con.getDireccion());//calle emisor
                                                                    nuevaFactura.setColoniaEmisor(con.getColonia());//Colonia emisor
                                                                    nuevaFactura.setNumeroExteriorEmisor(con.getNo());//numero exteerior emisor
                                                                    nuevaFactura.setMunicipioEmisor(con.getMunicipio());//municipio emisor
                                                                    nuevaFactura.setEstadoEmisor(con.getEstado());//estado emisor
                                                                    nuevaFactura.setPaisEmisor(con.getPais());//pais emisor
                                                                    nuevaFactura.setCpEmisor(con.getCp());//cp emisor
                                                                    nuevaFactura.setRfcReceptor(t_rfc.getText());
                                                                    nuevaFactura.setNombreReceptor(t_cliente.getText());
                                                                    nuevaFactura.setCalleReceptor(t_direccion.getText());
                                                                    nuevaFactura.setNumeroExteriorReceptor(t_numero_exterior.getText());
                                                                    nuevaFactura.setColoniaReceptor(t_colonia.getText());
                                                                    nuevaFactura.setMunicipioReceptor(t_municipio.getText());
                                                                    nuevaFactura.setEstadoReceptor(c_estado.getSelectedItem().toString());
                                                                    nuevaFactura.setPaisReceptor(c_pais.getSelectedItem().toString());
                                                                    nuevaFactura.setCpReceptor(t_cp.getText());
                                                                    //DEDUCIBLE
                                                                    nuevaFactura.setEstadoFactura("Pendiente");
                                                                    nuevaFactura.setEstatus("PENDIENTE");
                                                                    //f_fiscal
                                                                    //fecha_fiscal
                                                                    //serie
                                                                    //folio
                                                                    if(orden_act.getCompania().getIdCompania()==15 || orden_act.getCompania().getIdCompania()==13 || orden_act.getCompania().getIdCompania()==1)
                                                                        nuevaFactura.setMetodoPago("03");
                                                                    else
                                                                        nuevaFactura.setMetodoPago("99");
                                                                    nuevaFactura.setCuentaPago("");
                                                                    nuevaFactura.setMoneda("MXN");
                                                                    nuevaFactura.setFactorCambio(1.0d);
                                                                    nuevaFactura.setArea("Talleres");
                                                                    nuevaFactura.setTipoPoliza("AUTOS");
                                                                    nuevaFactura.setTipoEmisor("MATRIZ");
                                                                    nuevaFactura.setContactoEmisor(con.getContacto());
                                                                    nuevaFactura.setCorreoEmisor(con.getMail());
                                                                    nuevaFactura.setTelefonoEmisor(con.getTel());
                                                                    nuevaFactura.setTipoReceptor("COORDINADOR");
                                                                    nuevaFactura.setContactoReceptor(t_receptor.getText());
                                                                    nuevaFactura.setCorreoReceptor(t_email.getText());
                                                                    nuevaFactura.setTelefonoReceptor("");
                                                                    nuevaFactura.setCodigoOficina("");
                                                                    nuevaFactura.setFoliosElectronicos("");
                                                                    nuevaFactura.setUsuarioByGenero(user);
                                                                    nuevaFactura.setCondicionesPago("PAGO EN UNA SOLA EXHIBICION");
                                                                    nuevaFactura.setMedioPago("NO IDENTIFICADO");
                                                                    nuevaFactura.setFechaMedioPago(c1.getTime());
                                                                    nuevaFactura.setIva(Integer.parseInt(cb_iva.getSelectedItem().toString()));
                                                                    if(con.getVersion()!=null)
                                                                        nuevaFactura.setVersion(con.getVersion());
                                                                    else
                                                                        nuevaFactura.setVersion(3.3d);
                                                                    if(t_id_cfdi.getText().compareTo("")!=0)
                                                                    {
                                                                        UsoCfdi uso=(UsoCfdi) session.createCriteria(UsoCfdi.class).add(Restrictions.eq("idUsoCfdi", t_id_cfdi.getText())).setMaxResults(1).uniqueResult();
                                                                        nuevaFactura.setUsoCfdi(uso);
                                                                    }

                                                                    int noFactura=(Integer)session.save(nuevaFactura);
                                                                    factura=(Factura)session.get(Factura.class, noFactura);
                                                                    //crear los conceptos
                                                                    for(int a=0; a<t_datos.getRowCount(); a++)
                                                                    {
                                                                        Concepto renglon=new Concepto();
                                                                        renglon.setFactura(nuevaFactura);
                                                                        renglon.setCantidad((double)t_datos.getValueAt(a, 0));
                                                                        renglon.setMedida(t_datos.getValueAt(a, 1).toString());
                                                                        renglon.setDescripcion(t_datos.getValueAt(a, 2).toString());
                                                                        ProductoServicio p_servicio = (ProductoServicio) session.createCriteria(ProductoServicio.class).add(Restrictions.eq("idProductoServicio", t_datos.getValueAt(a, 3).toString())).setMaxResults(1).uniqueResult();
                                                                        renglon.setProductoServicio(p_servicio);
                                                                        renglon.setPrecio((double)t_datos.getValueAt(a, 4));
                                                                        renglon.setDescuento((double)t_datos.getValueAt(a, 5));
                                                                        renglon.setFactura(factura);
                                                                        renglon.setIva((double)t_datos.getValueAt(a, 6));
                                                                        session.save(renglon);
                                                                    }

                                                                    orden_act.setNoFactura(noFactura);
                                                                    orden_act.setUsuarioByRFactura(user);
                                                                    orden_act.setFehaFectura(nuevaFactura.getFecha());
                                                                    orden_act.setFechaCierre(nuevaFactura.getFecha());
                                                                    orden_act.setUsuarioByRCierre(user);

                                                                    session.update(orden_act);
                                                                    session.beginTransaction().commit();
                                                                    t_noFactura.setText(""+noFactura);
                                                                    JOptionPane.showMessageDialog(this, "La factura se ha guardado con el número:"+noFactura);
                                                                    addendas.setSize(324, 135);
                                                                    Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
                                                                    addendas.setLocation((d.width/2)-(addendas.getWidth()/2), (d.height/2)-(addendas.getHeight()/2));
                                                                    addendas.setVisible(true);
                                                                }
                                                                else
                                                                {
                                                                    t_orden.setText("");
                                                                    orden_act=null;
                                                                    borra_cajas();
                                                                    t_orden.requestFocus();      
                                                                    JOptionPane.showMessageDialog(this, "La factura no esta lista para facturar");
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if(orden!=null)
                                                                {
                                                                    OrdenExterna ordenx=new OrdenExterna();
                                                                    ordenx.setAsegurado(this.t_asegurado.getText());
                                                                    if(this.t_marca.getText().compareTo("")!=0)//agregamos la marca
                                                                    {
                                                                        Marca mar=(Marca)session.get(Marca.class, l_marca.getText());
                                                                        if(mar!=null)
                                                                            ordenx.setMarca(mar);
                                                                        else
                                                                        {
                                                                            Marca aux=new Marca();
                                                                            aux.setIdMarca(l_marca.getText());
                                                                            aux.setMarcaNombre(t_marca.getText());
                                                                            session.save(aux);
                                                                            mar=(Marca)session.get(Marca.class, l_marca.getText());
                                                                            ordenx.setMarca(mar);
                                                                        }
                                                                    }
                                                                    if(this.t_tipo.getText().compareTo("")!=0)//agregamos el tipo
                                                                    {
                                                                        Tipo tip=(Tipo)session.get(Tipo.class, t_tipo.getText());
                                                                        if(tip!=null)
                                                                        {
                                                                            ordenx.setTipo(tip);
                                                                        }
                                                                        else
                                                                        {
                                                                            Tipo t=new Tipo();
                                                                            t.setTipoNombre(t_tipo.getText());
                                                                            t.setEPesado(0);
                                                                            session.save(t);
                                                                            tip=(Tipo)session.get(Tipo.class, t_tipo.getText());
                                                                            ordenx.setTipo(tip);
                                                                        }
                                                                    }
                                                                    ordenx.setNoSerie(t_serie.getText());
                                                                    if(this.t_modelo.getText().compareTo("")!=0)//agregamos el modelo
                                                                        ordenx.setModelo(Integer.parseInt(this.t_modelo.getText()));
                                                                    ordenx.setNoPlacas(t_placas.getText());
                                                                    ordenx.setPoliza(t_poliza.getText());
                                                                    ordenx.setSiniestro(t_siniestro.getText());
                                                                    ordenx.setNoReporte(t_reporte.getText());
                                                                    ordenx.setKm(t_km.getText());

                                                                    int nOrd=(int)session.save(ordenx);
                                                                    ordenx=(OrdenExterna)session.get(OrdenExterna.class, nOrd);
                                                                    
                                                                    System.out.println(c_emisor.getSelectedIndex());
                                                                    Configuracion con =(Configuracion)session.get(Configuracion.class, c_emisor.getSelectedIndex());
                                                                    Factura nuevaFactura=new Factura();
                                                                    nuevaFactura.setOrden(orden_act);
                                                                    nuevaFactura.setOrdenExterna(ordenx);
                                                                    nuevaFactura.setFecha(c1.getTime());// fecha de emision
                                                                    nuevaFactura.setRfcEmisor(con.getRfc());//RFC emisor
                                                                    nuevaFactura.setNombreEmisor(con.getNombre());//nombre emisor
                                                                    nuevaFactura.setCalleEmisor(con.getDireccion());//calle emisor
                                                                    nuevaFactura.setColoniaEmisor(con.getColonia());//Colonia emisor
                                                                    nuevaFactura.setNumeroExteriorEmisor(con.getNo());//numero exteerior emisor
                                                                    nuevaFactura.setMunicipioEmisor(con.getMunicipio());//municipio emisor
                                                                    nuevaFactura.setEstadoEmisor(con.getEstado());//estado emisor
                                                                    nuevaFactura.setPaisEmisor(con.getPais());//pais emisor
                                                                    nuevaFactura.setCpEmisor(con.getCp());//cp emisor
                                                                    nuevaFactura.setRfcReceptor(t_rfc.getText());
                                                                    nuevaFactura.setNombreReceptor(t_cliente.getText());
                                                                    nuevaFactura.setCalleReceptor(t_direccion.getText());
                                                                    nuevaFactura.setNumeroExteriorReceptor(t_numero_exterior.getText());
                                                                    nuevaFactura.setColoniaReceptor(t_colonia.getText());
                                                                    nuevaFactura.setMunicipioReceptor(t_municipio.getText());
                                                                    nuevaFactura.setEstadoReceptor(c_estado.getSelectedItem().toString());
                                                                    nuevaFactura.setPaisReceptor(c_pais.getSelectedItem().toString());
                                                                    nuevaFactura.setCpReceptor(t_cp.getText());
                                                                    nuevaFactura.setEstadoFactura("Pendiente");
                                                                    nuevaFactura.setEstatus("PENDIENTE");
                                                                    nuevaFactura.setDeducible(0.00d);
                                                                    nuevaFactura.setDescDeducible(0.0d);
                                                                    nuevaFactura.setMetodoPago("99");
                                                                    nuevaFactura.setCuentaPago("");
                                                                    nuevaFactura.setMoneda("MXN");
                                                                    nuevaFactura.setFactorCambio(1.0d);
                                                                    nuevaFactura.setArea("Talleres");
                                                                    nuevaFactura.setTipoPoliza("AUTOS");
                                                                    nuevaFactura.setTipoEmisor("MATRIZ");
                                                                    nuevaFactura.setContactoEmisor(con.getContacto());
                                                                    nuevaFactura.setCorreoEmisor(con.getMail());
                                                                    nuevaFactura.setTelefonoEmisor(con.getTel());
                                                                    nuevaFactura.setTipoReceptor("COORDINADOR");
                                                                    nuevaFactura.setContactoReceptor(t_receptor.getText());
                                                                    nuevaFactura.setCorreoReceptor(t_email.getText());
                                                                    nuevaFactura.setTelefonoReceptor("");
                                                                    nuevaFactura.setCodigoOficina("");
                                                                    nuevaFactura.setFoliosElectronicos("");
                                                                    nuevaFactura.setUsuarioByGenero(user);
                                                                    nuevaFactura.setCondicionesPago("PAGO EN UNA SOLA EXHIBICION");
                                                                    nuevaFactura.setMedioPago("NO IDENTIFICADO");
                                                                    nuevaFactura.setFechaMedioPago(c1.getTime());
                                                                    nuevaFactura.setIva(Integer.parseInt(cb_iva.getSelectedItem().toString()));
                                                                    nuevaFactura.setExtra(t_extra.getText());
                                                                    if(this.cb_sucursal.getSelectedItem().toString().compareToIgnoreCase("TULTITLAN")==0)
                                                                        if(t_orden.getText().compareTo("")!=0)
                                                                            nuevaFactura.setIdTultitlan(Integer.parseInt(t_orden.getText()));
                                                                    if(con.getVersion()!=null)
                                                                        nuevaFactura.setVersion(con.getVersion());
                                                                    else
                                                                        nuevaFactura.setVersion(3.3d);
                                                                    if(t_id_cfdi.getText().compareTo("")!=0)
                                                                    {
                                                                        UsoCfdi uso=(UsoCfdi) session.createCriteria(UsoCfdi.class).add(Restrictions.eq("idUsoCfdi", t_id_cfdi.getText())).setMaxResults(1).uniqueResult();
                                                                        nuevaFactura.setUsoCfdi(uso);
                                                                    }

                                                                    int noFactura=(Integer)session.save(nuevaFactura);
                                                                    factura=(Factura)session.get(Factura.class, noFactura);

                                                                    //crear los conceptos
                                                                    for(int a=0; a<t_datos.getRowCount(); a++)
                                                                    {
                                                                        Concepto renglon=new Concepto();
                                                                        renglon.setFactura(nuevaFactura);
                                                                        renglon.setCantidad((double)t_datos.getValueAt(a, 0));
                                                                        renglon.setMedida(t_datos.getValueAt(a, 1).toString());
                                                                        ProductoServicio p_servicio = (ProductoServicio) session.createCriteria(ProductoServicio.class).add(Restrictions.eq("idProductoServicio", t_datos.getValueAt(a, 3).toString())).setMaxResults(1).uniqueResult();
                                                                        renglon.setProductoServicio(p_servicio);
                                                                        renglon.setDescripcion(t_datos.getValueAt(a, 2).toString());
                                                                        renglon.setPrecio((double)t_datos.getValueAt(a, 4));
                                                                        renglon.setDescuento((double)t_datos.getValueAt(a, 5));
                                                                        renglon.setFactura(factura);
                                                                        renglon.setIva((double)t_datos.getValueAt(a, 6));
                                                                        session.save(renglon);
                                                                    }

                                                                    logis(noFactura);

                                                                    session.beginTransaction().commit();
                                                                    t_noFactura.setText(""+noFactura);
                                                                    JOptionPane.showMessageDialog(this, "La factura se ha guardado con el número:"+noFactura);
                                                                    addendas.setSize(324, 135);
                                                                    Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
                                                                    addendas.setLocation((d.width/2)-(addendas.getWidth()/2), (d.height/2)-(addendas.getHeight()/2));
                                                                    addendas.setVisible(true);
                                                                }
                                                                else
                                                                {
                                                                    OrdenExterna nueva=new OrdenExterna();
                                                                    if(t_asegurado.getText().trim().compareTo("")!=0)
                                                                        nueva.setAsegurado(t_asegurado.getText().trim());
                                                                    if(t_inc.getText().trim().compareTo("")!=0)
                                                                        nueva.setInciso(t_inc.getText().trim());
                                                                    if(t_marca.getText().trim().compareTo("")!=0)
                                                                    {
                                                                        Marca m1=(Marca)session.get(Marca.class, t_marca.getText());
                                                                        nueva.setMarca(m1);
                                                                    }
                                                                    if(t_tipo.getText().trim().compareTo("")!=0)
                                                                    {
                                                                        Tipo t1=(Tipo)session.get(Tipo.class, t_tipo.getText());
                                                                        nueva.setTipo(t1);
                                                                    }
                                                                    if(t_serie.getText().trim().compareTo("")!=0)
                                                                        nueva.setNoSerie(t_serie.getText().trim());
                                                                    if(t_modelo.getText().trim().compareTo("")!=0)
                                                                        nueva.setModelo(Integer.parseInt(t_modelo.getText().trim()));
                                                                    if(t_placas.getText().trim().compareTo("")!=0)
                                                                        nueva.setNoPlacas(t_placas.getText().trim());
                                                                    if(t_poliza.getText().trim().compareTo("")!=0)
                                                                        nueva.setPoliza(t_poliza.getText().trim());
                                                                    if(t_siniestro.getText().trim().compareTo("")!=0)
                                                                        nueva.setSiniestro(t_siniestro.getText().trim());
                                                                    if(t_reporte.getText().trim().compareTo("")!=0)
                                                                        nueva.setNoReporte(t_reporte.getText().trim());
                                                                    nueva.setDeducible(0.00d);
                                                                    int id=(int)session.save(nueva);
                                                                    nueva=(OrdenExterna)session.get(OrdenExterna.class, id);

                                                                    System.out.println(c_emisor.getSelectedIndex());
                                                                    Configuracion con =(Configuracion)session.get(Configuracion.class, c_emisor.getSelectedIndex());
                                                                    Factura nuevaFactura=new Factura();
                                                                    nuevaFactura.setOrdenExterna(nueva);
                                                                    nuevaFactura.setFecha(c1.getTime());// fecha de emision
                                                                    nuevaFactura.setRfcEmisor(con.getRfc());//RFC emisor
                                                                    nuevaFactura.setNombreEmisor(con.getNombre());//nombre emisor
                                                                    nuevaFactura.setCalleEmisor(con.getDireccion());//calle emisor
                                                                    nuevaFactura.setColoniaEmisor(con.getColonia());//Colonia emisor
                                                                    nuevaFactura.setNumeroExteriorEmisor(con.getNo());//numero exteerior emisor
                                                                    nuevaFactura.setMunicipioEmisor(con.getMunicipio());//municipio emisor
                                                                    nuevaFactura.setEstadoEmisor(con.getEstado());//estado emisor
                                                                    nuevaFactura.setPaisEmisor(con.getPais());//pais emisor
                                                                    nuevaFactura.setCpEmisor(con.getCp());//cp emisor
                                                                    nuevaFactura.setRfcReceptor(t_rfc.getText());
                                                                    nuevaFactura.setNombreReceptor(t_cliente.getText());
                                                                    nuevaFactura.setCalleReceptor(t_direccion.getText());
                                                                    nuevaFactura.setNumeroExteriorReceptor(t_numero_exterior.getText());
                                                                    nuevaFactura.setColoniaReceptor(t_colonia.getText());
                                                                    nuevaFactura.setMunicipioReceptor(t_municipio.getText());
                                                                    nuevaFactura.setEstadoReceptor(c_estado.getSelectedItem().toString());
                                                                    nuevaFactura.setPaisReceptor(c_pais.getSelectedItem().toString());
                                                                    nuevaFactura.setCpReceptor(t_cp.getText());
                                                                    nuevaFactura.setEstadoFactura("Pendiente");
                                                                    nuevaFactura.setEstatus("PENDIENTE");
                                                                    nuevaFactura.setDeducible(0.00d);
                                                                    nuevaFactura.setDescDeducible(0.0d);                                                                    
                                                                    nuevaFactura.setMetodoPago("99");
                                                                    nuevaFactura.setCuentaPago("");
                                                                    nuevaFactura.setMoneda("MXN");
                                                                    nuevaFactura.setFactorCambio(1.0d);
                                                                    nuevaFactura.setArea("Talleres");
                                                                    nuevaFactura.setTipoPoliza("AUTOS");
                                                                    nuevaFactura.setTipoEmisor("MATRIZ");
                                                                    nuevaFactura.setContactoEmisor(con.getContacto());
                                                                    nuevaFactura.setCorreoEmisor(con.getMail());
                                                                    nuevaFactura.setTelefonoEmisor(con.getTel());
                                                                    nuevaFactura.setTipoReceptor("COORDINADOR");
                                                                    nuevaFactura.setContactoReceptor(t_receptor.getText());
                                                                    nuevaFactura.setCorreoReceptor(t_email.getText());
                                                                    nuevaFactura.setTelefonoReceptor("");
                                                                    nuevaFactura.setCodigoOficina("");
                                                                    nuevaFactura.setFoliosElectronicos("");
                                                                    nuevaFactura.setUsuarioByGenero(user);
                                                                     nuevaFactura.setCondicionesPago("PAGO EN UNA SOLA EXHIBICION");
                                                                     nuevaFactura.setMedioPago("NO IDENTIFICADO");
                                                                     nuevaFactura.setFechaMedioPago(c1.getTime());
                                                                     nuevaFactura.setIva(Integer.parseInt(cb_iva.getSelectedItem().toString()));
                                                                     if(this.cb_sucursal.getSelectedItem().toString().compareToIgnoreCase("TULTITLAN")==0)
                                                                        if(t_orden.getText().compareTo("")!=0)
                                                                            nuevaFactura.setIdTultitlan(Integer.parseInt(t_orden.getText()));
                                                                     if(con.getVersion()!=null)
                                                                        nuevaFactura.setVersion(con.getVersion());
                                                                     else
                                                                        nuevaFactura.setVersion(3.3d);
                                                                    if(t_id_cfdi.getText().compareTo("")!=0)
                                                                    {
                                                                        UsoCfdi uso=(UsoCfdi) session.createCriteria(UsoCfdi.class).add(Restrictions.eq("idUsoCfdi", t_id_cfdi.getText())).setMaxResults(1).uniqueResult();
                                                                        nuevaFactura.setUsoCfdi(uso);
                                                                    }

                                                                    //crear los conceptos
                                                                    int noFactura=(Integer)session.save(nuevaFactura);
                                                                    factura=(Factura)session.get(Factura.class, noFactura);
                                                                    for(int a=0; a<t_datos.getRowCount(); a++)
                                                                    {
                                                                        Concepto renglon=new Concepto();
                                                                        renglon.setFactura(nuevaFactura);
                                                                        renglon.setCantidad((double)t_datos.getValueAt(a, 0));
                                                                        renglon.setMedida(t_datos.getValueAt(a, 1).toString());
                                                                        ProductoServicio p_servicio = (ProductoServicio) session.createCriteria(ProductoServicio.class).add(Restrictions.eq("idProductoServicio", t_datos.getValueAt(a, 3).toString())).setMaxResults(1).uniqueResult();
                                                                        renglon.setProductoServicio(p_servicio);
                                                                        renglon.setDescripcion(t_datos.getValueAt(a, 2).toString());
                                                                        renglon.setPrecio((double)t_datos.getValueAt(a, 3));
                                                                        renglon.setDescuento((double)t_datos.getValueAt(a, 4));
                                                                        renglon.setFactura(factura);
                                                                        renglon.setIva((double)t_datos.getValueAt(a, 6));
                                                                        session.save(renglon);
                                                                    }
                                                                    session.beginTransaction().commit();
                                                                    t_noFactura.setText(""+noFactura);
                                                                    if(session!=null)
                                                                        if(session.isOpen())
                                                                            session.close();
                                                                    JOptionPane.showMessageDialog(this, "La factura se ha guardado con el numero:"+noFactura);
                                                                    addendas.setSize(323, 125);
                                                                    Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
                                                                    addendas.setLocation((d.width/2)-(addendas.getWidth()/2), (d.height/2)-(addendas.getHeight()/2));
                                                                    addendas.setVisible(true);
                                                                }
                                                            }
                                                            break;
                                                        case "Egreso":
                                                            OrdenExterna nueva=new OrdenExterna();
                                                            if(t_asegurado.getText().trim().compareTo("")!=0)
                                                                nueva.setAsegurado(t_asegurado.getText().trim());
                                                            if(t_inc.getText().trim().compareTo("")!=0)
                                                                nueva.setInciso(t_inc.getText().trim());
                                                            if(t_marca.getText().trim().compareTo("")!=0)
                                                            {
                                                                Marca m1=(Marca)session.get(Marca.class, t_marca.getText());
                                                                nueva.setMarca(m1);
                                                            }
                                                            if(t_tipo.getText().trim().compareTo("")!=0)
                                                            {
                                                                Tipo t1=(Tipo)session.get(Tipo.class, t_tipo.getText());
                                                                nueva.setTipo(t1);
                                                            }
                                                            if(t_serie.getText().trim().compareTo("")!=0)
                                                                nueva.setNoSerie(t_serie.getText().trim());
                                                            if(t_modelo.getText().trim().compareTo("")!=0)
                                                                nueva.setModelo(Integer.parseInt(t_modelo.getText().trim()));
                                                            if(t_placas.getText().trim().compareTo("")!=0)
                                                                nueva.setNoPlacas(t_placas.getText().trim());
                                                            if(t_poliza.getText().trim().compareTo("")!=0)
                                                                nueva.setPoliza(t_poliza.getText().trim());
                                                            if(t_siniestro.getText().trim().compareTo("")!=0)
                                                                nueva.setSiniestro(t_siniestro.getText().trim());
                                                            if(t_reporte.getText().trim().compareTo("")!=0)
                                                                nueva.setNoReporte(t_reporte.getText().trim());
                                                            nueva.setDeducible(0.00d);
                                                            int id=(int)session.save(nueva);
                                                            nueva=(OrdenExterna)session.get(OrdenExterna.class, id);

                                                            Configuracion con =(Configuracion)session.get(Configuracion.class, c_emisor.getSelectedIndex());
                                                            Nota nuevaNota=new Nota();
                                                            nuevaNota.setOrdenExterna(nueva);
                                                            nuevaNota.setFecha(c1.getTime());// fecha de emision
                                                            nuevaNota.setRfcEmisor(con.getRfc());//RFC emisor
                                                            nuevaNota.setNombreEmisor(con.getNombre());//nombre emisor
                                                            nuevaNota.setCalleEmisor(con.getDireccion());//calle emisor
                                                            nuevaNota.setColoniaEmisor(con.getColonia());//Colonia emisor
                                                            nuevaNota.setNumeroExteriorEmisor(con.getNo());//numero exteerior emisor
                                                            nuevaNota.setMunicipioEmisor(con.getMunicipio());//municipio emisor
                                                            nuevaNota.setEstadoEmisor(con.getEstado());//estado emisor
                                                            nuevaNota.setPaisEmisor(con.getPais());//pais emisor
                                                            nuevaNota.setCpEmisor(con.getCp());//cp emisor
                                                            nuevaNota.setRfcReceptor(t_rfc.getText());
                                                            nuevaNota.setNombreReceptor(t_cliente.getText());
                                                            nuevaNota.setCalleReceptor(t_direccion.getText());
                                                            nuevaNota.setNumeroExteriorReceptor(t_numero_exterior.getText());
                                                            nuevaNota.setColoniaReceptor(t_colonia.getText());
                                                            nuevaNota.setMunicipioReceptor(t_municipio.getText());
                                                            nuevaNota.setEstadoReceptor(c_estado.getSelectedItem().toString());
                                                            nuevaNota.setPaisReceptor(c_pais.getSelectedItem().toString());
                                                            nuevaNota.setCpReceptor(t_cp.getText());
                                                            nuevaNota.setEstadoFactura("Pendiente");
                                                            nuevaNota.setEstatus("PENDIENTE");
                                                            nuevaNota.setDeducible(0.00d);
                                                            nuevaNota.setMetodoPago("99");
                                                            nuevaNota.setCuentaPago("");
                                                            nuevaNota.setMoneda("MXN");
                                                            nuevaNota.setFactorCambio(1.0d);
                                                            nuevaNota.setArea("Talleres");
                                                            nuevaNota.setTipoPoliza("AUTOS");
                                                            nuevaNota.setTipoEmisor("MATRIZ");
                                                            nuevaNota.setContactoEmisor(con.getContacto());
                                                            nuevaNota.setCorreoEmisor(con.getMail());
                                                            nuevaNota.setTelefonoEmisor(con.getTel());
                                                            nuevaNota.setTipoReceptor("COORDINADOR");
                                                            nuevaNota.setContactoReceptor(t_receptor.getText());
                                                            nuevaNota.setCorreoReceptor(t_email.getText());
                                                            nuevaNota.setTelefonoReceptor("");
                                                            nuevaNota.setCodigoOficina("");
                                                            nuevaNota.setFoliosElectronicos("");
                                                            nuevaNota.setUsuarioByGenero(user);
                                                            nuevaNota.setCondicionesPago("PAGO EN UNA SOLA EXHIBICION");
                                                            nuevaNota.setMedioPago("NO IDENTIFICADO");
                                                            nuevaNota.setFechaMedioPago(c1.getTime());
                                                            nuevaNota.setIva(Integer.parseInt(cb_iva.getSelectedItem().toString()));
                                                            nuevaNota.setExtra(t_extra.getText());
                                                            if(con.getVersion()!=null)
                                                               nuevaNota.setVersion(con.getVersion());
                                                            if(t_id_cfdi.getText().compareTo("")!=0)
                                                            {
                                                                UsoCfdi uso=(UsoCfdi) session.createCriteria(UsoCfdi.class).add(Restrictions.eq("idUsoCfdi", t_id_cfdi.getText())).setMaxResults(1).uniqueResult();
                                                                nuevaNota.setUsoCfdi(uso);
                                                            }

                                                            int noNota=(Integer)session.save(nuevaNota);
                                                            nota=(Nota)session.get(Nota.class, noNota);
                                                            //crear los conceptos
                                                            for(int a=0; a<t_datos.getRowCount(); a++)
                                                            {
                                                                Concepto renglon=new Concepto();
                                                                renglon.setNota(nuevaNota);
                                                                renglon.setCantidad((double)t_datos.getValueAt(a, 0));
                                                                renglon.setMedida(t_datos.getValueAt(a, 1).toString());
                                                                renglon.setDescripcion(t_datos.getValueAt(a, 2).toString());
                                                                ProductoServicio p_servicio = (ProductoServicio) session.createCriteria(ProductoServicio.class).add(Restrictions.eq("idProductoServicio", t_datos.getValueAt(a, 3).toString())).setMaxResults(1).uniqueResult();
                                                                renglon.setProductoServicio(p_servicio);
                                                                renglon.setPrecio((double)t_datos.getValueAt(a, 4));
                                                                renglon.setDescuento((double)t_datos.getValueAt(a, 5));
                                                                renglon.setNota(nota);
                                                                renglon.setIva((double)t_datos.getValueAt(a, 6));
                                                                session.save(renglon);
                                                            }
                                                            session.beginTransaction().commit();
                                                            t_noFactura.setText(""+noNota);
                                                            JOptionPane.showMessageDialog(this, "La Nota se ha guardado con el numero:"+noNota);
                                                            session.beginTransaction().begin();
                                                            nota=(Nota)session.get(Nota.class, nota.getIdNota());
                                                            session.beginTransaction().commit();
                                                            GeneraNota genera=new GeneraNota(new javax.swing.JFrame(), true, user, sessionPrograma, nota,configuracion);
                                                            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
                                                            genera.setLocation((d.width/2)-(genera.getWidth()/2), (d.height/2)-(genera.getHeight()/2));
                                                            genera.consulta();
                                                            genera.setVisible(true);
                                                            break;
                                                    }
                                                }
                                                catch(Exception e)
                                                {
                                                    session.beginTransaction().rollback();
                                                    e.printStackTrace();
                                                    JOptionPane.showMessageDialog(this, "No se pudo guardar el documento.");
                                                }
                                                finally
                                                {
                                                    if(session!=null)
                                                        if(session.isOpen())
                                                            session.close();
                                                }
                                            }
                                            else
                                                JOptionPane.showMessageDialog(this, "Ingrese el Municipio del cliente");
                                        }
                                        else
                                            JOptionPane.showMessageDialog(this, "Ingrese el CP del cliente");
                                    }
                                    else
                                        JOptionPane.showMessageDialog(this, "Ingrese el Número exterior del cliente");
                                }
                                else
                                    JOptionPane.showMessageDialog(this, "Ingrese la calle del cliente");
                            }
                            else
                                JOptionPane.showMessageDialog(this, "Ingrese el RFC del cliente");
                        }
                        else
                            JOptionPane.showMessageDialog(this, "Ingrese en nombre de la razón social");
                    }
                    else
                        JOptionPane.showMessageDialog(this, "Seleleccione el emisor para facturar");
                }
                else
                    JOptionPane.showMessageDialog(this, "Ingrese conceptos a facturar");
            }
            else
            {
                if(t_fecha.getText().compareTo("DD-MM-AAAA")!=0)
                {
                    if(t_rfc.getText().compareTo("")!=0)
                    {
                        if(t_datos.getRowCount()>0)
                        {
                            Session session = HibernateUtil.getSessionFactory().openSession();
                            try
                            {   
                                Calendar c1 = Calendar.getInstance();
                                String [] campos = t_fecha.getText().split("-");
                                Calendar calendario = Calendar.getInstance();
                                calendario.set(Calendar.MONTH, Integer.parseInt(campos[1])-1);
                                calendario.set(Calendar.YEAR, Integer.parseInt(campos[2]));
                                calendario.set(Calendar.DAY_OF_MONTH, Integer.parseInt(campos[0]));
                                session.beginTransaction().begin();

                                Configuracion con =(Configuracion)session.get(Configuracion.class, c_emisor.getSelectedIndex());
                                Pago nuevoPago=new Pago();
                                nuevoPago.setFecha(c1.getTime());// fecha de emision
                                nuevoPago.setRfcEmisor(con.getRfc());//RFC emisor
                                nuevoPago.setNombreEmisor(con.getNombre());//nombre emisor
                                nuevoPago.setCalleEmisor(con.getDireccion());//calle emisor
                                nuevoPago.setColoniaEmisor(con.getColonia());//Colonia emisor
                                nuevoPago.setNumeroExteriorEmisor(con.getNo());//numero exteerior emisor
                                nuevoPago.setMunicipioEmisor(con.getMunicipio());//municipio emisor
                                nuevoPago.setEstadoEmisor(con.getEstado());//estado emisor
                                nuevoPago.setPaisEmisor(con.getPais());//pais emisor
                                nuevoPago.setCpEmisor(con.getCp());//cp emisor
                                nuevoPago.setRfcReceptor(t_rfc.getText());
                                nuevoPago.setNombreReceptor(t_cliente.getText());
                                nuevoPago.setCalleReceptor(t_direccion.getText());
                                nuevoPago.setNumeroExteriorReceptor(t_numero_exterior.getText());
                                nuevoPago.setColoniaReceptor(t_colonia.getText());
                                nuevoPago.setMunicipioReceptor(t_municipio.getText());
                                nuevoPago.setEstadoReceptor(c_estado.getSelectedItem().toString());
                                nuevoPago.setPaisReceptor(c_pais.getSelectedItem().toString());
                                nuevoPago.setCpReceptor(t_cp.getText());
                                UsoCfdi uso=(UsoCfdi)session.get(UsoCfdi.class, "P01");
                                nuevoPago.setUsoCfdi(uso);
                                nuevoPago.setEstadoFactura("Pendiente");
                                nuevoPago.setEstatus("PENDIENTE");
                                nuevoPago.setMonto(((Number)t_pagado.getValue()).doubleValue());
                                nuevoPago.setFormaPago(c_forma_pago.getSelectedItem().toString());
                                nuevoPago.setMoneda("MXN");
                                nuevoPago.setFechaPago(calendario.getTime());
                                nuevoPago.setUsuarioByGenero(user);
                                nuevoPago.setVersion(3.3d);
                                nuevoPago.setReferencia("");
                                nuevoPago.setCorreoReceptor("braulio_ramirez@tractoservicio.com");

                                int noPago=(Integer)session.save(nuevoPago);
                                nuevoPago=(Pago)session.get(Pago.class, noPago);
                                //crear los conceptos
                                for(int a=0; a<t_datos.getRowCount(); a++)
                                {
                                    DocumentoPago renglon=new DocumentoPago();
                                    renglon.setPago(nuevoPago);
                                    Factura renglonFactura = (Factura)session.get(Factura.class, (int)t_datos.getValueAt(a, 0));
                                    renglon.setFactura(renglonFactura);
                                    renglon.setParcialidad(Integer.parseInt(t_datos.getValueAt(a, 3).toString()));
                                    renglon.setImporte(Double.parseDouble(t_datos.getValueAt(a, 4).toString()));
                                    renglon.setSaldoInsoluto(Double.parseDouble(t_datos.getValueAt(a, 6).toString()));
                                    renglon.setSaldoAnterior(Double.parseDouble(t_datos.getValueAt(a, 5).toString()));
                                    session.save(renglon);
                                    renglonFactura.setEstatus("COBRADA");
                                    renglonFactura.setfEstatus(nuevoPago.getFecha());
                                    session.update(renglonFactura);
                                }

                                session.beginTransaction().commit();
                                t_noFactura.setText(""+noPago);
                                JOptionPane.showMessageDialog(this, "El pago se ha guardado con el número:"+noPago);
                                
                                nuevoPago=(Pago)session.get(Pago.class, noPago);
                                NuevoPago pagos=new NuevoPago(new javax.swing.JFrame(), true, user, sessionPrograma, nuevoPago, configuracion);
                                Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
                                pagos.setSize(902, 511);
                                pagos.consulta();
                                pagos.setLocation((d.width/2)-(pagos.getWidth()/2), (d.height/2)-(pagos.getHeight()/2));
                                //pagos.consulta();
                                borra_cajas();
                                pagos.setVisible(true);
                            }
                            catch(Exception e)
                            {
                                session.beginTransaction().rollback();
                                e.printStackTrace();
                                JOptionPane.showMessageDialog(this, "No se pudo guardar el documento.");
                            }
                            finally
                            {
                                if(session!=null)
                                    if(session.isOpen())
                                        session.close();
                            }
                        }
                        else
                            JOptionPane.showMessageDialog(this, "Ingrese facturas a la lista de pago");
                    }
                    else
                        JOptionPane.showMessageDialog(this, "Ingrese datos del cliente");
                }
                else
                    JOptionPane.showMessageDialog(this, "Ingrese la fecha de pago");
            }
        }
        else
            JOptionPane.showMessageDialog(this, "Falta el Tipo de Documento");
    }//GEN-LAST:event_b_guardarActionPerformed

    private void t_numero_exteriorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_numero_exteriorKeyTyped
        // TODO add your handling code here:
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_numero_exterior.getText().length()>=10)
            evt.consume();
    }//GEN-LAST:event_t_numero_exteriorKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            session.beginTransaction().begin();
            factura=(Factura)session.get(Factura.class, factura.getIdFactura());
            session.beginTransaction().commit();
            addendas.setVisible(false);
            QUALITAS genera=new QUALITAS(new javax.swing.JFrame(), true, user, sessionPrograma, factura,configuracion);
            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
            genera.setLocation((d.width/2)-(genera.getWidth()/2), (d.height/2)-(genera.getHeight()/2));
            genera.consulta();
            borra_cajas();
            factura=null;
            genera.setVisible(true);
        }catch(Exception e)
        { 
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "error al consultar la orden");
        }
        finally
        {
            if(session!=null)
                if(session.isOpen())
                    session.close();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            session.beginTransaction().begin();
            factura=(Factura)session.get(Factura.class, factura.getIdFactura());
            session.beginTransaction().commit();
            addendas.setVisible(false);
            AXA genera=new AXA(new javax.swing.JFrame(), true, user, sessionPrograma, factura);
            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
            genera.setLocation((d.width/2)-(genera.getWidth()/2), (d.height/2)-(genera.getHeight()/2));
            genera.consulta();
            genera.setVisible(true);
        }catch(Exception e)
        { 
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "error al consultar la orden");
        }
        finally
        {
            if(session!=null)
                if(session.isOpen())
                    session.close();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            session.beginTransaction().begin();
            factura=(Factura)session.get(Factura.class, factura.getIdFactura());
            session.beginTransaction().commit();
            addendas.setVisible(false);
            GNP genera=new GNP(new javax.swing.JFrame(), true, user, sessionPrograma, factura,configuracion);
            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
            genera.setLocation((d.width/2)-(genera.getWidth()/2), (d.height/2)-(genera.getHeight()/2));
            genera.consulta();
            borra_cajas();
            factura=null;
            genera.setVisible(true);
        }catch(Exception e)
        { 
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al consultar la orden");
        }
        finally
        {
            if(session!=null)
                if(session.isOpen())
                    session.close();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            session.beginTransaction().begin();
            factura=(Factura)session.get(Factura.class, factura.getIdFactura());
            session.beginTransaction().commit();
            addendas.setVisible(false);
            General genera=new General(new javax.swing.JFrame(), true, user, sessionPrograma, factura,configuracion);
            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
            genera.setLocation((d.width/2)-(genera.getWidth()/2), (d.height/2)-(genera.getHeight()/2));
            genera.consulta();
            borra_cajas();
            factura=null;
            genera.setVisible(true);
        }catch(Exception e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al consultar la orden");
        }
        finally
        {
            if(session!=null)
                if(session.isOpen())
                    session.close();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void b_masActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_masActionPerformed
        h=new Herramientas(this.user, 0);
        h.session(sessionPrograma);
        if(c_documento.getSelectedItem().toString().compareTo("Pago")!=0)
        {
            model = (MyModel) t_datos.getModel();
            Object nuevo[]= {0.0d,"PZAS","","",0.0d, 0.0d, 16.0d, 0.0d};
            model.addRow(nuevo);
            t_datos.setRowSelectionInterval(t_datos.getRowCount()-1, t_datos.getRowCount()-1);
            t_datos.setColumnSelectionInterval(0, 0);
            sumaTotales();
        }
        else
        {
            if(t_rfc.getText().compareTo("")!=0)
            {
                if(c_emisor.getSelectedItem().toString().compareTo("SELECCIONAR")!=0)
                {
                    Session session = HibernateUtil.getSessionFactory().openSession();
                    try
                    {
                        buscaFactura obj = new buscaFactura(new javax.swing.JFrame(), true, this.sessionPrograma, this.user, 0,configuracion);
                        obj.t_busca.requestFocus();
                        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
                        obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
                        obj.setVisible(true);
                        Factura aux=obj.getReturnStatus();
                        if(aux!=null)
                        {
                            session.beginTransaction().begin();
                            aux=(Factura)session.get(Factura.class, aux.getIdFactura());
                            if(aux.getRfcReceptor().compareTo(t_rfc.getText())==0)
                            {
                                Configuracion con =(Configuracion)session.get(Configuracion.class, c_emisor.getSelectedIndex());
                                if(aux.getNombreEmisor().compareTo(con.getNombre())==0)
                                {
                                    if(aux!=null && busca_lista(aux.getFFiscal())==false)
                                    {
                                        if(aux.getEstadoFactura().compareTo("Cancelado")!=0)
                                        {
                                            if(aux.getFFiscal()!=null && aux.getFFiscal().compareTo("")!=0)
                                            {
                                                DefaultTableModel temp = (DefaultTableModel) t_datos.getModel();
                                                DocumentoPago docPago = (DocumentoPago)session.createCriteria(DocumentoPago.class).add(Restrictions.eq("factura.idFactura", aux.getIdFactura())).createAlias("pago", "pag").add(Restrictions.ne("pag.estadoFactura", "CANCELADO")).addOrder(Order.desc("parcialidad")).setMaxResults(1).uniqueResult();
                                                if(docPago!=null)
                                                {
                                                    if(docPago.getPago().getEstadoFactura().compareTo("Facturado")==0)
                                                    {
                                                        if(docPago.getSaldoInsoluto()>0.0)
                                                        {
                                                            Concepto[] renglon=(Concepto[])aux.getConceptos().toArray(new Concepto[0]);
                                                            BigDecimal total=new BigDecimal("0.0");
                                                            for(int w=0; w<aux.getConceptos().size(); w++)
                                                            {
                                                                BigDecimal cantidad=new BigDecimal(""+renglon[w].getCantidad());
                                                                BigDecimal precio=new BigDecimal(""+renglon[w].getPrecio());
                                                                BigDecimal descuento=new BigDecimal(""+renglon[w].getDescuento());
                                                                descuento=descuento.divide(new BigDecimal("100"));
                                                                BigDecimal subtotal=cantidad.multiply(precio).setScale(2, BigDecimal.ROUND_HALF_UP);
                                                                BigDecimal resta=subtotal.multiply(descuento).setScale(2, BigDecimal.ROUND_HALF_UP);
                                                                total = total.add(subtotal.subtract(resta)).setScale(2, BigDecimal.ROUND_HALF_UP);
                                                            }
                                                            BigDecimal iva=new BigDecimal(""+aux.getIva());
                                                            iva=iva.divide(new BigDecimal("100"));
                                                            total=total.add(total.multiply(iva));
                                                            double totalFinal=Double.parseDouble(total.setScale(2, BigDecimal.ROUND_HALF_UP).toString());
                                                            String folio="";
                                                            if(aux.getVersion()==3.3)
                                                                folio=""+aux.getFolioExterno();
                                                            else
                                                                folio=aux.getFolio();
                                                            Object nuevo[]= {aux.getIdFactura(),folio, aux.getFFiscal(),docPago.getParcialidad()+1, docPago.getSaldoInsoluto(), docPago.getSaldoInsoluto(), 0.0d};
                                                            temp.addRow(nuevo);
                                                            sumaTotales();
                                                        }
                                                        else
                                                        {
                                                            JOptionPane.showMessageDialog(null, "El documento ya esta pagado en su totalidad!");
                                                        }
                                                    }
                                                    else
                                                        JOptionPane.showMessageDialog(null, "La factura esta incluida en un comprobante de pago que no esta timbrado!");
                                                }
                                                else
                                                {
                                                    Concepto[] renglon=(Concepto[])aux.getConceptos().toArray(new Concepto[0]);
                                                    BigDecimal total=new BigDecimal("0.0");
                                                    for(int w=0; w<aux.getConceptos().size(); w++)
                                                    {
                                                        BigDecimal cantidad=new BigDecimal(""+renglon[w].getCantidad());
                                                        BigDecimal precio=new BigDecimal(""+renglon[w].getPrecio());
                                                        BigDecimal descuento=new BigDecimal(""+renglon[w].getDescuento());
                                                        descuento=descuento.divide(new BigDecimal("100"));
                                                        BigDecimal subtotal=cantidad.multiply(precio).setScale(2, BigDecimal.ROUND_HALF_UP);
                                                        BigDecimal resta=subtotal.multiply(descuento).setScale(2, BigDecimal.ROUND_HALF_UP);
                                                        total = total.add(subtotal.subtract(resta)).setScale(2, BigDecimal.ROUND_HALF_UP);
                                                    }
                                                    BigDecimal iva=new BigDecimal(""+aux.getIva());
                                                    iva=iva.divide(new BigDecimal("100"));
                                                    total=total.add(total.multiply(iva));
                                                    double totalFinal=Double.parseDouble(total.setScale(2, BigDecimal.ROUND_HALF_UP).toString());
                                                    Object nuevo[] = {aux.getIdFactura(),aux.getFolioExterno(), aux.getFFiscal(),1, totalFinal, totalFinal, 0.0d};
                                                    temp.addRow(nuevo);
                                                    sumaTotales();
                                                }
                                            }
                                            else
                                            {
                                                JOptionPane.showMessageDialog(null, "El documento no esta timbrado aun!");
                                            }
                                        }
                                        else
                                        {
                                            JOptionPane.showMessageDialog(null, "El documento Esta canceado!");
                                        }
                                    }
                                }
                                else
                                {
                                    JOptionPane.showMessageDialog(null, "El Emisor de la factura es diferente al seleccionado!");
                                }
                            //factura = (Factura)session.get(Factura.class, factura.getIdFactura()); chava
                            session.beginTransaction().commit();
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null, "El RFC de la factura no coincide con el del cliente seleccionado!");
                            }
                        }
                    }catch(Exception e)
                    {
                        session.beginTransaction().rollback();
                        e.printStackTrace();
                        evt=null;
                    }
                    finally
                    {
                        if(session!=null)
                        if(session.isOpen())
                        session.close();
                    }
                }
                else
                    JOptionPane.showMessageDialog(null, "Debe seleccionar primero el emisor del pago!");
            }
            else
                JOptionPane.showMessageDialog(null, "Debe seleccionar primero el cliente al cual va a registrar el pago!");
        }
    }//GEN-LAST:event_b_masActionPerformed

    private void b_menosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_menosActionPerformed
        h=new Herramientas(user, 0);
        h.session(sessionPrograma);
        if(t_datos.getRowCount()>0 && t_datos.getSelectedRowCount()>=0)
        {
            model = (MyModel) t_datos.getModel();
            int [] renglones=t_datos.getSelectedRows();
            for(int x=0; x<renglones.length; x++)
            {
                model.removeRow(renglones[x]-x);
            }
            sumaTotales();
            if(t_datos.getRowCount()>0)
            {
                t_datos.setRowSelectionInterval(t_datos.getRowCount()-1, t_datos.getRowCount()-1);
                t_datos.setColumnSelectionInterval(0, 0);
            }
        }
    }//GEN-LAST:event_b_menosActionPerformed

    private void b_actualiza1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_actualiza1ActionPerformed
        // TODO add your handling code here:
        if(t_orden.getText().compareTo("")!=0)
        {
            if(t_asegurado.getText().compareTo("")!=0)
            {
                if(t_tipo.getText().compareTo("")!=0)
                {
                    if(t_marca.getText().compareTo("")!=0)
                    {
                        if(t_modelo.getText().compareTo("")!=0)
                        {
                            boolean respuesta=guardarOrden();
                            if(respuesta==true)
                            {
                                JOptionPane.showMessageDialog(null, "¡Orden actualizada!");
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null, "¡Error al actualizar los datos!");
                                t_tipo.requestFocus();
                            }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, "¡Debe ingresar un modelo!");
                            t_modelo.requestFocus();
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "¡Debe seleccionar una marca!");
                        t_marca.requestFocus();
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "¡Debe seleccionar un tipo de unidad!");
                    t_tipo.requestFocus();
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "¡Debe introducir el nombre del cliente!");
                t_cliente.requestFocus();
            }   
        }
        else
            JOptionPane.showMessageDialog(null, "¡Debe introducir numero de orden!");
    }//GEN-LAST:event_b_actualiza1ActionPerformed

    private void b_marcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_marcaActionPerformed
        h=new Herramientas(user, 0);
        h.session(sessionPrograma);
        buscaMarca obj = new buscaMarca(new javax.swing.JFrame(), true, this.sessionPrograma, this.user, false);
        obj.t_busca.requestFocus();
        obj.formatoTabla();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
        obj.setVisible(true);

        Marca actor=obj.getReturnStatus();
        if(actor!=null)
        {
            t_marca.setText(actor.getMarcaNombre());
            l_marca.setText(actor.getIdMarca());
        }
        else
        {
            l_marca.setText("");
            t_marca.setText("");
        }
    }//GEN-LAST:event_b_marcaActionPerformed

    private void b_tipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_tipoActionPerformed
        // TODO add your handling code here:
        h=new Herramientas(user, 0);
        h.session(sessionPrograma);
        buscaTipo obj = new buscaTipo(new javax.swing.JFrame(), true, this.sessionPrograma, this.user);
        obj.t_busca.requestFocus();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
        obj.setVisible(true);
        String actor=obj.getReturnStatus();
        if(actor!=null)
            t_tipo.setText(actor);
        else
            t_tipo.setText("");
    }//GEN-LAST:event_b_tipoActionPerformed

    private void t_incFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_incFocusLost
        // TODO add your handling code here:
        if(t_inc.getText().length()>13)
        {
            t_inc.setText(t_inc.getText().substring(0, 13));
        }
    }//GEN-LAST:event_t_incFocusLost

    private void t_incActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_incActionPerformed
        // TODO add your handling code here:
        b_actualiza1.requestFocus();
    }//GEN-LAST:event_t_incActionPerformed

    private void t_incKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_incKeyTyped
        // TODO add your handling code here:
        char car = evt.getKeyChar();
        if(t_inc.getText().length()>=13) 
            evt.consume();
    }//GEN-LAST:event_t_incKeyTyped

    private void t_aseguradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_aseguradoActionPerformed
        // TODO add your handling code here:
        b_actualiza1.requestFocus();
    }//GEN-LAST:event_t_aseguradoActionPerformed

    private void t_aseguradoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_aseguradoFocusLost
        // TODO add your handling code here:
        if(t_asegurado.getText().length()>150)
        {
            t_asegurado.setText(t_asegurado.getText().substring(0, 150));
        }
    }//GEN-LAST:event_t_aseguradoFocusLost

    private void t_aseguradoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_aseguradoKeyTyped
        // TODO add your handling code here:
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        char car = evt.getKeyChar();
        if(t_asegurado.getText().length()>=150) 
            evt.consume();
    }//GEN-LAST:event_t_aseguradoKeyTyped

    private void t_serieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_serieActionPerformed
        // TODO add your handling code here:
        b_actualiza1.requestFocus();
    }//GEN-LAST:event_t_serieActionPerformed

    private void t_serieFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_serieFocusLost
        // TODO add your handling code here:
        if(t_serie.getText().length()>20)
        {
            t_serie.setText(t_serie.getText().substring(0, 20));
        }
    }//GEN-LAST:event_t_serieFocusLost

    private void t_serieKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_serieKeyTyped
        // TODO add your handling code here:
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_serie.getText().length()>=20)
            evt.consume();
    }//GEN-LAST:event_t_serieKeyTyped

    private void t_modeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_modeloActionPerformed
        // TODO add your handling code here:
        b_actualiza1.requestFocus();
    }//GEN-LAST:event_t_modeloActionPerformed

    private void t_modeloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_modeloFocusLost
        // TODO add your handling code here:
        if(t_modelo.getText().length()>4)
        {
            t_modelo.setText(t_modelo.getText().substring(0, 4));
            try{
                Integer.parseInt(t_modelo.getText());
            }catch(Exception e){
                e.printStackTrace();
                t_modelo.setText("");
            }
        }
        else
        {
            try{
                Integer.parseInt(t_modelo.getText());
            }catch(Exception e){
                t_modelo.setText("");
            }
        }
            
    }//GEN-LAST:event_t_modeloFocusLost

    private void t_placasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_placasActionPerformed
        // TODO add your handling code here:
        b_actualiza1.requestFocus();
    }//GEN-LAST:event_t_placasActionPerformed

    private void t_placasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_placasFocusLost
        // TODO add your handling code here:
        if(t_placas.getText().length()>8)
            t_placas.setText(t_placas.getText().substring(0, 8));
    }//GEN-LAST:event_t_placasFocusLost

    private void t_placasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_placasKeyTyped
        // TODO add your handling code here:
        char car = evt.getKeyChar();
        if(t_placas.getText().length()>=8)
            evt.consume();
    }//GEN-LAST:event_t_placasKeyTyped

    private void t_polizaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_polizaActionPerformed
        // TODO add your handling code here:
        b_actualiza1.requestFocus();
    }//GEN-LAST:event_t_polizaActionPerformed

    private void t_polizaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_polizaFocusLost
        // TODO add your handling code here:
        if(t_poliza.getText().length()>20)
            t_poliza.setText(t_poliza.getText().substring(0, 20));
    }//GEN-LAST:event_t_polizaFocusLost

    private void t_polizaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_polizaKeyTyped
        // TODO add your handling code here:
        char car = evt.getKeyChar();
        if(t_poliza.getText().length()>=15)
            evt.consume();
    }//GEN-LAST:event_t_polizaKeyTyped

    private void t_siniestroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_siniestroActionPerformed
        // TODO add your handling code here:
        b_actualiza.requestFocus();
    }//GEN-LAST:event_t_siniestroActionPerformed

    private void t_siniestroFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_siniestroFocusLost
        // TODO add your handling code here:
        if(t_siniestro.getText().length()>20)
            t_siniestro.setText(t_siniestro.getText().substring(0, 20));
    }//GEN-LAST:event_t_siniestroFocusLost

    private void t_siniestroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_siniestroKeyTyped
        // TODO add your handling code here:
        char car = evt.getKeyChar();
        if(t_siniestro.getText().length()>=20) 
            evt.consume();
    }//GEN-LAST:event_t_siniestroKeyTyped

    private void t_reporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_reporteActionPerformed
        // TODO add your handling code here:
        b_actualiza1.requestFocus();
    }//GEN-LAST:event_t_reporteActionPerformed

    private void t_reporteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_reporteFocusLost
        // TODO add your handling code here:
        if(t_reporte.getText().length()>20)
            t_reporte.setText(t_reporte.getText().substring(0, 20));
    }//GEN-LAST:event_t_reporteFocusLost

    private void t_reporteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_reporteKeyTyped
        // TODO add your handling code here:
        char car = evt.getKeyChar();
        if(t_reporte.getText().length()>=20)
            evt.consume();
    }//GEN-LAST:event_t_reporteKeyTyped

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if(c_documento.getSelectedItem().toString().compareTo("Pago")!=0)
        {
            aviso.setFileFilter(new ExtensionFileFilter("Excel document (*.xls)", new String[] { "xls" }));
            int resp=aviso.showOpenDialog(null);
            if(resp==aviso.APPROVE_OPTION)
            {
                File archivoXLS=aviso.getSelectedFile();
                if(archivoXLS.exists()==true)
                {
                    Session session = HibernateUtil.getSessionFactory().openSession();
                    try
                    {
                        FileInputStream archivo = new FileInputStream(archivoXLS);
                        POIFSFileSystem fsFileSystem = new POIFSFileSystem(archivo);
                        Workbook libro1 = new HSSFWorkbook(fsFileSystem);
                        Sheet datos = libro1.getSheetAt(0);
                        Iterator rowIterator;
                        int r=0;

                        //**********cargamos datos************************
                        model=new MyModel(new Object [0][6], columnas, tipos, editar, c_documento.getSelectedItem().toString());
                        rowIterator= datos.rowIterator();
                        r=0;
                        while (rowIterator.hasNext())
                        {
                            HSSFRow renglon = (HSSFRow) rowIterator.next();
                            if(r>0)
                            {
                                double cant=renglon.getCell(0).getNumericCellValue();
                                double cu=renglon.getCell(4).getNumericCellValue();
                                double descuento=renglon.getCell(5).getNumericCellValue();
                                double suma=cant*cu;
                                double desc=descuento/100;
                                double total=suma-(suma*desc);
                                Object nuevo[]= {
                                    cant,
                                    renglon.getCell(1).getStringCellValue(),
                                    renglon.getCell(2).getStringCellValue(),
                                    renglon.getCell(3).getStringCellValue(),
                                    cu,
                                    descuento,
                                    16.0d,
                                    total};
                                model.addRow(nuevo);
                            }
                            else
                            r=1;
                        }
                        t_datos.setModel(model);
                        formatoTabla();
                        this.sumaTotales();

                        t_datos.setRowSelectionInterval(t_datos.getRowCount()-1, t_datos.getRowCount()-1);
                        t_datos.setColumnSelectionInterval(0, 0);
                        t_datos.requestFocus();
                    }catch(Exception e)
                    {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "No se pudo abrir el archivo");
                    }
                    if(session!=null)
                    if(session.isOpen()==true)
                    session.close();
                }
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Opción no disponible para Documento de tipo Pago");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void b_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_buscarActionPerformed
        // TODO add your handling code here:
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            session.beginTransaction().begin();
            if(c_cliente.getSelectedItem().toString().compareTo("Cliente")==0)
            {
                h=new Herramientas(user, 0);
                h.session(sessionPrograma);

                buscaCliente obj = new buscaCliente(new javax.swing.JFrame(), true);
                obj.t_busca.requestFocus();
                Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
                obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
                obj.setVisible(true);

                Clientes actor=obj.getReturnStatus();
                if(actor!=null)
                {
                    actor=(Clientes)session.get(Clientes.class, actor.getIdClientes());
                    t_id.setText(""+actor.getIdClientes());
                    t_cliente.setText(actor.getNombre());

                    if(actor.getRfc()!=null)
                        t_rfc.setText(actor.getRfc());
                    else
                        t_rfc.setText("");

                    if(actor.getDireccion()!=null)
                        t_direccion.setText(actor.getDireccion());
                    else
                        t_direccion.setText("");

                    if(actor.getCp()!=null)
                        t_cp.setText(""+actor.getCp());
                    else
                        t_cp.setText("");

                    if(actor.getColonia()!=null)
                        t_colonia.setText(actor.getColonia());
                    else
                        t_colonia.setText(actor.getColonia());

                    if(actor.getMunicipio()!=null)
                        t_municipio.setText(actor.getMunicipio());
                    else
                        t_municipio.setText("");

                    if(actor.getEstado()!=null)
                        c_estado.setSelectedItem(actor.getEstado());

                    if(actor.getPais()!=null)
                        c_pais.setSelectedItem(actor.getPais());
                    else
                        c_pais.setSelectedItem("");
                    if(actor.getNumeroExterior()!=null)
                        t_numero_exterior.setText(actor.getNumeroExterior());
                    else
                        t_numero_exterior.setText("");
                    if(actor.getReceptor()!=null)
                        t_receptor.setText(actor.getReceptor());
                    else
                        t_receptor.setText("");
                    if(actor.getEmailReceptor()!=null)
                        t_email.setText(actor.getEmailReceptor());
                    else
                        t_email.setText("");
                    if(actor.getUsoCfdi()!=null)
                    {
                       this.t_id_cfdi.setText(actor.getUsoCfdi().getIdUsoCfdi());
                       this.t_descripcion_cfdi.setText(actor.getUsoCfdi().getDescripcion());
                    }
                    else
                    {
                        this.t_id_cfdi.setText("");
                        this.t_descripcion_cfdi.setText("");
                    }
                        
                    if(c_documento.getSelectedItem().toString().compareTo("Pago")!=0)
                        b_actualiza.setEnabled(true);
                    else
                        b_actualiza.setEnabled(false);
                }
            }
            if(c_cliente.getSelectedItem().toString().compareTo("Compañia")==0)
            {
                h=new Herramientas(user, 0);
                h.session(sessionPrograma);

                buscaCompania obj = new buscaCompania(new javax.swing.JFrame(), true, this.sessionPrograma, this.user);
                obj.t_busca.requestFocus();
                Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
                obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
                obj.setVisible(true);

                Compania actor=obj.getReturnStatus();
                if(actor!=null)
                {
                    actor=(Compania)session.get(Compania.class, actor.getIdCompania());
                    t_id.setText(""+actor.getIdCompania());
                    t_cliente.setText(actor.getSocial());

                    if(actor.getRfc()!=null)
                        t_rfc.setText(actor.getRfc());
                    else
                        t_rfc.setText("");

                    if(actor.getDireccion()!=null)
                        t_direccion.setText(actor.getDireccion());
                    else
                        t_direccion.setText("");

                    if(actor.getCp()!=null)
                        t_cp.setText(""+actor.getCp());
                    else
                        t_cp.setText("");

                    if(actor.getColonia()!=null)
                        t_colonia.setText(actor.getColonia());
                    else
                        t_colonia.setText(actor.getColonia());

                    if(actor.getMunicipio()!=null)
                        t_municipio.setText(actor.getMunicipio());
                    else
                        t_municipio.setText("");

                    if(actor.getEstado()!=null)
                        c_estado.setSelectedItem(actor.getEstado());

                    if(actor.getPais()!=null)
                        c_pais.setSelectedItem(actor.getPais());
                    else
                        c_pais.setSelectedItem("");
                    if(actor.getNumeroExterior()!=null)
                        t_numero_exterior.setText(actor.getNumeroExterior());
                    else
                        t_numero_exterior.setText("");
                    if(actor.getRepresentante2()!=null)
                        t_receptor.setText(actor.getRepresentante2());
                    else
                        t_receptor.setText("");

                    if(actor.getR2Puesto()!=null)
                        t_email.setText(actor.getR2Puesto());
                    else
                        t_email.setText("");
                    
                    if(actor.getUsoCfdi()!=null)
                    {
                       this.t_id_cfdi.setText(actor.getUsoCfdi().getIdUsoCfdi());
                       this.t_descripcion_cfdi.setText(actor.getUsoCfdi().getDescripcion());
                    }
                    else
                    {
                       this.t_id_cfdi.setText("");
                       this.t_descripcion_cfdi.setText("");
                    }
                    b_actualiza.setEnabled(true);
                }
            }
        }catch(Exception e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al consultar los datos");
        }
        finally
        {
            if(session!=null)
            if(session.isOpen())
            session.close();
        }
    }//GEN-LAST:event_b_buscarActionPerformed

    private void cb_sucursalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_sucursalActionPerformed
        // TODO add your handling code here:
        if(cb_sucursal.getSelectedItem().toString().compareTo("TOLUCA")==0)
        {
            b_orden.setEnabled(true);
            b_actualiza1.setEnabled(true);
        }
        else
        {
            b_orden.setEnabled(false);
            b_actualiza1.setEnabled(false);
        }
        orden_act=null;
        orden=new ArrayList();
        t_orden.setText("");
        borra_cajas();
    }//GEN-LAST:event_cb_sucursalActionPerformed

    private void t_extraKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_extraKeyTyped
        // TODO add your handling code here:
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
        if(t_extra.getText().length()>=100)
            evt.consume();
    }//GEN-LAST:event_t_extraKeyTyped

    private void c_documentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c_documentoActionPerformed
        // TODO add your handling code here:
        if(c_documento.getSelectedItem().toString().compareTo("Pago")==0){
            p_datos_pago.setVisible(true);
            p_orden.setVisible(false);
            p_iva.setVisible(false);
            b_claves.setVisible(false);
            t_descuento.setVisible(false);
            l_descuento.setVisible(false);
            
            t_cliente.setEnabled(false);
            t_direccion.setEnabled(false);
            t_numero_exterior.setEnabled(false);
            t_rfc.setEnabled(false);
            t_colonia.setEnabled(false);
            t_cp.setEnabled(false);
            t_municipio.setEnabled(false);
            c_pais.setEnabled(false);
            c_estado.setEnabled(false);
            b_uso.setEnabled(false);
            b_actualiza.setEnabled(false);
        }
        else{
            p_datos_pago.setVisible(false);
            p_orden.setVisible(true);
            p_iva.setVisible(true);
            b_claves.setVisible(true);
            t_descuento.setVisible(false);
            l_descuento.setVisible(false);
            
            t_cliente.setEnabled(true);
            t_direccion.setEnabled(true);
            t_numero_exterior.setEnabled(true);
            t_rfc.setEnabled(true);
            t_colonia.setEnabled(true);
            t_cp.setEnabled(true);
            t_municipio.setEnabled(true);
            c_pais.setEnabled(true);
            c_estado.setEnabled(true);
            b_uso.setEnabled(true);
            b_actualiza.setEnabled(true);
        }
        t_orden.setText("");
        orden_act=null;
        orden=new ArrayList();
        borra_cajas();
    }//GEN-LAST:event_c_documentoActionPerformed

    private void cb_ivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_ivaActionPerformed
        // TODO add your handling code here:
        this.sumaTotales();
    }//GEN-LAST:event_cb_ivaActionPerformed

    private void b_usoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_usoActionPerformed
        // TODO add your handling code here:
        buscaUsoCfdi obj = new buscaUsoCfdi(new javax.swing.JFrame(), true, this.sessionPrograma, this.user);
        obj.t_busca.requestFocus();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
        obj.setVisible(true);

        UsoCfdi actor=obj.getReturnStatus();
        if(actor!=null)
        {
            t_id_cfdi.setText(actor.getIdUsoCfdi());
            t_descripcion_cfdi.setText(actor.getDescripcion());
        }
        else
        {
            t_id_cfdi.setText("");
            t_descripcion_cfdi.setText("");
        }
    }//GEN-LAST:event_b_usoActionPerformed

    private void t_ordenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_ordenFocusLost
        // TODO add your handling code here:
        t_ordenActionPerformed(null);
    }//GEN-LAST:event_t_ordenFocusLost

    private void t_ordenKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_ordenKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_t_ordenKeyPressed

    private void t_ordenKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_ordenKeyReleased
        // TODO add your handling code here:
        if(t_orden.getText().length()==6) 
            b_orden.requestFocus();
    }//GEN-LAST:event_t_ordenKeyReleased

    private void b_clavesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_clavesActionPerformed
        // TODO add your handling code here:
        if(t_datos.getSelectedRow()>=0)
        {
            buscarProServicio buscaServicio;
            buscaServicio = new buscarProServicio(null, true, user, sessionPrograma);
            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
            buscaServicio.setLocation((d.width / 2) - (buscaServicio.getWidth() / 2), (d.height / 2) - (buscaServicio.getHeight() / 2));
            buscaServicio.setVisible(true);
            if(buscaServicio.getReturnStatus()!=null){
                int [] renglones=t_datos.getSelectedRows();
                if(renglones!=null)
                {
                    String valor=buscaServicio.getReturnStatus().getIdProductoServicio();
                    for(int x=0; x<renglones.length; x++)
                        t_datos.setValueAt(valor, renglones[x], 3);
                }
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Debes seleccionar almenos un concepto de la tabla.");
        }
    }//GEN-LAST:event_b_clavesActionPerformed

    private void t_datosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_datosKeyTyped
        // TODO add your handling code here:
        int code = evt.getKeyCode();
        if(code != KeyEvent.VK_ENTER)
            medida.requestFocus();
    }//GEN-LAST:event_t_datosKeyTyped

    private void b_buscar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_buscar1ActionPerformed
        // TODO add your handling code here:
        h=new Herramientas(user, 0);
        h.session(sessionPrograma);
        Session session = HibernateUtil.getSessionFactory().openSession();
        this.user = (Usuario)session.get(Usuario.class, user.getIdUsuario());
        if(user.getCrearClientes()==true)
        {
            altaCliente obj = new altaCliente(new javax.swing.JFrame(), true, user, sessionPrograma);
            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
            obj.setLocation((d.width/2)-(obj.getWidth()/2), (d.height/2)-(obj.getHeight()/2));
            obj.setVisible(true);
        }
        else
        JOptionPane.showMessageDialog(null, "¡Acceso denegado!");
        if(session!=null)
            if(session.isOpen())
                session.close();
    }//GEN-LAST:event_b_buscar1ActionPerformed

    private void b_fechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_fechaActionPerformed
        // TODO add your handling code here:
        calendario cal =new calendario(new javax.swing.JFrame(), true, false);
        cal.setLocation(b_fecha.getLocation().x, b_fecha.getLocation().y);
        cal.setVisible(true);

        Calendar miCalendario=cal.getReturnStatus();
        if(miCalendario!=null)
        {
            String dia=Integer.toString(miCalendario.get(Calendar.DATE));;
            String mes = Integer.toString(miCalendario.get(Calendar.MONTH)+1);
            String anio = Integer.toString(miCalendario.get(Calendar.YEAR));
            t_fecha.setText(dia+"-"+mes+"-"+anio);
            b_fecha.requestFocus();
        }
        else
            t_fecha.setText("DD-MM-AAAA");
    }//GEN-LAST:event_b_fechaActionPerformed

    private void t_numero_exteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t_numero_exteriorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t_numero_exteriorActionPerformed

    private void c_estadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c_estadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_c_estadoActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            session.beginTransaction().begin();
            factura=(Factura)session.get(Factura.class, factura.getIdFactura());
            session.beginTransaction().commit();
            addendas.setVisible(false);
            Alsea genera=new Alsea(new javax.swing.JFrame(), true, user, sessionPrograma, factura,configuracion);
            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
            genera.setLocation((d.width/2)-(genera.getWidth()/2), (d.height/2)-(genera.getHeight()/2));
            genera.consulta();
            borra_cajas();
            factura=null;
            genera.setVisible(true);
        }catch(Exception e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al consultar la orden");
        }
        finally
        {
            if(session!=null)
                if(session.isOpen())
                    session.close();
        }
    }//GEN-LAST:event_jButton6ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog addendas;
    private javax.swing.JDialog alerta;
    private javax.swing.JFileChooser aviso;
    private javax.swing.JButton b_actualiza;
    private javax.swing.JButton b_actualiza1;
    private javax.swing.JButton b_buscar;
    private javax.swing.JButton b_buscar1;
    private javax.swing.JButton b_claves;
    private javax.swing.JButton b_fecha;
    private javax.swing.JButton b_guardar;
    private javax.swing.JButton b_marca;
    private javax.swing.JButton b_mas;
    private javax.swing.JButton b_menos;
    private javax.swing.JButton b_orden;
    private javax.swing.JButton b_tipo;
    private javax.swing.JButton b_uso;
    private javax.swing.JComboBox c_cliente;
    private javax.swing.JComboBox c_documento;
    private javax.swing.JComboBox c_emisor;
    private javax.swing.JComboBox c_estado;
    private javax.swing.JComboBox c_forma_pago;
    private javax.swing.JComboBox c_iva;
    private javax.swing.JComboBox c_pais;
    private javax.swing.JComboBox cb_iva;
    private javax.swing.JComboBox cb_sucursal;
    private javax.swing.JComboBox cfdi;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel l_asegurado;
    private javax.swing.JLabel l_descuento;
    private javax.swing.JLabel l_iva;
    private javax.swing.JLabel l_iva2;
    private javax.swing.JTextField l_marca;
    private javax.swing.JLabel l_subtotal;
    private javax.swing.JLabel l_total;
    private javax.swing.JComboBox medida;
    private javax.swing.JPanel p_cliente;
    private javax.swing.JPanel p_datos;
    private javax.swing.JPanel p_datos_pago;
    private javax.swing.JPanel p_iva;
    private javax.swing.JPanel p_orden;
    private javax.swing.JPanel p_totales;
    private javax.swing.JProgressBar progreso;
    private javax.swing.JTextField t_asegurado;
    private javax.swing.JTextField t_cliente;
    private javax.swing.JTextField t_colonia;
    private javax.swing.JTextField t_cp;
    private javax.swing.JTable t_datos;
    private javax.swing.JTextField t_descripcion_cfdi;
    private javax.swing.JFormattedTextField t_descuento;
    private javax.swing.JTextField t_direccion;
    private javax.swing.JTextField t_email;
    private javax.swing.JTextField t_extra;
    private javax.swing.JTextField t_fecha;
    private javax.swing.JTextField t_id;
    private javax.swing.JTextField t_id_cfdi;
    private javax.swing.JTextField t_inc;
    private javax.swing.JFormattedTextField t_iva;
    private javax.swing.JTextField t_km;
    private javax.swing.JTextField t_marca;
    private javax.swing.JTextField t_modelo;
    private javax.swing.JTextField t_municipio;
    private javax.swing.JTextField t_noFactura;
    private javax.swing.JTextField t_numero_exterior;
    public javax.swing.JTextField t_orden;
    private javax.swing.JFormattedTextField t_pagado;
    private javax.swing.JTextField t_placas;
    private javax.swing.JTextField t_poliza;
    private javax.swing.JTextField t_receptor;
    private javax.swing.JTextField t_reporte;
    private javax.swing.JTextField t_rfc;
    private javax.swing.JTextField t_serie;
    private javax.swing.JTextField t_siniestro;
    private javax.swing.JFormattedTextField t_subtotal;
    private javax.swing.JTextField t_tipo;
    private javax.swing.JFormattedTextField t_total;
    // End of variables declaration//GEN-END:variables
    
    void borra_cajas()
    {
        t_asegurado.setText("");
        l_marca.setText("");
        t_marca.setText("");
        t_tipo.setText("");
        t_serie.setText("");
        
        t_modelo.setText("");
        t_placas.setText("");
        t_poliza.setText("");
        t_siniestro.setText("");
        t_reporte.setText("");
        t_inc.setText("");
        t_km.setText("");
        
        c_cliente.setSelectedItem("Compañia");
        t_id.setText("");
        t_cliente.setText("");
        t_rfc.setText("");
        t_direccion.setText("");
        t_numero_exterior.setText("");
        t_cp.setText("");
        t_colonia.setText("");
        t_municipio.setText("");
        c_estado.setSelectedIndex(0);
        c_pais.setSelectedItem("MX");
        this.t_id_cfdi.setText("");
        this.t_descripcion_cfdi.setText("");
        t_subtotal.setValue(0);
        t_iva.setValue(0);
        t_total.setValue(0);
        t_descuento.setValue(0);
        t_noFactura.setText("");
        t_receptor.setText("");
        t_email.setText("");
        t_extra.setText("");
        
        asignaModelo();
        formatoTabla();
        t_pagado.setValue(0.0);
        
        t_fecha.setText("DD-MM-AAAA");
        t_pagado.setValue(0.0d);
        c_forma_pago.setSelectedIndex(1);
    }
    
    public void consultaOrden()
    {
        h=new Herramientas(user, 0);
        h.session(sessionPrograma);
        if(t_orden.getText().compareTo("")!=0)
        {
            borra_cajas();
            if (orden_act!=null)
            {
                Session session = HibernateUtil.getSessionFactory().openSession();
                try 
                {
                    session.beginTransaction().begin();
                    orden_act = (Orden)session.get(Orden.class, orden_act.getIdOrden()); 
                    //int id_fac=OrdenFacturado(orden_act);
                    //if(id_fac==-1)
                    //{
                        t_inc.setText(orden_act.getInciso());
                        t_asegurado.setText(orden_act.getClientes().getNombre());
                        l_marca.setText(orden_act.getMarca().getIdMarca());
                        t_marca.setText(orden_act.getMarca().getMarcaNombre());
                        t_tipo.setText(orden_act.getTipo().getTipoNombre());
                        if(orden_act.getNoSerie()!=null)
                            t_serie.setText(orden_act.getNoSerie());
                        else
                            t_serie.setText("");
                        t_modelo.setText(""+orden_act.getModelo());
                        if(orden_act.getNoPlacas()!=null)
                            t_placas.setText(orden_act.getNoPlacas());
                        else
                            t_placas.setText("");
                        t_poliza.setText(orden_act.getPoliza());
                        t_siniestro.setText(orden_act.getSiniestro());
                        t_reporte.setText(orden_act.getNoReporte());
                        
                        String tipo_cliente=orden_act.getTipoCliente();
                        
                        
                        if(tipo_cliente!=null)
                        {
                            switch(tipo_cliente)
                            {
                                case "1": 
                                    l_asegurado.setText("Asegurado:");
                                    break;

                                case "2": 
                                    l_asegurado.setText("Tercero:");
                                    break;

                                case "3": 
                                    l_asegurado.setText("Tercero Asegurado:");
                                    break;

                                case "4": 
                                    l_asegurado.setText("Particular");
                                    break;
                            }
                        }
                        //cargar las partidas
                        //b_guardar.setEnabled(true);
                        //c_cliente.setEnabled(true);
                        Partida[] partidas = (Partida[])session.createCriteria(Partida.class).
                                            add(Restrictions.eq("ordenByIdOrden.idOrden", orden_act.getIdOrden())).
                                            add(Restrictions.eq("facturado", true)).
                                            add(Restrictions.eq("incluida", false)).
                                            add(Restrictions.isNull("ordenByEnlazada")).
                                            addOrder(Order.asc("idEvaluacion")).addOrder(Order.asc("subPartida"))
                                            .list().toArray(new Partida[0]);
                        Partida[] enlazadas = (Partida[])session.createCriteria(Partida.class).
                                            add(Restrictions.eq("ordenByEnlazada.idOrden", orden_act.getIdOrden())).
                                            add(Restrictions.eq("incluida", true)).
                                            addOrder(Order.asc("idEvaluacion")).addOrder(Order.asc("subPartida"))
                                            .list().toArray(new Partida[0]);
                        //Partida[] enlazadas = (Partida[])orden_act.getPartidasForEnlazada().toArray(new Partida[0]);
                        Adicionales[] adicionales=(Adicionales[])orden_act.getAdicionaleses().toArray(new Adicionales[0]);
                        
                        if(c_documento.getSelectedItem().toString().compareTo("Pago")==0)
                        {
                            tipos = new Class [] {
                                java.lang.String.class, 
                                java.lang.String.class, 
                                java.lang.String.class, 
                                java.lang.Double.class,
                                java.lang.Double.class,
                                java.lang.Double.class,
                                java.lang.Double.class
                            };
                            editar = new boolean [] {
                                false, false, false, false, true, false, false
                            };
                            
                            columnas = new String [] {
                                "Id","Folio","UUID","Parcialidad","Imp Pag","Saldo Ant","Saldo Insol."
                            };
                        }
                        else
                        {
                            tipos = new Class [] {
                                java.lang.Double.class, 
                                java.lang.String.class, 
                                java.lang.String.class, 
                                java.lang.String.class,
                                java.lang.Double.class,
                                java.lang.Double.class,
                                java.lang.Double.class,
                                java.lang.Double.class
                            };
                            editar = new boolean [] {
                                true, true, true, true, true, true, true, false
                            };
                            columnas = new String [] {
                                "Can","Med","Descripción","Cve-Prod","Costo c/u","Descuento","IVA","Total"
                            };
                        }
                        model=new MyModel(new Object [0][columnas.length], columnas, tipos, editar, c_documento.getSelectedItem().toString());
                        
                        for(int a=0; a<partidas.length; a++)
                        {
                            double descuento=0.0d;//descuento de la partida
                            double total=(partidas[a].getPrecioFactura()*partidas[a].getCantidadFactura())*(1+(descuento/100));
                            model.addRow(
                                    new Object[]
                                    {
                                        partidas[a].getCantidadFactura(), 
                                        partidas[a].getMed(), 
                                        partidas[a].getDescripcionFactura(), 
                                        "", partidas[a].getPrecioFactura(),
                                        descuento,
                                        16.0,
                                       total 
                                    });
                        }
                        for(int b=0; b<enlazadas.length; b++)
                        {
                            double descuento2=0.0;//descuento de la partida
                            double total2=(enlazadas[b].getPrecioFactura()*enlazadas[b].getCantidadFactura())*(1+(descuento2/100));
                            model.addRow(
                                    new Object[]
                                    {
                                        enlazadas[b].getCantidadFactura(), 
                                        enlazadas[b].getMed(), 
                                        enlazadas[b].getDescripcionFactura(), 
                                        "", enlazadas[b].getPrecioFactura(),
                                        descuento2,
                                        16.0,
                                       total2 
                                    });
                        }
                        for(int c=0; c<adicionales.length; c++)
                        {
                            double descuento3=adicionales[c].getDescuento();//descuento de la partida
                            double total3=(adicionales[c].getPrecio()*adicionales[c].getCantidad())*(1+(descuento3/100));
                            model.addRow(
                                    new Object[]
                                    {
                                        adicionales[c].getCantidad(), 
                                        adicionales[c].getMedida(), 
                                        adicionales[c].getDescripcion(), 
                                        "", adicionales[c].getPrecio(),
                                        descuento3,
                                        16.0,
                                       total3 
                                    });
                        }
                        if(orden_act.getMoDirecta()>0.0d)
                        {
                            model.addRow(new Object[]{1.0, "NA", "MANO DE OBRA", "", orden_act.getMoDirecta(), 0.0, 16.0, orden_act.getMoDirecta()});
                        }
                        else
                        {
                            Query query = session.createQuery("SELECT SUM( "
                                    + "(CASE WHEN dm>0 THEN (dm*cant) ELSE 0 END) + "
                                    + "(CASE WHEN cam>0 THEN (cam*cant) ELSE 0 END) + "
                                    + "(CASE WHEN repMin>0 THEN (repMin*cant) ELSE 0 END) + "
                                    + "(CASE WHEN repMed>0 THEN (repMed*cant) ELSE 0 END) + "
                                    + "(CASE WHEN repMax>0 THEN (repMax*cant) ELSE 0 END) + "
                                    + "(CASE WHEN pint>0 THEN (pint*cant) ELSE 0 END) "
                                    + ") from Partida "
                                    +"where ordenByIdOrden.idOrden ="+orden_act.getIdOrden()+" or ordenByEnlazada.idOrden="+orden_act.getIdOrden());
                            Object  ent = query.uniqueResult();
                            if(ent!=null)
                            {
                                double res=orden_act.getCompania().getImporteHora()*Double.parseDouble(ent.toString());
                                if(res>0.0d)
                                    model.addRow(new Object[]{1.0, "NA", "MANO DE OBRA", "", res, 0.0, 16.0, res});
                            }
                            /*else
                            {
                                modelo.addRow(new Object[]{1.0, "NA", "MANO DE OBRA", "", 0.0, 0.0, 0.0});
                            }*/
                        }
                        Configuracion configuracion=(Configuracion)session.get(Configuracion.class, 1);
                        iva=configuracion.getIva();
                        session.beginTransaction().commit();
                        t_datos.setModel(model);
                        formatoTabla();
                        cargaCliente();
                    /*}
                    else
                    {
                        orden_act=null;
                        t_orden.setText("");
                        borra_cajas();
                        b_guardar.setEnabled(false);
                        c_cliente.setEnabled(false);
                        JOptionPane.showMessageDialog(null, "La orden ya fue Facturada con la Factura No:"+id_fac);
                        t_orden.requestFocus();
                    }*/
                }
                catch (HibernateException he) 
                {
                    he.printStackTrace();
                    session.getTransaction().rollback();
                    orden_act=null;
                    t_orden.setText("");
                    borra_cajas();
                    //b_guardar.setEnabled(false);
                    //c_cliente.setEnabled(false);
                    JOptionPane.showMessageDialog(null, "Error al consultar la Orden");
                    t_orden.requestFocus();
                }
                finally
                {
                    if(session!=null)
                        if(session.isOpen())
                            session.close();
                }
            }
            else
            {
                orden_act=null;
                t_orden.setText("");
                borra_cajas();
                //b_guardar.setEnabled(false);
                //c_cliente.setEnabled(false);
                JOptionPane.showMessageDialog(null, "¡El número de orden no existe!");
                t_orden.requestFocus();
            }
        }
        else
        {
            orden_act=null;
            borra_cajas();
            this.orden_act=null;
            //b_guardar.setEnabled(false);
            //c_cliente.setEnabled(false);
        }
        sumaTotales();
        this.updateUI();
    }
    
    void cargaCliente()
    {
        if(orden_act!=null)
        {
            Session session = HibernateUtil.getSessionFactory().openSession();
            try
            {
                session.beginTransaction().begin();
                orden_act=(Orden)session.get(Orden.class, orden_act.getIdOrden());
                if(c_cliente.getSelectedItem().toString().compareTo("Compañia")==0)
                {
                    t_id.setText(""+orden_act.getCompania().getIdCompania());
                    t_cliente.setText(orden_act.getCompania().getSocial());
                    if(orden_act.getCompania().getDireccion()!=null)
                        t_direccion.setText(orden_act.getCompania().getDireccion());
                    else
                        t_direccion.setText("");
                    if(orden_act.getCompania().getColonia()!=null)
                        t_colonia.setText(orden_act.getCompania().getColonia());
                    else
                        t_colonia.setText("");
                    c_estado.setSelectedItem(orden_act.getCompania().getEstado());
                    if(orden_act.getCompania().getRfc()!=null)
                        this.t_rfc.setText(orden_act.getCompania().getRfc());
                    else
                        this.t_rfc.setText("");
                    if(orden_act.getCompania().getCp()!=null)
                       t_cp.setText(orden_act.getCompania().getCp());
                    else
                        t_cp.setText("");
                    if(orden_act.getCompania().getMunicipio()!=null)
                        t_municipio.setText(orden_act.getCompania().getMunicipio());
                    else
                        t_municipio.setText("");
                    if(orden_act.getCompania().getNumeroExterior()!=null)
                        t_numero_exterior.setText(orden_act.getCompania().getNumeroExterior());
                    else
                        t_numero_exterior.setText("");
                    if(orden_act.getCompania().getRepresentante2()!=null)
                        t_receptor.setText(orden_act.getCompania().getRepresentante2());
                    else
                        t_receptor.setText("");
                    
                    if(orden_act.getCompania().getR2Puesto()!=null)
                        t_email.setText(orden_act.getCompania().getR2Puesto());
                    else
                        t_email.setText("");
                    c_pais.setSelectedItem(orden_act.getCompania().getPais());
                    if(orden_act.getCompania().getUsoCfdi()!=null)
                    {
                       this.t_id_cfdi.setText(orden_act.getCompania().getUsoCfdi().getIdUsoCfdi());
                       this.t_descripcion_cfdi.setText(orden_act.getCompania().getUsoCfdi().getDescripcion());
                    }
                    else
                    {
                        this.t_id_cfdi.setText("");
                        this.t_descripcion_cfdi.setText("");
                    }

                }
                else
                {
                    t_id.setText(""+orden_act.getClientes().getIdClientes());
                    t_cliente.setText(orden_act.getClientes().getNombre());
                    if(orden_act.getClientes().getDireccion()!=null)
                        t_direccion.setText(orden_act.getClientes().getDireccion());
                    else
                        t_direccion.setText("");
                    if(orden_act.getClientes().getColonia()!=null)
                        t_colonia.setText(orden_act.getClientes().getColonia());
                    else
                        t_colonia.setText("");
                    c_estado.setSelectedItem(orden_act.getClientes().getEstado());
                    if(orden_act.getClientes().getRfc()!=null)
                        this.t_rfc.setText(orden_act.getClientes().getRfc());
                    else
                        this.t_rfc.setText("");
                    try
                    {
                       int cp=orden_act.getClientes().getCp();
                       t_cp.setText(""+cp);
                    }
                    catch(Exception e)
                    {
                        t_cp.setText("");
                    }
                    if(orden_act.getClientes().getMunicipio()!=null)
                        t_municipio.setText(orden_act.getClientes().getMunicipio());
                    else
                        t_municipio.setText("");
                    c_pais.setSelectedItem(orden_act.getClientes().getPais());
                    if(orden_act.getClientes().getNumeroExterior()!=null)
                        t_numero_exterior.setText(orden_act.getClientes().getNumeroExterior());
                    else
                        t_numero_exterior.setText("");
                    if(orden_act.getClientes().getReceptor()!=null)
                        t_receptor.setText(orden_act.getClientes().getReceptor());
                    else
                        t_receptor.setText("");
                    if(orden_act.getClientes().getEmailReceptor()!=null)
                        t_email.setText(orden_act.getClientes().getEmailReceptor());
                    else
                        t_email.setText("");
                    if(orden_act.getClientes().getUsoCfdi()!=null)
                    {
                       this.t_id_cfdi.setText(orden_act.getCompania().getUsoCfdi().getIdUsoCfdi());
                       this.t_descripcion_cfdi.setText(orden_act.getCompania().getUsoCfdi().getDescripcion());
                    }
                    else
                    {
                        this.t_id_cfdi.setText("");
                       this.t_descripcion_cfdi.setText("");
                    }
                }
                session.close();
            }catch(Exception e)
            {
                System.out.println(e);
            }
            finally
            {
                if(session!=null)
                    if(session.isOpen())
                        session.close();
            }
        }
    }
    
    public void tabla_tamaños()
    {
        TableColumnModel col_model = t_datos.getColumnModel();
        FormatoEditor fe=new FormatoEditor();
        t_datos.setDefaultEditor(Double.class, fe);
        for (int i=0; i<t_datos.getColumnCount(); i++)
        {
  	      TableColumn column = col_model.getColumn(i);
              switch(i)
              {
                  case 0:
                      column.setPreferredWidth(20);
                      break;
                  case 1:
                      column.setPreferredWidth(20);
                      DefaultCellEditor editor = new DefaultCellEditor(medida);
                      column.setCellEditor(editor); 
                      editor.setClickCountToStart(2);
                      break;
                  case 2:
                      column.setPreferredWidth(350);
                      break;
                  case 3:
                      column.setPreferredWidth(100);
                      break;
                  case 4:
                      column.setPreferredWidth(40);
                      break;
                  case 5:
                      column.setPreferredWidth(40);
                      break;
                  case 6:
                      column.setPreferredWidth(20);
                      DefaultCellEditor editor2 = new DefaultCellEditor(c_iva);
                      column.setCellEditor(editor2); 
                      editor2.setClickCountToStart(2);
                      break;
                  case 7:
                      column.setPreferredWidth(40);
                      break;
                  default:
                      column.setPreferredWidth(40);
                      break;
              }
        }
        JTableHeader header = t_datos.getTableHeader();
        header.setForeground(Color.white);
    }
    
    public void tabla_tamaños1()
    {
        TableColumnModel col_model = t_datos.getColumnModel();
        FormatoEditor fe=new FormatoEditor();
        t_datos.setDefaultEditor(Double.class, fe);
        for (int i=0; i<t_datos.getColumnCount(); i++)
        {
  	      TableColumn column = col_model.getColumn(i);
              switch(i)
              {
                  case 0:
                      column.setPreferredWidth(20);
                      break;
                  case 1:
                      column.setPreferredWidth(50);
                      break;
                  case 2:
                      column.setPreferredWidth(350);
                      break;
                  case 3:
                      column.setPreferredWidth(20);
                      break;
                  case 4:
                      column.setPreferredWidth(40);
                      break;
                  case 5:
                      column.setPreferredWidth(40);
                      break;
                  case 6:
                      column.setPreferredWidth(40);
                      break;
                  case 7:
                      column.setPreferredWidth(40);
                      break;
                  default:
                      column.setPreferredWidth(40);
                      break;
              }
        }
        JTableHeader header = t_datos.getTableHeader();
        header.setForeground(Color.white);
    }
    public void formatoTabla()
    {
        Color c1 = new java.awt.Color(2, 135, 242);   
        for(int x=0; x<t_datos.getColumnModel().getColumnCount(); x++)
            t_datos.getColumnModel().getColumn(x).setHeaderRenderer(new Render1(c1));
        if(c_documento.getSelectedItem().toString().compareTo("Pago")==0)
            tabla_tamaños1();
        else
            tabla_tamaños();
        t_datos.setShowVerticalLines(true);
        t_datos.setShowHorizontalLines(true);
        t_datos.setDefaultRenderer(Double.class, formato); 
        t_datos.setDefaultRenderer(Integer.class, formato);
        t_datos.setDefaultRenderer(String.class, formato);
    }
    public void asignaModelo()
    {
        if(c_documento.getSelectedItem().toString().compareTo("Pago")==0)
        {
            tipos = new Class [] {
                java.lang.String.class, 
                java.lang.String.class, 
                java.lang.String.class, 
                java.lang.Double.class,
                java.lang.Double.class,
                java.lang.Double.class,
                java.lang.Double.class
            };
            editar = new boolean [] {
                false, false, false, false, true, false, false
            };
            columnas = new String [] {
                "Id","Folio","UUID","Parcialidad","Imp Pag","Saldo Ant","Saldo Insol."
            };
        }
        else
        {
            tipos = new Class [] {
                java.lang.Double.class, 
                java.lang.String.class, 
                java.lang.String.class, 
                java.lang.String.class,
                java.lang.Double.class,
                java.lang.Double.class,
                java.lang.Double.class,
                java.lang.Double.class
            };
            editar = new boolean [] {
                true, true, true, true, true, true, true, false
            };
            columnas = new String [] {
                "Can","Med","Descripción","Cve-Prod","Costo c/u","Descuento","IVA","Total"
            };
        }
        model=new MyModel(new Object [0][columnas.length], columnas, tipos, editar, c_documento.getSelectedItem().toString());
        t_datos.setModel(model);
    }
    
    public void sumaTotales()
    {
        try
        {
            if(c_documento.getSelectedItem().toString().compareTo("Pago")!=0)
            {
                iva=Integer.parseInt(cb_iva.getSelectedItem().toString());
                double total=0.0, iva_total=0.0d;
                for(int ren=0; ren<t_datos.getRowCount(); ren++)
                {
                    double monto=(double)t_datos.getValueAt(ren, 7);
                    double iva=(double)t_datos.getValueAt(ren, 6);
                    total+=monto;
                    iva_total+=monto*(iva*0.01);
                }
                t_subtotal.setText(""+total);
                t_subtotal.setValue(total);
                //t_iva.setText(""+iva);
                t_iva.setValue(new Double(iva_total));
                total+=iva_total;
                t_total.setValue(total);
            }
            else
            {
                double total=0.0;
                for(int ren=0; ren<t_datos.getRowCount(); ren++)
                {
                    total+=(double)t_datos.getValueAt(ren, 4);
                }
                t_pagado.setValue(total);
            }
        }catch(Exception e){e.printStackTrace();}
    }
    
    public int OrdenFacturado(Orden or)
    {
        int val=-1;
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            Factura[] fac=(Factura[])or.getFacturas().toArray(new Factura[0]);
            for(int r=0; r<fac.length; r++)
            {
                if(fac[r].getEstadoFactura().compareTo("Pendiente")==0 || fac[r].getEstadoFactura().compareTo("Facturado")==0)
                {
                    factura=fac[r];
                    val= fac[r].getIdFactura();
                }
            }
        }catch(Exception e)
        {
            val=-1;
        }
        finally
        {
            if(session!=null)
                if(session.isOpen())
                    session.close();
        }
        return val;
    }
    
    
    private boolean guardarOrden()
    {
        Session session = HibernateUtil.getSessionFactory().openSession();
        boolean ID = false;
        try 
        {
            session.beginTransaction().begin();
            orden_act = (Orden)session.get(Orden.class, Integer.parseInt(t_orden.getText()));
            //**********Almacenamos el Registro*******************
            Clientes cliente =new Clientes();
            Tipo unidad_tipo = new Tipo();
            Marca mr =new Marca();

            if(t_inc.getText().compareTo("")!=0)
                orden_act.setInciso(t_inc.getText());
            else
                orden_act.setInciso(null);
            
            if(t_siniestro.getText().compareTo("")!=0)
                orden_act.setSiniestro(t_siniestro.getText());
            else
                orden_act.setSiniestro(null);

            if(t_poliza.getText().compareTo("")!=0)
                orden_act.setPoliza(t_poliza.getText());
            else
                orden_act.setPoliza(null);

            if(t_reporte.getText().compareTo("")!=0)
                orden_act.setNoReporte(t_reporte.getText());
            else
                orden_act.setNoReporte(null);

            if(t_tipo.getText().compareTo("")!=0)
            {
                unidad_tipo.setTipoNombre(t_tipo.getText());
                orden_act.setTipo(unidad_tipo);
            }

            if(t_marca.getText().compareTo("")!=0)
            {
                mr.setIdMarca(l_marca.getText());
                orden_act.setMarca(mr);
            }

            if(t_placas.getText().compareTo("")!=0)
                orden_act.setNoPlacas(t_placas.getText());
            else
                orden_act.setNoPlacas(null);

            if(t_modelo.getText().compareTo("")!=0)
                orden_act.setModelo(Integer.parseInt(t_modelo.getText()));

            if(t_serie.getText().compareTo("")!=0)
                orden_act.setNoSerie(t_serie.getText());
            else
                orden_act.setNoSerie(null);

            //registro.setKm(t_km.getText());
            orden_act.setUsuarioByIdModificado(user);
            
            session.update(orden_act);
            session.getTransaction().commit();
            ID=true;
        } 
        catch (HibernateException he) 
        {
            he.printStackTrace();
            session.getTransaction().rollback();
            ID=false;
        }
        if(session!=null)
            if(session.isOpen())
                session.close();    
        return ID;
    }
    
    int validaEdo(int id_fac)
    {
        int op=id_fac;
        if(id_fac>0)
        {
            Session session = HibernateUtil.getSessionFactory().openSession();
            try
            {
                Factura f=(Factura)session.get(Factura.class, id_fac);
                if(f!=null)
                {
                    if(f.getEstadoFactura().compareTo("Cancelado")==0)
                    {
                        mysql=new Conexion();
                        String respL=mysql.conectarMSQL("red", "04650077", "tbstultitlan.ddns.net", "3306", "mydb");
                        if(respL.compareTo("")==0)
                        {
                            try 
                            {
                                int res=mysql.actualiza("update orden set no_factura=null where id_orden="+t_orden.getText());
                                if(res>0)
                                    op=-1;
                            }catch(Exception e)
                            {
                                e.printStackTrace();
                            }
                            finally
                            {
                                mysql.desconectarMSQL();
                            }
                        }
                    }
                }
            }catch(Exception e)
            {
                System.out.println(e);
            }
            finally
            {
                if(session!=null)
                    if(session.isOpen())
                        session.close();
            }
        }
        return op;
    }
    
    public void consultaOrden(String dato)
    {
        if(t_orden.getText().compareTo("")!=0)
        {
            borra_cajas();
            try 
            {
                if(orden.get(0)!=null)
                    t_inc.setText(orden.get(0).toString());//orden
                else
                    t_inc.setText("");//orden
                t_asegurado.setText(orden.get(1).toString());
                l_marca.setText(orden.get(2).toString());
                t_marca.setText(orden.get(3).toString());
                t_tipo.setText(orden.get(4).toString());
                if(orden.get(5)!=null)
                    t_serie.setText(orden.get(5).toString());
                else
                    t_serie.setText("");
                t_modelo.setText(orden.get(6).toString());
                if(orden.get(7)!=null)
                    t_placas.setText(orden.get(7).toString());
                else
                    t_placas.setText("");
                if(orden.get(8)!=null)
                    t_poliza.setText(orden.get(8).toString());
                t_poliza.setText("");
                if(orden.get(9)!=null)
                    t_siniestro.setText(orden.get(9).toString());
                else
                    t_siniestro.setText("");
                if(orden.get(10)!=null)
                    t_reporte.setText(orden.get(10).toString());
                else
                    t_reporte.setText("");

                String tipo_cliente="";
                if(orden.get(13)!=null)
                    tipo_cliente=orden.get(13).toString();
                
                if(orden.get(16)!=null)
                    t_km.setText(orden.get(16).toString());
                else
                    t_km.setText("");
                t_extra.setText(" "+t_orden.getText());
                
                /*if(orden.get(17)!=null)
                {
                    this.t_id_cfdi.setText(orden.get(17).toString());
                    this.t_descripcion_cfdi.setText(orden.get(18).toString());
                }
                else
                {
                    this.t_id_cfdi.setText("");
                    this.t_descripcion_cfdi.setText("");
                }*/
                switch(tipo_cliente)
                {
                    case "1": 
                        l_asegurado.setText("Asegurado:");
                        break;

                    case "2": 
                        l_asegurado.setText("Tercero:");
                        break;

                    case "3": 
                        l_asegurado.setText("Tercero Asegurado:");
                        break;

                    case "4": 
                        l_asegurado.setText("Particular");
                        break;
                }
                
                //cargar las partidas
                //b_guardar.setEnabled(true);
                //c_cliente.setEnabled(true);
                ArrayList partidas = mysql.Consulta("select cantidad_factura, med, catalogo.nombre, precio_factura from partida " +
                        "left join catalogo on partida.id_catalogo=catalogo.id_catalogo "
                        +"where id_orden="+dato+" and facturado=true and incluida=false and enlazada is null " +
                        "order by id_evaluacion, sub_partida asc;");
                
                ArrayList enlazadas = mysql.Consulta("select cantidad_factura, med, catalogo.nombre, precio_factura from partida " +
                        "left join catalogo on partida.id_catalogo=catalogo.id_catalogo "
                        +"where enlazada="+dato+" and facturado=true and incluida=false and enlazada is null " +
                        "order by id_evaluacion, sub_partida asc;");
                
                ArrayList adicionales = mysql.Consulta("select cantidad, medida, descripcion, precio from adicionales " +
                        "where id_orden="+dato+" order by id_adicionales asc;");
                
                if(c_documento.getSelectedItem().toString().compareTo("Pago")==0)
                {
                    tipos = new Class [] {
                        java.lang.String.class, 
                        java.lang.String.class, 
                        java.lang.String.class, 
                        java.lang.Double.class,
                        java.lang.Double.class,
                        java.lang.Double.class,
                        java.lang.Double.class
                    };
                    editar = new boolean [] {
                        false, false, false, false, true, false, false
                    };
                }
                else
                {
                    tipos = new Class [] {
                        java.lang.Double.class, 
                        java.lang.String.class, 
                        java.lang.String.class, 
                        java.lang.String.class,
                        java.lang.Double.class,
                        java.lang.Double.class,
                        java.lang.Double.class
                    };
                    editar = new boolean [] {
                        true, true, true, true, true, true, false
                    };
                }
                model=new MyModel(new Object [0][6], columnas, tipos, editar, c_documento.getSelectedItem().toString());
                
                for(int a=0; a<partidas.size(); a++)
                {
                    ArrayList aux= (ArrayList)partidas.get(a);
                    String noParte="";
                    /*if(partidas[a].getEjemplar()!=null)
                        noParte=partidas[a].getEjemplar().getIdParte();*/
                    double descuento=0.0d;//descuento de la partida
                    double total=(Double.parseDouble(aux.get(0).toString()) *Double.parseDouble(aux.get(3).toString()))*(1+(descuento/100));
                    model.addRow(
                            new Object[]
                            {
                                Double.parseDouble(aux.get(0).toString()), 
                                aux.get(1).toString(), 
                                aux.get(2).toString(), 
                                noParte,
                                Double.parseDouble(aux.get(3).toString()),
                                descuento,
                                16.0,
                               total 
                            });
                }
                for(int b=0; b<enlazadas.size(); b++)
                {
                    ArrayList aux= (ArrayList)enlazadas.get(b);
                    String noParte2="";
                    /*if(enlazadas[b].getEjemplar()!=null)
                        noParte2=enlazadas[b].getEjemplar().getIdParte();*/
                    double descuento=0.0d;//descuento de la partida
                    double total=(Double.parseDouble(aux.get(0).toString()) *Double.parseDouble(aux.get(3).toString()))*(1+(descuento/100));
                    model.addRow(
                            new Object[]
                            {
                                Double.parseDouble(aux.get(0).toString()), 
                                aux.get(1).toString(), 
                                aux.get(2).toString(), 
                                noParte2,
                                Double.parseDouble(aux.get(3).toString()),
                                descuento,
                                16.0,
                               total 
                            });
                }
                for(int c=0; c<adicionales.size(); c++)
                {
                    ArrayList aux= (ArrayList)adicionales.get(c);
                    String noParte3="";
                    double descuento=0.0d;//descuento de la partida
                    double total=(Double.parseDouble(aux.get(0).toString()) *Double.parseDouble(aux.get(3).toString()))*(1+(descuento/100));
                    model.addRow(
                            new Object[]
                            {
                                Double.parseDouble(aux.get(0).toString()), 
                                aux.get(1).toString(), 
                                aux.get(2).toString(), 
                                noParte3,
                                Double.parseDouble(aux.get(3).toString()),
                                descuento,
                                16.0,
                               total 
                            });
                }
                Double mo=Double.parseDouble(orden.get(14).toString());
                if(mo>0.0d)
                {
                    model.addRow(new Object[]{1.0, "NA", "MANO DE OBRA", "", mo, 0.0, 16.0, mo});
                }
                else
                {
                    ArrayList datos1=mysql.Consulta("SELECT SUM( \n" +
                            "(CASE WHEN dm>0 THEN (dm*cant) ELSE 0 END) + \n" +
                            "(CASE WHEN cam>0 THEN (cam*cant) ELSE 0 END) + \n" +
                            "(CASE WHEN rep_min>0 THEN (rep_min*cant) ELSE 0 END) + \n" +
                            "(CASE WHEN rep_med>0 THEN (rep_med*cant) ELSE 0 END) + \n" +
                            "(CASE WHEN rep_max>0 THEN (rep_max*cant) ELSE 0 END) + \n" +
                            "(CASE WHEN pint>0 THEN (pint*cant) ELSE 0 END) \n" +
                            ") as mo, configuracion.iva from partida, configuracion \n" +
                            "where Id_orden ="+t_orden.getText()+" or enlazada="+t_orden.getText());
                    if(datos1.size()>0)
                    {
                        ArrayList suma=(ArrayList)datos1.get(0);
                        double res=Double.parseDouble(orden.get(15).toString())*Double.parseDouble(suma.get(0).toString());
                        if(res>0.0d)
                            model.addRow(new Object[]{1.0, "NA", "MANO DE OBRA", "", res, 0.0, 16.0, res});
                        iva=Integer.parseInt(suma.get(1).toString());
                    }
                }
                t_datos.setModel(model);
                formatoTabla();
                //cargaCliente();
            }
            catch (HibernateException he) 
            {
                he.printStackTrace();
                t_orden.setText("");
                borra_cajas();
                //b_guardar.setEnabled(false);
                //c_cliente.setEnabled(false);
                JOptionPane.showMessageDialog(null, "Error al consultar la Orden");
                t_orden.requestFocus();
            }
            finally
            {
                mysql.desconectarMSQL();
            }
        }
        else
        {
            borra_cajas();
            //b_guardar.setEnabled(false);
            //c_cliente.setEnabled(false);s
        }
        sumaTotales();
        this.updateUI();
    }
    
    void logis(int nota)
    {
        mysql=new Conexion();
        String resp=mysql.conectarMSQL("red", "04650077", "tbstultitlan.ddns.net", "3306", "mydb");
        if(resp.compareTo("")==0)
        {
            try 
            {
                mysql.actualiza("update orden set no_factura="+nota+", feha_fectura=now() where id_orden="+t_orden.getText());
            }catch(Exception e)
            {
                e.printStackTrace();
            }
            finally
            {
                mysql.desconectarMSQL();
            }
        }
    }
    
    public class MyModel extends DefaultTableModel{
        Class[] types;
        boolean[] canEdit;
        String documento;
        String[] columnas;
        Object[][] obj;
        
        public MyModel(Object[][] matriz, String col[], Class[] tipo, boolean[] editar, String doc)
        {
            obj=matriz;
            types=tipo;
            canEdit=editar;
            documento=doc;
            columnas=col;
            this.setDataVector(matriz, col);
        }
        
        @Override
        public void setValueAt(Object value, int row, int col){
             Vector vector = (Vector)this.dataVector.elementAt(row);
                Object celda = ((Vector)this.dataVector.elementAt(row)).elementAt(col);
                switch(col)
                {
                    case 0:
                            if(documento.compareTo("Pago")==0)
                            {
                                vector.setElementAt(value, col);
                                this.dataVector.setElementAt(vector, row);
                                fireTableCellUpdated(row, col);
                            }
                            else
                            {
                                if(vector.get(col)==null)
                                {
                                    vector.setElementAt(value, col);
                                    this.dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                }
                                else
                                {
                                    if((double)value>=0.0d)
                                    {
                                        vector.setElementAt(value, col);
                                        this.dataVector.setElementAt(vector, row);
                                        fireTableCellUpdated(row, col);
                                        double suma=(((double)t_datos.getValueAt(row, 4))*((double)value));
                                        double desc=((double)t_datos.getValueAt(row, 5))/100;
                                        double total=suma-(suma*desc);
                                        t_datos.setValueAt(total, row, 7);
                                    }
                                    sumaTotales();
                                }
                            }
                            break;
                    case 3:
                            if(documento.compareTo("Pago")==0)
                            {
                                vector.setElementAt(value, col);
                                this.dataVector.setElementAt(vector, row);
                                fireTableCellUpdated(row, col);
                            }
                            else
                            {
                                if(vector.get(col)==null)
                                {
                                    vector.setElementAt(value, col);
                                    this.dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                }
                                else
                                {
                                    Session session = null;
                                    try
                                    {
                                        if(value.toString().compareToIgnoreCase("")!=0)
                                        {
                                            session = HibernateUtil.getSessionFactory().openSession();
                                            session.beginTransaction().begin();
                                            ProductoServicio p_servicio = (ProductoServicio) session.createCriteria(ProductoServicio.class).add(Restrictions.eq("idProductoServicio", value.toString())).setMaxResults(1).uniqueResult();
                                            if(p_servicio!=null)
                                            {
                                                vector.setElementAt(value.toString(), col);
                                                this.dataVector.setElementAt(vector, row);
                                                fireTableCellUpdated(row, col);
                                            }
                                            else{
                                                JOptionPane.showMessageDialog(null, "La clave no esta en el catalogo");
                                            }
                                        }
                                    }
                                    catch(Exception e)
                                    {
                                        e.printStackTrace();
                                        if(session.isOpen()==true)
                                            session.getTransaction().rollback();
                                    }
                                    if(session!=null)
                                        if(session.isOpen()==true)
                                        {
                                            session.flush();
                                            session.clear();
                                            session.close();
                                        }
                                }
                            }
                            break;
                    case 4:
                            if(documento.compareTo("Pago")==0)
                            {
                                if((double)value > 0.0d && (double)value <= (double)t_datos.getValueAt(row, 5))
                                {
                                    vector.setElementAt(value, col);
                                    this.dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                    double total = (double)t_datos.getValueAt(row, 5) - (double)value;
                                    t_datos.setValueAt(total, row, 6);
                                    sumaTotales();
                                }
                            }
                            else
                            {
                                if(vector.get(col)==null)
                                {
                                    vector.setElementAt(value, col);
                                    this.dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                }
                                else
                                {
                                    if((double)value>=0.0d)
                                    {
                                        vector.setElementAt(value, col);
                                        this.dataVector.setElementAt(vector, row);
                                        fireTableCellUpdated(row, col);
                                        double suma=(((double)value)*((double)t_datos.getValueAt(row, 0)));
                                        double desc=((double)t_datos.getValueAt(row, 5))/100;
                                        double total=suma-(suma*desc);
                                        t_datos.setValueAt(total, row, 7);
                                    }
                                    sumaTotales();
                                }
                            }
                            break;
                    case 6:
                            if(documento.compareTo("Pago")==0)
                            {
                                vector.setElementAt(value, col);
                                this.dataVector.setElementAt(vector, row);
                                fireTableCellUpdated(row, col);
                            }
                            else
                            {
                                if(vector.get(col)==null)
                                {
                                    vector.setElementAt(value, col);
                                    this.dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                }
                                else
                                {
                                    vector.setElementAt(Double.parseDouble((String)value), col);
                                    this.dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                    sumaTotales();
                                }
                            }
                            break;
                    case 5:
                            if(documento.compareTo("Pago")==0)
                            {
                                vector.setElementAt(value, col);
                                this.dataVector.setElementAt(vector, row);
                                fireTableCellUpdated(row, col);
                            }
                            else
                            {
                                if(vector.get(col)==null)
                                {
                                    vector.setElementAt(value, col);
                                    this.dataVector.setElementAt(vector, row);
                                    fireTableCellUpdated(row, col);
                                }
                                else
                                {
                                    if((double)value<=100.0d && (double)value>=0.0d)
                                    {
                                        vector.setElementAt(value, col);
                                        this.dataVector.setElementAt(vector, row);
                                        fireTableCellUpdated(row, col);
                                        double suma=(((double)t_datos.getValueAt(row, 4))*((double)t_datos.getValueAt(row, 0)));
                                        double desc=((double)value)/100;
                                        double total=suma-(suma*desc);
                                        t_datos.setValueAt(total, row, 7);
                                    }
                                    sumaTotales();
                                }
                            }
                            break;
                    default:
                            vector.setElementAt(value, col);
                            this.dataVector.setElementAt(vector, row);
                            fireTableCellUpdated(row, col);
                            break;
            }
         }
        
        @Override
        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    }
    
    boolean busca_lista(String aux)
    {
        if(aux!=null)
        {
            for(int x=0; x<t_datos.getRowCount(); x++)
            {
                if(t_datos.getValueAt(x, 0).toString().compareTo(aux)==0)
                    return true;
            }
            return false;
        }
        else
            return false;
        
    }
    
    void cargaEmpresas(){
        Session session = HibernateUtil.getSessionFactory().openSession();
        try
        {
            Configuracion[] con=(Configuracion[]) session.createCriteria(Configuracion.class).addOrder(Order.asc("idConfiguracion")).list().toArray(new Configuracion[0]);
            c_emisor.removeAllItems();
            c_emisor.addItem("SELECCIONAR");
            for(int r=0; r<con.length; r++){
                c_emisor.addItem(con[r].getEmpresa());
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            if(session!=null)
                if(session.isOpen())
                    session.close();
        }
    }
}
